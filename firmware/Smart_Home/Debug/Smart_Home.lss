
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000584a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  0000584a  000058de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015d  0080019a  0080019a  00005a18  2**0
                  ALLOC
  3 .stab         00003d8c  00000000  00000000  00005a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002426  00000000  00000000  000097a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0000bbca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000254  00000000  00000000  0000bdca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002910  00000000  00000000  0000c01e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016aa  00000000  00000000  0000e92e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b9  00000000  00000000  0000ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00011494  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000034c  00000000  00000000  000116b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c0a  00000000  00000000  00011a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001260a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 28 	call	0x516e	; 0x516e <main>
      8a:	0c 94 23 2c 	jmp	0x5846	; 0x5846 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
     2ba:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_fpadd_parts>:
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__prologue_saves__>
     2f2:	dc 01       	movw	r26, r24
     2f4:	2b 01       	movw	r4, r22
     2f6:	fa 01       	movw	r30, r20
     2f8:	9c 91       	ld	r25, X
     2fa:	92 30       	cpi	r25, 0x02	; 2
     2fc:	08 f4       	brcc	.+2      	; 0x300 <_fpadd_parts+0x1a>
     2fe:	39 c1       	rjmp	.+626    	; 0x572 <_fpadd_parts+0x28c>
     300:	eb 01       	movw	r28, r22
     302:	88 81       	ld	r24, Y
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	08 f4       	brcc	.+2      	; 0x30a <_fpadd_parts+0x24>
     308:	33 c1       	rjmp	.+614    	; 0x570 <_fpadd_parts+0x28a>
     30a:	94 30       	cpi	r25, 0x04	; 4
     30c:	69 f4       	brne	.+26     	; 0x328 <_fpadd_parts+0x42>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	09 f0       	breq	.+2      	; 0x314 <_fpadd_parts+0x2e>
     312:	2f c1       	rjmp	.+606    	; 0x572 <_fpadd_parts+0x28c>
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x3c>
     320:	28 c1       	rjmp	.+592    	; 0x572 <_fpadd_parts+0x28c>
     322:	a2 e9       	ldi	r26, 0x92	; 146
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	25 c1       	rjmp	.+586    	; 0x572 <_fpadd_parts+0x28c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	09 f4       	brne	.+2      	; 0x32e <_fpadd_parts+0x48>
     32c:	21 c1       	rjmp	.+578    	; 0x570 <_fpadd_parts+0x28a>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	a9 f4       	brne	.+42     	; 0x35c <_fpadd_parts+0x76>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	09 f0       	breq	.+2      	; 0x338 <_fpadd_parts+0x52>
     336:	1d c1       	rjmp	.+570    	; 0x572 <_fpadd_parts+0x28c>
     338:	9a 01       	movw	r18, r20
     33a:	ad 01       	movw	r20, r26
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	ea 01       	movw	r28, r20
     340:	09 90       	ld	r0, Y+
     342:	ae 01       	movw	r20, r28
     344:	e9 01       	movw	r28, r18
     346:	09 92       	st	Y+, r0
     348:	9e 01       	movw	r18, r28
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	c1 f7       	brne	.-16     	; 0x33e <_fpadd_parts+0x58>
     34e:	e2 01       	movw	r28, r4
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 91       	ld	r25, X
     356:	89 23       	and	r24, r25
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	08 c1       	rjmp	.+528    	; 0x56c <_fpadd_parts+0x286>
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <_fpadd_parts+0x7c>
     360:	07 c1       	rjmp	.+526    	; 0x570 <_fpadd_parts+0x28a>
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	2d 90       	ld	r2, X+
     366:	3c 90       	ld	r3, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	eb 01       	movw	r28, r22
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	14 96       	adiw	r26, 0x04	; 4
     372:	ad 90       	ld	r10, X+
     374:	bd 90       	ld	r11, X+
     376:	cd 90       	ld	r12, X+
     378:	dc 90       	ld	r13, X
     37a:	17 97       	sbiw	r26, 0x07	; 7
     37c:	ec 80       	ldd	r14, Y+4	; 0x04
     37e:	fd 80       	ldd	r15, Y+5	; 0x05
     380:	0e 81       	ldd	r16, Y+6	; 0x06
     382:	1f 81       	ldd	r17, Y+7	; 0x07
     384:	91 01       	movw	r18, r2
     386:	28 1b       	sub	r18, r24
     388:	39 0b       	sbc	r19, r25
     38a:	b9 01       	movw	r22, r18
     38c:	37 ff       	sbrs	r19, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0xb2>
     390:	66 27       	eor	r22, r22
     392:	77 27       	eor	r23, r23
     394:	62 1b       	sub	r22, r18
     396:	73 0b       	sbc	r23, r19
     398:	60 32       	cpi	r22, 0x20	; 32
     39a:	71 05       	cpc	r23, r1
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <_fpadd_parts+0xba>
     39e:	61 c0       	rjmp	.+194    	; 0x462 <_fpadd_parts+0x17c>
     3a0:	12 16       	cp	r1, r18
     3a2:	13 06       	cpc	r1, r19
     3a4:	6c f5       	brge	.+90     	; 0x400 <_fpadd_parts+0x11a>
     3a6:	37 01       	movw	r6, r14
     3a8:	48 01       	movw	r8, r16
     3aa:	06 2e       	mov	r0, r22
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xd0>
     3ae:	96 94       	lsr	r9
     3b0:	87 94       	ror	r8
     3b2:	77 94       	ror	r7
     3b4:	67 94       	ror	r6
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xc8>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_fpadd_parts+0xe6>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <_fpadd_parts+0xde>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	30 40       	sbci	r19, 0x00	; 0
     3d4:	40 40       	sbci	r20, 0x00	; 0
     3d6:	50 40       	sbci	r21, 0x00	; 0
     3d8:	2e 21       	and	r18, r14
     3da:	3f 21       	and	r19, r15
     3dc:	40 23       	and	r20, r16
     3de:	51 23       	and	r21, r17
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	41 05       	cpc	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_fpadd_parts+0x10c>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e6 28       	or	r14, r6
     3f8:	f7 28       	or	r15, r7
     3fa:	08 29       	or	r16, r8
     3fc:	19 29       	or	r17, r9
     3fe:	3c c0       	rjmp	.+120    	; 0x478 <_fpadd_parts+0x192>
     400:	23 2b       	or	r18, r19
     402:	d1 f1       	breq	.+116    	; 0x478 <_fpadd_parts+0x192>
     404:	26 0e       	add	r2, r22
     406:	37 1e       	adc	r3, r23
     408:	35 01       	movw	r6, r10
     40a:	46 01       	movw	r8, r12
     40c:	06 2e       	mov	r0, r22
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x132>
     410:	96 94       	lsr	r9
     412:	87 94       	ror	r8
     414:	77 94       	ror	r7
     416:	67 94       	ror	r6
     418:	0a 94       	dec	r0
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x12a>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	04 c0       	rjmp	.+8      	; 0x42e <_fpadd_parts+0x148>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	d2 f7       	brpl	.-12     	; 0x426 <_fpadd_parts+0x140>
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	50 40       	sbci	r21, 0x00	; 0
     43a:	2a 21       	and	r18, r10
     43c:	3b 21       	and	r19, r11
     43e:	4c 21       	and	r20, r12
     440:	5d 21       	and	r21, r13
     442:	21 15       	cp	r18, r1
     444:	31 05       	cpc	r19, r1
     446:	41 05       	cpc	r20, r1
     448:	51 05       	cpc	r21, r1
     44a:	21 f0       	breq	.+8      	; 0x454 <_fpadd_parts+0x16e>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	59 01       	movw	r10, r18
     456:	6a 01       	movw	r12, r20
     458:	a6 28       	or	r10, r6
     45a:	b7 28       	or	r11, r7
     45c:	c8 28       	or	r12, r8
     45e:	d9 28       	or	r13, r9
     460:	0b c0       	rjmp	.+22     	; 0x478 <_fpadd_parts+0x192>
     462:	82 15       	cp	r24, r2
     464:	93 05       	cpc	r25, r3
     466:	2c f0       	brlt	.+10     	; 0x472 <_fpadd_parts+0x18c>
     468:	1c 01       	movw	r2, r24
     46a:	aa 24       	eor	r10, r10
     46c:	bb 24       	eor	r11, r11
     46e:	65 01       	movw	r12, r10
     470:	03 c0       	rjmp	.+6      	; 0x478 <_fpadd_parts+0x192>
     472:	ee 24       	eor	r14, r14
     474:	ff 24       	eor	r15, r15
     476:	87 01       	movw	r16, r14
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 91       	ld	r25, X
     47c:	d2 01       	movw	r26, r4
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <_fpadd_parts+0x1a2>
     486:	45 c0       	rjmp	.+138    	; 0x512 <_fpadd_parts+0x22c>
     488:	99 23       	and	r25, r25
     48a:	39 f0       	breq	.+14     	; 0x49a <_fpadd_parts+0x1b4>
     48c:	a8 01       	movw	r20, r16
     48e:	97 01       	movw	r18, r14
     490:	2a 19       	sub	r18, r10
     492:	3b 09       	sbc	r19, r11
     494:	4c 09       	sbc	r20, r12
     496:	5d 09       	sbc	r21, r13
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <_fpadd_parts+0x1c0>
     49a:	a6 01       	movw	r20, r12
     49c:	95 01       	movw	r18, r10
     49e:	2e 19       	sub	r18, r14
     4a0:	3f 09       	sbc	r19, r15
     4a2:	40 0b       	sbc	r20, r16
     4a4:	51 0b       	sbc	r21, r17
     4a6:	57 fd       	sbrc	r21, 7
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <_fpadd_parts+0x1d4>
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	33 82       	std	Z+3, r3	; 0x03
     4ae:	22 82       	std	Z+2, r2	; 0x02
     4b0:	24 83       	std	Z+4, r18	; 0x04
     4b2:	35 83       	std	Z+5, r19	; 0x05
     4b4:	46 83       	std	Z+6, r20	; 0x06
     4b6:	57 83       	std	Z+7, r21	; 0x07
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <_fpadd_parts+0x20e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	33 82       	std	Z+3, r3	; 0x03
     4c0:	22 82       	std	Z+2, r2	; 0x02
     4c2:	88 27       	eor	r24, r24
     4c4:	99 27       	eor	r25, r25
     4c6:	dc 01       	movw	r26, r24
     4c8:	82 1b       	sub	r24, r18
     4ca:	93 0b       	sbc	r25, r19
     4cc:	a4 0b       	sbc	r26, r20
     4ce:	b5 0b       	sbc	r27, r21
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	a6 83       	std	Z+6, r26	; 0x06
     4d6:	b7 83       	std	Z+7, r27	; 0x07
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <_fpadd_parts+0x20e>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	24 83       	std	Z+4, r18	; 0x04
     4e4:	35 83       	std	Z+5, r19	; 0x05
     4e6:	46 83       	std	Z+6, r20	; 0x06
     4e8:	57 83       	std	Z+7, r21	; 0x07
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	35 81       	ldd	r19, Z+5	; 0x05
     4f8:	46 81       	ldd	r20, Z+6	; 0x06
     4fa:	57 81       	ldd	r21, Z+7	; 0x07
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 09       	sbc	r26, r1
     504:	b1 09       	sbc	r27, r1
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 43       	sbci	r27, 0x3F	; 63
     50e:	28 f3       	brcs	.-54     	; 0x4da <_fpadd_parts+0x1f4>
     510:	0b c0       	rjmp	.+22     	; 0x528 <_fpadd_parts+0x242>
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	33 82       	std	Z+3, r3	; 0x03
     516:	22 82       	std	Z+2, r2	; 0x02
     518:	ea 0c       	add	r14, r10
     51a:	fb 1c       	adc	r15, r11
     51c:	0c 1d       	adc	r16, r12
     51e:	1d 1d       	adc	r17, r13
     520:	e4 82       	std	Z+4, r14	; 0x04
     522:	f5 82       	std	Z+5, r15	; 0x05
     524:	06 83       	std	Z+6, r16	; 0x06
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 83       	st	Z, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	46 81       	ldd	r20, Z+6	; 0x06
     532:	57 81       	ldd	r21, Z+7	; 0x07
     534:	57 ff       	sbrs	r21, 7
     536:	1a c0       	rjmp	.+52     	; 0x56c <_fpadd_parts+0x286>
     538:	c9 01       	movw	r24, r18
     53a:	aa 27       	eor	r26, r26
     53c:	97 fd       	sbrc	r25, 7
     53e:	a0 95       	com	r26
     540:	ba 2f       	mov	r27, r26
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
     546:	a0 70       	andi	r26, 0x00	; 0
     548:	b0 70       	andi	r27, 0x00	; 0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	37 95       	ror	r19
     550:	27 95       	ror	r18
     552:	82 2b       	or	r24, r18
     554:	93 2b       	or	r25, r19
     556:	a4 2b       	or	r26, r20
     558:	b5 2b       	or	r27, r21
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	95 83       	std	Z+5, r25	; 0x05
     55e:	a6 83       	std	Z+6, r26	; 0x06
     560:	b7 83       	std	Z+7, r27	; 0x07
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	93 81       	ldd	r25, Z+3	; 0x03
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	df 01       	movw	r26, r30
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_fpadd_parts+0x28c>
     570:	d2 01       	movw	r26, r4
     572:	cd 01       	movw	r24, r26
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	e2 e1       	ldi	r30, 0x12	; 18
     57a:	0c 94 24 29 	jmp	0x5248	; 0x5248 <__epilogue_restores__>

0000057e <__subsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__prologue_saves__+0x18>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	e9 e0       	ldi	r30, 0x09	; 9
     59c:	ee 2e       	mov	r14, r30
     59e:	f1 2c       	mov	r15, r1
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5e       	subi	r16, 0xEF	; 239
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	05 96       	adiw	r24, 0x05	; 5
     5b8:	b8 01       	movw	r22, r16
     5ba:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     5be:	8a 89       	ldd	r24, Y+18	; 0x12
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	ae 01       	movw	r20, r28
     5cc:	47 5e       	subi	r20, 0xE7	; 231
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     5d4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     5d8:	a0 96       	adiw	r28, 0x20	; 32
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__epilogue_restores__+0x18>

000005e0 <__addsf3>:
     5e0:	a0 e2       	ldi	r26, 0x20	; 32
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e6 ef       	ldi	r30, 0xF6	; 246
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__prologue_saves__+0x18>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	4f 83       	std	Y+7, r20	; 0x07
     5fa:	58 87       	std	Y+8, r21	; 0x08
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	ef 2e       	mov	r14, r31
     600:	f1 2c       	mov	r15, r1
     602:	ec 0e       	add	r14, r28
     604:	fd 1e       	adc	r15, r29
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     610:	8e 01       	movw	r16, r28
     612:	0f 5e       	subi	r16, 0xEF	; 239
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	05 96       	adiw	r24, 0x05	; 5
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     620:	c7 01       	movw	r24, r14
     622:	b8 01       	movw	r22, r16
     624:	ae 01       	movw	r20, r28
     626:	47 5e       	subi	r20, 0xE7	; 231
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     62e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     632:	a0 96       	adiw	r28, 0x20	; 32
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__epilogue_restores__+0x18>

0000063a <__mulsf3>:
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__prologue_saves__>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	be 01       	movw	r22, r28
     66a:	6f 5e       	subi	r22, 0xEF	; 239
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	88 f0       	brcs	.+34     	; 0x69a <__mulsf3+0x60>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	c8 f0       	brcs	.+50     	; 0x6b0 <__mulsf3+0x76>
     67e:	94 30       	cpi	r25, 0x04	; 4
     680:	19 f4       	brne	.+6      	; 0x688 <__mulsf3+0x4e>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	51 f4       	brne	.+20     	; 0x69a <__mulsf3+0x60>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__mulsf3+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	29 f4       	brne	.+10     	; 0x696 <__mulsf3+0x5c>
     68c:	92 30       	cpi	r25, 0x02	; 2
     68e:	81 f4       	brne	.+32     	; 0x6b0 <__mulsf3+0x76>
     690:	82 e9       	ldi	r24, 0x92	; 146
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c6 c0       	rjmp	.+396    	; 0x822 <__mulsf3+0x1e8>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x72>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 87       	std	Y+10, r18	; 0x0a
     6a6:	ce 01       	movw	r24, r28
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	bb c0       	rjmp	.+374    	; 0x822 <__mulsf3+0x1e8>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	49 f4       	brne	.+18     	; 0x6c2 <__mulsf3+0x88>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	8a 89       	ldd	r24, Y+18	; 0x12
     6b6:	98 13       	cpse	r25, r24
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	2a 8b       	std	Y+18, r18	; 0x12
     6bc:	ce 01       	movw	r24, r28
     6be:	41 96       	adiw	r24, 0x11	; 17
     6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__mulsf3+0x1e8>
     6c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c8:	58 88       	ldd	r5, Y+16	; 0x10
     6ca:	6d 88       	ldd	r6, Y+21	; 0x15
     6cc:	7e 88       	ldd	r7, Y+22	; 0x16
     6ce:	8f 88       	ldd	r8, Y+23	; 0x17
     6d0:	98 8c       	ldd	r9, Y+24	; 0x18
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	87 01       	movw	r16, r14
     6d8:	aa 24       	eor	r10, r10
     6da:	bb 24       	eor	r11, r11
     6dc:	65 01       	movw	r12, r10
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	c1 01       	movw	r24, r2
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	89 2b       	or	r24, r25
     6f2:	e9 f0       	breq	.+58     	; 0x72e <__mulsf3+0xf4>
     6f4:	e6 0c       	add	r14, r6
     6f6:	f7 1c       	adc	r15, r7
     6f8:	08 1d       	adc	r16, r8
     6fa:	19 1d       	adc	r17, r9
     6fc:	9a 01       	movw	r18, r20
     6fe:	ab 01       	movw	r20, r22
     700:	2a 0d       	add	r18, r10
     702:	3b 1d       	adc	r19, r11
     704:	4c 1d       	adc	r20, r12
     706:	5d 1d       	adc	r21, r13
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e6 14       	cp	r14, r6
     712:	f7 04       	cpc	r15, r7
     714:	08 05       	cpc	r16, r8
     716:	19 05       	cpc	r17, r9
     718:	20 f4       	brcc	.+8      	; 0x722 <__mulsf3+0xe8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	48 0f       	add	r20, r24
     728:	59 1f       	adc	r21, r25
     72a:	6a 1f       	adc	r22, r26
     72c:	7b 1f       	adc	r23, r27
     72e:	aa 0c       	add	r10, r10
     730:	bb 1c       	adc	r11, r11
     732:	cc 1c       	adc	r12, r12
     734:	dd 1c       	adc	r13, r13
     736:	97 fe       	sbrs	r9, 7
     738:	08 c0       	rjmp	.+16     	; 0x74a <__mulsf3+0x110>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a8 2a       	or	r10, r24
     744:	b9 2a       	or	r11, r25
     746:	ca 2a       	or	r12, r26
     748:	db 2a       	or	r13, r27
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	e0 32       	cpi	r30, 0x20	; 32
     74e:	f1 05       	cpc	r31, r1
     750:	49 f0       	breq	.+18     	; 0x764 <__mulsf3+0x12a>
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	88 1c       	adc	r8, r8
     758:	99 1c       	adc	r9, r9
     75a:	56 94       	lsr	r5
     75c:	47 94       	ror	r4
     75e:	37 94       	ror	r3
     760:	27 94       	ror	r2
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <__mulsf3+0xb0>
     764:	fa 85       	ldd	r31, Y+10	; 0x0a
     766:	ea 89       	ldd	r30, Y+18	; 0x12
     768:	2b 89       	ldd	r18, Y+19	; 0x13
     76a:	3c 89       	ldd	r19, Y+20	; 0x14
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	2e 5f       	subi	r18, 0xFE	; 254
     776:	3f 4f       	sbci	r19, 0xFF	; 255
     778:	17 c0       	rjmp	.+46     	; 0x7a8 <__mulsf3+0x16e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	61 f0       	breq	.+24     	; 0x79c <__mulsf3+0x162>
     784:	16 95       	lsr	r17
     786:	07 95       	ror	r16
     788:	f7 94       	ror	r15
     78a:	e7 94       	ror	r14
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e8       	ldi	r27, 0x80	; 128
     794:	e8 2a       	or	r14, r24
     796:	f9 2a       	or	r15, r25
     798:	0a 2b       	or	r16, r26
     79a:	1b 2b       	or	r17, r27
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <__mulsf3+0x140>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <__mulsf3+0x18c>
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	66 1f       	adc	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	17 fd       	sbrc	r17, 7
     7b8:	41 60       	ori	r20, 0x01	; 1
     7ba:	ee 0c       	add	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	00 1f       	adc	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 30       	cpi	r20, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	59 07       	cpc	r21, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	69 07       	cpc	r22, r25
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	79 07       	cpc	r23, r25
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <__mulsf3+0x174>
     7d6:	2b 8f       	std	Y+27, r18	; 0x1b
     7d8:	3c 8f       	std	Y+28, r19	; 0x1c
     7da:	db 01       	movw	r26, r22
     7dc:	ca 01       	movw	r24, r20
     7de:	8f 77       	andi	r24, 0x7F	; 127
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	a0 70       	andi	r26, 0x00	; 0
     7e4:	b0 70       	andi	r27, 0x00	; 0
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	61 f4       	brne	.+24     	; 0x808 <__mulsf3+0x1ce>
     7f0:	47 fd       	sbrc	r20, 7
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__mulsf3+0x1ce>
     7f4:	e1 14       	cp	r14, r1
     7f6:	f1 04       	cpc	r15, r1
     7f8:	01 05       	cpc	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	29 f0       	breq	.+10     	; 0x808 <__mulsf3+0x1ce>
     7fe:	40 5c       	subi	r20, 0xC0	; 192
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	6f 4f       	sbci	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	40 78       	andi	r20, 0x80	; 128
     808:	1a 8e       	std	Y+26, r1	; 0x1a
     80a:	fe 17       	cp	r31, r30
     80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1d8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	4d 8f       	std	Y+29, r20	; 0x1d
     814:	5e 8f       	std	Y+30, r21	; 0x1e
     816:	6f 8f       	std	Y+31, r22	; 0x1f
     818:	78 a3       	std	Y+32, r23	; 0x20
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 8f       	std	Y+25, r24	; 0x19
     81e:	ce 01       	movw	r24, r28
     820:	49 96       	adiw	r24, 0x19	; 25
     822:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	0c 94 24 29 	jmp	0x5248	; 0x5248 <__epilogue_restores__>

0000082e <__divsf3>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 10 29 	jmp	0x5220	; 0x5220 <__prologue_saves__+0x10>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	b9 e0       	ldi	r27, 0x09	; 9
     84c:	eb 2e       	mov	r14, r27
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     86e:	29 85       	ldd	r18, Y+9	; 0x09
     870:	22 30       	cpi	r18, 0x02	; 2
     872:	08 f4       	brcc	.+2      	; 0x876 <__stack+0x17>
     874:	7e c0       	rjmp	.+252    	; 0x972 <__stack+0x113>
     876:	39 89       	ldd	r19, Y+17	; 0x11
     878:	32 30       	cpi	r19, 0x02	; 2
     87a:	10 f4       	brcc	.+4      	; 0x880 <__stack+0x21>
     87c:	b8 01       	movw	r22, r16
     87e:	7c c0       	rjmp	.+248    	; 0x978 <__stack+0x119>
     880:	8a 85       	ldd	r24, Y+10	; 0x0a
     882:	9a 89       	ldd	r25, Y+18	; 0x12
     884:	89 27       	eor	r24, r25
     886:	8a 87       	std	Y+10, r24	; 0x0a
     888:	24 30       	cpi	r18, 0x04	; 4
     88a:	11 f0       	breq	.+4      	; 0x890 <__stack+0x31>
     88c:	22 30       	cpi	r18, 0x02	; 2
     88e:	31 f4       	brne	.+12     	; 0x89c <__stack+0x3d>
     890:	23 17       	cp	r18, r19
     892:	09 f0       	breq	.+2      	; 0x896 <__stack+0x37>
     894:	6e c0       	rjmp	.+220    	; 0x972 <__stack+0x113>
     896:	62 e9       	ldi	r22, 0x92	; 146
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	6e c0       	rjmp	.+220    	; 0x978 <__stack+0x119>
     89c:	34 30       	cpi	r19, 0x04	; 4
     89e:	39 f4       	brne	.+14     	; 0x8ae <__stack+0x4f>
     8a0:	1d 86       	std	Y+13, r1	; 0x0d
     8a2:	1e 86       	std	Y+14, r1	; 0x0e
     8a4:	1f 86       	std	Y+15, r1	; 0x0f
     8a6:	18 8a       	std	Y+16, r1	; 0x10
     8a8:	1c 86       	std	Y+12, r1	; 0x0c
     8aa:	1b 86       	std	Y+11, r1	; 0x0b
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	32 30       	cpi	r19, 0x02	; 2
     8b0:	21 f4       	brne	.+8      	; 0x8ba <__stack+0x5b>
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	89 87       	std	Y+9, r24	; 0x09
     8b6:	b7 01       	movw	r22, r14
     8b8:	5f c0       	rjmp	.+190    	; 0x978 <__stack+0x119>
     8ba:	2b 85       	ldd	r18, Y+11	; 0x0b
     8bc:	3c 85       	ldd	r19, Y+12	; 0x0c
     8be:	8b 89       	ldd	r24, Y+19	; 0x13
     8c0:	9c 89       	ldd	r25, Y+20	; 0x14
     8c2:	28 1b       	sub	r18, r24
     8c4:	39 0b       	sbc	r19, r25
     8c6:	3c 87       	std	Y+12, r19	; 0x0c
     8c8:	2b 87       	std	Y+11, r18	; 0x0b
     8ca:	ed 84       	ldd	r14, Y+13	; 0x0d
     8cc:	fe 84       	ldd	r15, Y+14	; 0x0e
     8ce:	0f 85       	ldd	r16, Y+15	; 0x0f
     8d0:	18 89       	ldd	r17, Y+16	; 0x10
     8d2:	ad 88       	ldd	r10, Y+21	; 0x15
     8d4:	be 88       	ldd	r11, Y+22	; 0x16
     8d6:	cf 88       	ldd	r12, Y+23	; 0x17
     8d8:	d8 8c       	ldd	r13, Y+24	; 0x18
     8da:	ea 14       	cp	r14, r10
     8dc:	fb 04       	cpc	r15, r11
     8de:	0c 05       	cpc	r16, r12
     8e0:	1d 05       	cpc	r17, r13
     8e2:	40 f4       	brcc	.+16     	; 0x8f4 <__stack+0x95>
     8e4:	ee 0c       	add	r14, r14
     8e6:	ff 1c       	adc	r15, r15
     8e8:	00 1f       	adc	r16, r16
     8ea:	11 1f       	adc	r17, r17
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	30 40       	sbci	r19, 0x00	; 0
     8f0:	3c 87       	std	Y+12, r19	; 0x0c
     8f2:	2b 87       	std	Y+11, r18	; 0x0b
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	ea 14       	cp	r14, r10
     90a:	fb 04       	cpc	r15, r11
     90c:	0c 05       	cpc	r16, r12
     90e:	1d 05       	cpc	r17, r13
     910:	40 f0       	brcs	.+16     	; 0x922 <__stack+0xc3>
     912:	28 2b       	or	r18, r24
     914:	39 2b       	or	r19, r25
     916:	4a 2b       	or	r20, r26
     918:	5b 2b       	or	r21, r27
     91a:	ea 18       	sub	r14, r10
     91c:	fb 08       	sbc	r15, r11
     91e:	0c 09       	sbc	r16, r12
     920:	1d 09       	sbc	r17, r13
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	ee 0c       	add	r14, r14
     92c:	ff 1c       	adc	r15, r15
     92e:	00 1f       	adc	r16, r16
     930:	11 1f       	adc	r17, r17
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	6f 31       	cpi	r22, 0x1F	; 31
     938:	71 05       	cpc	r23, r1
     93a:	31 f7       	brne	.-52     	; 0x908 <__stack+0xa9>
     93c:	da 01       	movw	r26, r20
     93e:	c9 01       	movw	r24, r18
     940:	8f 77       	andi	r24, 0x7F	; 127
     942:	90 70       	andi	r25, 0x00	; 0
     944:	a0 70       	andi	r26, 0x00	; 0
     946:	b0 70       	andi	r27, 0x00	; 0
     948:	80 34       	cpi	r24, 0x40	; 64
     94a:	91 05       	cpc	r25, r1
     94c:	a1 05       	cpc	r26, r1
     94e:	b1 05       	cpc	r27, r1
     950:	61 f4       	brne	.+24     	; 0x96a <__stack+0x10b>
     952:	27 fd       	sbrc	r18, 7
     954:	0a c0       	rjmp	.+20     	; 0x96a <__stack+0x10b>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	01 05       	cpc	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	29 f0       	breq	.+10     	; 0x96a <__stack+0x10b>
     960:	20 5c       	subi	r18, 0xC0	; 192
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	4f 4f       	sbci	r20, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	20 78       	andi	r18, 0x80	; 128
     96a:	2d 87       	std	Y+13, r18	; 0x0d
     96c:	3e 87       	std	Y+14, r19	; 0x0e
     96e:	4f 87       	std	Y+15, r20	; 0x0f
     970:	58 8b       	std	Y+16, r21	; 0x10
     972:	be 01       	movw	r22, r28
     974:	67 5f       	subi	r22, 0xF7	; 247
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	cb 01       	movw	r24, r22
     97a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     97e:	68 96       	adiw	r28, 0x18	; 24
     980:	ea e0       	ldi	r30, 0x0A	; 10
     982:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__epilogue_restores__+0x10>

00000986 <__gtsf2>:
     986:	a8 e1       	ldi	r26, 0x18	; 24
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e9 ec       	ldi	r30, 0xC9	; 201
     98c:	f4 e0       	ldi	r31, 0x04	; 4
     98e:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__prologue_saves__+0x18>
     992:	69 83       	std	Y+1, r22	; 0x01
     994:	7a 83       	std	Y+2, r23	; 0x02
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	2d 83       	std	Y+5, r18	; 0x05
     99c:	3e 83       	std	Y+6, r19	; 0x06
     99e:	4f 83       	std	Y+7, r20	; 0x07
     9a0:	58 87       	std	Y+8, r21	; 0x08
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	e8 2e       	mov	r14, r24
     9a6:	f1 2c       	mov	r15, r1
     9a8:	ec 0e       	add	r14, r28
     9aa:	fd 1e       	adc	r15, r29
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     9b6:	8e 01       	movw	r16, r28
     9b8:	0f 5e       	subi	r16, 0xEF	; 239
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	ce 01       	movw	r24, r28
     9be:	05 96       	adiw	r24, 0x05	; 5
     9c0:	b8 01       	movw	r22, r16
     9c2:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     9c6:	89 85       	ldd	r24, Y+9	; 0x09
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__gtsf2+0x56>
     9cc:	89 89       	ldd	r24, Y+17	; 0x11
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <__gtsf2+0x56>
     9d2:	c7 01       	movw	r24, r14
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fpcmp_parts_f>
     9da:	01 c0       	rjmp	.+2      	; 0x9de <__gtsf2+0x58>
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	68 96       	adiw	r28, 0x18	; 24
     9e0:	e6 e0       	ldi	r30, 0x06	; 6
     9e2:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__epilogue_restores__+0x18>

000009e6 <__gesf2>:
     9e6:	a8 e1       	ldi	r26, 0x18	; 24
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e9 ef       	ldi	r30, 0xF9	; 249
     9ec:	f4 e0       	ldi	r31, 0x04	; 4
     9ee:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__prologue_saves__+0x18>
     9f2:	69 83       	std	Y+1, r22	; 0x01
     9f4:	7a 83       	std	Y+2, r23	; 0x02
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	2d 83       	std	Y+5, r18	; 0x05
     9fc:	3e 83       	std	Y+6, r19	; 0x06
     9fe:	4f 83       	std	Y+7, r20	; 0x07
     a00:	58 87       	std	Y+8, r21	; 0x08
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	e8 2e       	mov	r14, r24
     a06:	f1 2c       	mov	r15, r1
     a08:	ec 0e       	add	r14, r28
     a0a:	fd 1e       	adc	r15, r29
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     a16:	8e 01       	movw	r16, r28
     a18:	0f 5e       	subi	r16, 0xEF	; 239
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	05 96       	adiw	r24, 0x05	; 5
     a20:	b8 01       	movw	r22, r16
     a22:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     a26:	89 85       	ldd	r24, Y+9	; 0x09
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	40 f0       	brcs	.+16     	; 0xa3c <__gesf2+0x56>
     a2c:	89 89       	ldd	r24, Y+17	; 0x11
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	28 f0       	brcs	.+10     	; 0xa3c <__gesf2+0x56>
     a32:	c7 01       	movw	r24, r14
     a34:	b8 01       	movw	r22, r16
     a36:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fpcmp_parts_f>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__gesf2+0x58>
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	68 96       	adiw	r28, 0x18	; 24
     a40:	e6 e0       	ldi	r30, 0x06	; 6
     a42:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__epilogue_restores__+0x18>

00000a46 <__ltsf2>:
     a46:	a8 e1       	ldi	r26, 0x18	; 24
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__prologue_saves__+0x18>
     a52:	69 83       	std	Y+1, r22	; 0x01
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	8b 83       	std	Y+3, r24	; 0x03
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	2d 83       	std	Y+5, r18	; 0x05
     a5c:	3e 83       	std	Y+6, r19	; 0x06
     a5e:	4f 83       	std	Y+7, r20	; 0x07
     a60:	58 87       	std	Y+8, r21	; 0x08
     a62:	89 e0       	ldi	r24, 0x09	; 9
     a64:	e8 2e       	mov	r14, r24
     a66:	f1 2c       	mov	r15, r1
     a68:	ec 0e       	add	r14, r28
     a6a:	fd 1e       	adc	r15, r29
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     a76:	8e 01       	movw	r16, r28
     a78:	0f 5e       	subi	r16, 0xEF	; 239
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	05 96       	adiw	r24, 0x05	; 5
     a80:	b8 01       	movw	r22, r16
     a82:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     a86:	89 85       	ldd	r24, Y+9	; 0x09
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	40 f0       	brcs	.+16     	; 0xa9c <__ltsf2+0x56>
     a8c:	89 89       	ldd	r24, Y+17	; 0x11
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__ltsf2+0x56>
     a92:	c7 01       	movw	r24, r14
     a94:	b8 01       	movw	r22, r16
     a96:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fpcmp_parts_f>
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <__ltsf2+0x58>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	68 96       	adiw	r28, 0x18	; 24
     aa0:	e6 e0       	ldi	r30, 0x06	; 6
     aa2:	0c 94 30 29 	jmp	0x5260	; 0x5260 <__epilogue_restores__+0x18>

00000aa6 <__floatsisf>:
     aa6:	a8 e0       	ldi	r26, 0x08	; 8
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e9 e5       	ldi	r30, 0x59	; 89
     aac:	f5 e0       	ldi	r31, 0x05	; 5
     aae:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__prologue_saves__+0x12>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	da 01       	movw	r26, r20
     abc:	c9 01       	movw	r24, r18
     abe:	88 27       	eor	r24, r24
     ac0:	b7 fd       	sbrc	r27, 7
     ac2:	83 95       	inc	r24
     ac4:	99 27       	eor	r25, r25
     ac6:	aa 27       	eor	r26, r26
     ac8:	bb 27       	eor	r27, r27
     aca:	b8 2e       	mov	r11, r24
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	41 05       	cpc	r20, r1
     ad2:	51 05       	cpc	r21, r1
     ad4:	19 f4       	brne	.+6      	; 0xadc <__floatsisf+0x36>
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	3a c0       	rjmp	.+116    	; 0xb50 <__floatsisf+0xaa>
     adc:	88 23       	and	r24, r24
     ade:	a9 f0       	breq	.+42     	; 0xb0a <__floatsisf+0x64>
     ae0:	20 30       	cpi	r18, 0x00	; 0
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	38 07       	cpc	r19, r24
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	48 07       	cpc	r20, r24
     aea:	80 e8       	ldi	r24, 0x80	; 128
     aec:	58 07       	cpc	r21, r24
     aee:	29 f4       	brne	.+10     	; 0xafa <__floatsisf+0x54>
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	9f ec       	ldi	r25, 0xCF	; 207
     af8:	30 c0       	rjmp	.+96     	; 0xb5a <__floatsisf+0xb4>
     afa:	ee 24       	eor	r14, r14
     afc:	ff 24       	eor	r15, r15
     afe:	87 01       	movw	r16, r14
     b00:	e2 1a       	sub	r14, r18
     b02:	f3 0a       	sbc	r15, r19
     b04:	04 0b       	sbc	r16, r20
     b06:	15 0b       	sbc	r17, r21
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <__floatsisf+0x68>
     b0a:	79 01       	movw	r14, r18
     b0c:	8a 01       	movw	r16, r20
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	c8 2e       	mov	r12, r24
     b12:	d1 2c       	mov	r13, r1
     b14:	dc 82       	std	Y+4, r13	; 0x04
     b16:	cb 82       	std	Y+3, r12	; 0x03
     b18:	ed 82       	std	Y+5, r14	; 0x05
     b1a:	fe 82       	std	Y+6, r15	; 0x06
     b1c:	0f 83       	std	Y+7, r16	; 0x07
     b1e:	18 87       	std	Y+8, r17	; 0x08
     b20:	c8 01       	movw	r24, r16
     b22:	b7 01       	movw	r22, r14
     b24:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__clzsi2>
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	18 16       	cp	r1, r24
     b2c:	19 06       	cpc	r1, r25
     b2e:	84 f4       	brge	.+32     	; 0xb50 <__floatsisf+0xaa>
     b30:	08 2e       	mov	r0, r24
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__floatsisf+0x96>
     b34:	ee 0c       	add	r14, r14
     b36:	ff 1c       	adc	r15, r15
     b38:	00 1f       	adc	r16, r16
     b3a:	11 1f       	adc	r17, r17
     b3c:	0a 94       	dec	r0
     b3e:	d2 f7       	brpl	.-12     	; 0xb34 <__floatsisf+0x8e>
     b40:	ed 82       	std	Y+5, r14	; 0x05
     b42:	fe 82       	std	Y+6, r15	; 0x06
     b44:	0f 83       	std	Y+7, r16	; 0x07
     b46:	18 87       	std	Y+8, r17	; 0x08
     b48:	c8 1a       	sub	r12, r24
     b4a:	d9 0a       	sbc	r13, r25
     b4c:	dc 82       	std	Y+4, r13	; 0x04
     b4e:	cb 82       	std	Y+3, r12	; 0x03
     b50:	ba 82       	std	Y+2, r11	; 0x02
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     b5a:	28 96       	adiw	r28, 0x08	; 8
     b5c:	e9 e0       	ldi	r30, 0x09	; 9
     b5e:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__epilogue_restores__+0x12>

00000b62 <__fixsfsi>:
     b62:	ac e0       	ldi	r26, 0x0C	; 12
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e7 eb       	ldi	r30, 0xB7	; 183
     b68:	f5 e0       	ldi	r31, 0x05	; 5
     b6a:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__prologue_saves__+0x20>
     b6e:	69 83       	std	Y+1, r22	; 0x01
     b70:	7a 83       	std	Y+2, r23	; 0x02
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	be 01       	movw	r22, r28
     b7c:	6b 5f       	subi	r22, 0xFB	; 251
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	61 f1       	breq	.+88     	; 0xbe2 <__fixsfsi+0x80>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	50 f1       	brcs	.+84     	; 0xbe2 <__fixsfsi+0x80>
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	21 f4       	brne	.+8      	; 0xb9a <__fixsfsi+0x38>
     b92:	8e 81       	ldd	r24, Y+6	; 0x06
     b94:	88 23       	and	r24, r24
     b96:	51 f1       	breq	.+84     	; 0xbec <__fixsfsi+0x8a>
     b98:	2e c0       	rjmp	.+92     	; 0xbf6 <__fixsfsi+0x94>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	37 fd       	sbrc	r19, 7
     ba0:	20 c0       	rjmp	.+64     	; 0xbe2 <__fixsfsi+0x80>
     ba2:	6e 81       	ldd	r22, Y+6	; 0x06
     ba4:	2f 31       	cpi	r18, 0x1F	; 31
     ba6:	31 05       	cpc	r19, r1
     ba8:	1c f0       	brlt	.+6      	; 0xbb0 <__fixsfsi+0x4e>
     baa:	66 23       	and	r22, r22
     bac:	f9 f0       	breq	.+62     	; 0xbec <__fixsfsi+0x8a>
     bae:	23 c0       	rjmp	.+70     	; 0xbf6 <__fixsfsi+0x94>
     bb0:	8e e1       	ldi	r24, 0x1E	; 30
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	82 1b       	sub	r24, r18
     bb6:	93 0b       	sbc	r25, r19
     bb8:	29 85       	ldd	r18, Y+9	; 0x09
     bba:	3a 85       	ldd	r19, Y+10	; 0x0a
     bbc:	4b 85       	ldd	r20, Y+11	; 0x0b
     bbe:	5c 85       	ldd	r21, Y+12	; 0x0c
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__fixsfsi+0x68>
     bc2:	56 95       	lsr	r21
     bc4:	47 95       	ror	r20
     bc6:	37 95       	ror	r19
     bc8:	27 95       	ror	r18
     bca:	8a 95       	dec	r24
     bcc:	d2 f7       	brpl	.-12     	; 0xbc2 <__fixsfsi+0x60>
     bce:	66 23       	and	r22, r22
     bd0:	b1 f0       	breq	.+44     	; 0xbfe <__fixsfsi+0x9c>
     bd2:	50 95       	com	r21
     bd4:	40 95       	com	r20
     bd6:	30 95       	com	r19
     bd8:	21 95       	neg	r18
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	4f 4f       	sbci	r20, 0xFF	; 255
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <__fixsfsi+0x9c>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <__fixsfsi+0x9c>
     bec:	2f ef       	ldi	r18, 0xFF	; 255
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f ef       	ldi	r20, 0xFF	; 255
     bf2:	5f e7       	ldi	r21, 0x7F	; 127
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <__fixsfsi+0x9c>
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e8       	ldi	r21, 0x80	; 128
     bfe:	b9 01       	movw	r22, r18
     c00:	ca 01       	movw	r24, r20
     c02:	2c 96       	adiw	r28, 0x0c	; 12
     c04:	e2 e0       	ldi	r30, 0x02	; 2
     c06:	0c 94 34 29 	jmp	0x5268	; 0x5268 <__epilogue_restores__+0x20>

00000c0a <__floatunsisf>:
     c0a:	a8 e0       	ldi	r26, 0x08	; 8
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	eb e0       	ldi	r30, 0x0B	; 11
     c10:	f6 e0       	ldi	r31, 0x06	; 6
     c12:	0c 94 10 29 	jmp	0x5220	; 0x5220 <__prologue_saves__+0x10>
     c16:	7b 01       	movw	r14, r22
     c18:	8c 01       	movw	r16, r24
     c1a:	61 15       	cp	r22, r1
     c1c:	71 05       	cpc	r23, r1
     c1e:	81 05       	cpc	r24, r1
     c20:	91 05       	cpc	r25, r1
     c22:	19 f4       	brne	.+6      	; 0xc2a <__floatunsisf+0x20>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	60 c0       	rjmp	.+192    	; 0xcea <__floatunsisf+0xe0>
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	8e e1       	ldi	r24, 0x1E	; 30
     c30:	c8 2e       	mov	r12, r24
     c32:	d1 2c       	mov	r13, r1
     c34:	dc 82       	std	Y+4, r13	; 0x04
     c36:	cb 82       	std	Y+3, r12	; 0x03
     c38:	ed 82       	std	Y+5, r14	; 0x05
     c3a:	fe 82       	std	Y+6, r15	; 0x06
     c3c:	0f 83       	std	Y+7, r16	; 0x07
     c3e:	18 87       	std	Y+8, r17	; 0x08
     c40:	c8 01       	movw	r24, r16
     c42:	b7 01       	movw	r22, r14
     c44:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__clzsi2>
     c48:	fc 01       	movw	r30, r24
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	f7 ff       	sbrs	r31, 7
     c4e:	3b c0       	rjmp	.+118    	; 0xcc6 <__floatunsisf+0xbc>
     c50:	22 27       	eor	r18, r18
     c52:	33 27       	eor	r19, r19
     c54:	2e 1b       	sub	r18, r30
     c56:	3f 0b       	sbc	r19, r31
     c58:	57 01       	movw	r10, r14
     c5a:	68 01       	movw	r12, r16
     c5c:	02 2e       	mov	r0, r18
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <__floatunsisf+0x5e>
     c60:	d6 94       	lsr	r13
     c62:	c7 94       	ror	r12
     c64:	b7 94       	ror	r11
     c66:	a7 94       	ror	r10
     c68:	0a 94       	dec	r0
     c6a:	d2 f7       	brpl	.-12     	; 0xc60 <__floatunsisf+0x56>
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__floatunsisf+0x7c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	2a 95       	dec	r18
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__floatunsisf+0x74>
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	a1 09       	sbc	r26, r1
     c8e:	b1 09       	sbc	r27, r1
     c90:	8e 21       	and	r24, r14
     c92:	9f 21       	and	r25, r15
     c94:	a0 23       	and	r26, r16
     c96:	b1 23       	and	r27, r17
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	a1 05       	cpc	r26, r1
     c9c:	b1 05       	cpc	r27, r1
     c9e:	21 f0       	breq	.+8      	; 0xca8 <__floatunsisf+0x9e>
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	4a 29       	or	r20, r10
     caa:	5b 29       	or	r21, r11
     cac:	6c 29       	or	r22, r12
     cae:	7d 29       	or	r23, r13
     cb0:	4d 83       	std	Y+5, r20	; 0x05
     cb2:	5e 83       	std	Y+6, r21	; 0x06
     cb4:	6f 83       	std	Y+7, r22	; 0x07
     cb6:	78 87       	std	Y+8, r23	; 0x08
     cb8:	8e e1       	ldi	r24, 0x1E	; 30
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	8e 1b       	sub	r24, r30
     cbe:	9f 0b       	sbc	r25, r31
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
     cc4:	12 c0       	rjmp	.+36     	; 0xcea <__floatunsisf+0xe0>
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	81 f0       	breq	.+32     	; 0xcea <__floatunsisf+0xe0>
     cca:	0e 2e       	mov	r0, r30
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <__floatunsisf+0xcc>
     cce:	ee 0c       	add	r14, r14
     cd0:	ff 1c       	adc	r15, r15
     cd2:	00 1f       	adc	r16, r16
     cd4:	11 1f       	adc	r17, r17
     cd6:	0a 94       	dec	r0
     cd8:	d2 f7       	brpl	.-12     	; 0xcce <__floatunsisf+0xc4>
     cda:	ed 82       	std	Y+5, r14	; 0x05
     cdc:	fe 82       	std	Y+6, r15	; 0x06
     cde:	0f 83       	std	Y+7, r16	; 0x07
     ce0:	18 87       	std	Y+8, r17	; 0x08
     ce2:	ce 1a       	sub	r12, r30
     ce4:	df 0a       	sbc	r13, r31
     ce6:	dc 82       	std	Y+4, r13	; 0x04
     ce8:	cb 82       	std	Y+3, r12	; 0x03
     cea:	1a 82       	std	Y+2, r1	; 0x02
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     cf4:	28 96       	adiw	r28, 0x08	; 8
     cf6:	ea e0       	ldi	r30, 0x0A	; 10
     cf8:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__epilogue_restores__+0x10>

00000cfc <__clzsi2>:
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	7b 01       	movw	r14, r22
     d06:	8c 01       	movw	r16, r24
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	e8 16       	cp	r14, r24
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	f8 06       	cpc	r15, r24
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	08 07       	cpc	r16, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	18 07       	cpc	r17, r24
     d18:	88 f4       	brcc	.+34     	; 0xd3c <__clzsi2+0x40>
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	e8 16       	cp	r14, r24
     d1e:	f1 04       	cpc	r15, r1
     d20:	01 05       	cpc	r16, r1
     d22:	11 05       	cpc	r17, r1
     d24:	31 f0       	breq	.+12     	; 0xd32 <__clzsi2+0x36>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <__clzsi2+0x36>
     d28:	88 e0       	ldi	r24, 0x08	; 8
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	17 c0       	rjmp	.+46     	; 0xd60 <__clzsi2+0x64>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	12 c0       	rjmp	.+36     	; 0xd60 <__clzsi2+0x64>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	e8 16       	cp	r14, r24
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	f8 06       	cpc	r15, r24
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	08 07       	cpc	r16, r24
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	18 07       	cpc	r17, r24
     d4c:	28 f0       	brcs	.+10     	; 0xd58 <__clzsi2+0x5c>
     d4e:	88 e1       	ldi	r24, 0x18	; 24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <__clzsi2+0x64>
     d58:	80 e1       	ldi	r24, 0x10	; 16
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	20 e2       	ldi	r18, 0x20	; 32
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	28 1b       	sub	r18, r24
     d6a:	39 0b       	sbc	r19, r25
     d6c:	4a 0b       	sbc	r20, r26
     d6e:	5b 0b       	sbc	r21, r27
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <__clzsi2+0x7e>
     d72:	16 95       	lsr	r17
     d74:	07 95       	ror	r16
     d76:	f7 94       	ror	r15
     d78:	e7 94       	ror	r14
     d7a:	8a 95       	dec	r24
     d7c:	d2 f7       	brpl	.-12     	; 0xd72 <__clzsi2+0x76>
     d7e:	f7 01       	movw	r30, r14
     d80:	e6 56       	subi	r30, 0x66	; 102
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	80 81       	ld	r24, Z
     d86:	28 1b       	sub	r18, r24
     d88:	31 09       	sbc	r19, r1
     d8a:	41 09       	sbc	r20, r1
     d8c:	51 09       	sbc	r21, r1
     d8e:	c9 01       	movw	r24, r18
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <__pack_f>:
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	fc 01       	movw	r30, r24
     da6:	e4 80       	ldd	r14, Z+4	; 0x04
     da8:	f5 80       	ldd	r15, Z+5	; 0x05
     daa:	06 81       	ldd	r16, Z+6	; 0x06
     dac:	17 81       	ldd	r17, Z+7	; 0x07
     dae:	d1 80       	ldd	r13, Z+1	; 0x01
     db0:	80 81       	ld	r24, Z
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	48 f4       	brcc	.+18     	; 0xdc8 <__pack_f+0x2e>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	a0 e1       	ldi	r26, 0x10	; 16
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 2a       	or	r14, r24
     dc0:	f9 2a       	or	r15, r25
     dc2:	0a 2b       	or	r16, r26
     dc4:	1b 2b       	or	r17, r27
     dc6:	a5 c0       	rjmp	.+330    	; 0xf12 <__pack_f+0x178>
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	09 f4       	brne	.+2      	; 0xdce <__pack_f+0x34>
     dcc:	9f c0       	rjmp	.+318    	; 0xf0c <__pack_f+0x172>
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	21 f4       	brne	.+8      	; 0xdda <__pack_f+0x40>
     dd2:	ee 24       	eor	r14, r14
     dd4:	ff 24       	eor	r15, r15
     dd6:	87 01       	movw	r16, r14
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <__pack_f+0x4a>
     dda:	e1 14       	cp	r14, r1
     ddc:	f1 04       	cpc	r15, r1
     dde:	01 05       	cpc	r16, r1
     de0:	11 05       	cpc	r17, r1
     de2:	19 f4       	brne	.+6      	; 0xdea <__pack_f+0x50>
     de4:	e0 e0       	ldi	r30, 0x00	; 0
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	96 c0       	rjmp	.+300    	; 0xf16 <__pack_f+0x17c>
     dea:	62 81       	ldd	r22, Z+2	; 0x02
     dec:	73 81       	ldd	r23, Z+3	; 0x03
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	62 38       	cpi	r22, 0x82	; 130
     df2:	79 07       	cpc	r23, r25
     df4:	0c f0       	brlt	.+2      	; 0xdf8 <__pack_f+0x5e>
     df6:	5b c0       	rjmp	.+182    	; 0xeae <__pack_f+0x114>
     df8:	22 e8       	ldi	r18, 0x82	; 130
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	26 1b       	sub	r18, r22
     dfe:	37 0b       	sbc	r19, r23
     e00:	2a 31       	cpi	r18, 0x1A	; 26
     e02:	31 05       	cpc	r19, r1
     e04:	2c f0       	brlt	.+10     	; 0xe10 <__pack_f+0x76>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	2a c0       	rjmp	.+84     	; 0xe64 <__pack_f+0xca>
     e10:	b8 01       	movw	r22, r16
     e12:	a7 01       	movw	r20, r14
     e14:	02 2e       	mov	r0, r18
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <__pack_f+0x86>
     e18:	76 95       	lsr	r23
     e1a:	67 95       	ror	r22
     e1c:	57 95       	ror	r21
     e1e:	47 95       	ror	r20
     e20:	0a 94       	dec	r0
     e22:	d2 f7       	brpl	.-12     	; 0xe18 <__pack_f+0x7e>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <__pack_f+0x9c>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	2a 95       	dec	r18
     e38:	d2 f7       	brpl	.-12     	; 0xe2e <__pack_f+0x94>
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	a1 09       	sbc	r26, r1
     e3e:	b1 09       	sbc	r27, r1
     e40:	8e 21       	and	r24, r14
     e42:	9f 21       	and	r25, r15
     e44:	a0 23       	and	r26, r16
     e46:	b1 23       	and	r27, r17
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	a1 05       	cpc	r26, r1
     e4c:	b1 05       	cpc	r27, r1
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__pack_f+0xbe>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	9a 01       	movw	r18, r20
     e5a:	ab 01       	movw	r20, r22
     e5c:	28 2b       	or	r18, r24
     e5e:	39 2b       	or	r19, r25
     e60:	4a 2b       	or	r20, r26
     e62:	5b 2b       	or	r21, r27
     e64:	da 01       	movw	r26, r20
     e66:	c9 01       	movw	r24, r18
     e68:	8f 77       	andi	r24, 0x7F	; 127
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	a0 70       	andi	r26, 0x00	; 0
     e6e:	b0 70       	andi	r27, 0x00	; 0
     e70:	80 34       	cpi	r24, 0x40	; 64
     e72:	91 05       	cpc	r25, r1
     e74:	a1 05       	cpc	r26, r1
     e76:	b1 05       	cpc	r27, r1
     e78:	39 f4       	brne	.+14     	; 0xe88 <__pack_f+0xee>
     e7a:	27 ff       	sbrs	r18, 7
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <__pack_f+0xf6>
     e7e:	20 5c       	subi	r18, 0xC0	; 192
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	4f 4f       	sbci	r20, 0xFF	; 255
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__pack_f+0xf6>
     e88:	21 5c       	subi	r18, 0xC1	; 193
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	4f 4f       	sbci	r20, 0xFF	; 255
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	20 30       	cpi	r18, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	3a 07       	cpc	r19, r26
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	4a 07       	cpc	r20, r26
     e9e:	a0 e4       	ldi	r26, 0x40	; 64
     ea0:	5a 07       	cpc	r21, r26
     ea2:	10 f0       	brcs	.+4      	; 0xea8 <__pack_f+0x10e>
     ea4:	e1 e0       	ldi	r30, 0x01	; 1
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	79 01       	movw	r14, r18
     eaa:	8a 01       	movw	r16, r20
     eac:	27 c0       	rjmp	.+78     	; 0xefc <__pack_f+0x162>
     eae:	60 38       	cpi	r22, 0x80	; 128
     eb0:	71 05       	cpc	r23, r1
     eb2:	64 f5       	brge	.+88     	; 0xf0c <__pack_f+0x172>
     eb4:	fb 01       	movw	r30, r22
     eb6:	e1 58       	subi	r30, 0x81	; 129
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	d8 01       	movw	r26, r16
     ebc:	c7 01       	movw	r24, r14
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	a0 70       	andi	r26, 0x00	; 0
     ec4:	b0 70       	andi	r27, 0x00	; 0
     ec6:	80 34       	cpi	r24, 0x40	; 64
     ec8:	91 05       	cpc	r25, r1
     eca:	a1 05       	cpc	r26, r1
     ecc:	b1 05       	cpc	r27, r1
     ece:	39 f4       	brne	.+14     	; 0xede <__pack_f+0x144>
     ed0:	e7 fe       	sbrs	r14, 7
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <__pack_f+0x154>
     ed4:	80 e4       	ldi	r24, 0x40	; 64
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <__pack_f+0x14c>
     ede:	8f e3       	ldi	r24, 0x3F	; 63
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e8 0e       	add	r14, r24
     ee8:	f9 1e       	adc	r15, r25
     eea:	0a 1f       	adc	r16, r26
     eec:	1b 1f       	adc	r17, r27
     eee:	17 ff       	sbrs	r17, 7
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <__pack_f+0x162>
     ef2:	16 95       	lsr	r17
     ef4:	07 95       	ror	r16
     ef6:	f7 94       	ror	r15
     ef8:	e7 94       	ror	r14
     efa:	31 96       	adiw	r30, 0x01	; 1
     efc:	87 e0       	ldi	r24, 0x07	; 7
     efe:	16 95       	lsr	r17
     f00:	07 95       	ror	r16
     f02:	f7 94       	ror	r15
     f04:	e7 94       	ror	r14
     f06:	8a 95       	dec	r24
     f08:	d1 f7       	brne	.-12     	; 0xefe <__pack_f+0x164>
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <__pack_f+0x17c>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	ef ef       	ldi	r30, 0xFF	; 255
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	6e 2f       	mov	r22, r30
     f18:	67 95       	ror	r22
     f1a:	66 27       	eor	r22, r22
     f1c:	67 95       	ror	r22
     f1e:	90 2f       	mov	r25, r16
     f20:	9f 77       	andi	r25, 0x7F	; 127
     f22:	d7 94       	ror	r13
     f24:	dd 24       	eor	r13, r13
     f26:	d7 94       	ror	r13
     f28:	8e 2f       	mov	r24, r30
     f2a:	86 95       	lsr	r24
     f2c:	49 2f       	mov	r20, r25
     f2e:	46 2b       	or	r20, r22
     f30:	58 2f       	mov	r21, r24
     f32:	5d 29       	or	r21, r13
     f34:	b7 01       	movw	r22, r14
     f36:	ca 01       	movw	r24, r20
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	df 90       	pop	r13
     f42:	08 95       	ret

00000f44 <__unpack_f>:
     f44:	fc 01       	movw	r30, r24
     f46:	db 01       	movw	r26, r22
     f48:	40 81       	ld	r20, Z
     f4a:	51 81       	ldd	r21, Z+1	; 0x01
     f4c:	22 81       	ldd	r18, Z+2	; 0x02
     f4e:	62 2f       	mov	r22, r18
     f50:	6f 77       	andi	r22, 0x7F	; 127
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	22 1f       	adc	r18, r18
     f56:	22 27       	eor	r18, r18
     f58:	22 1f       	adc	r18, r18
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	89 2f       	mov	r24, r25
     f5e:	88 0f       	add	r24, r24
     f60:	82 2b       	or	r24, r18
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	99 1f       	adc	r25, r25
     f68:	99 27       	eor	r25, r25
     f6a:	99 1f       	adc	r25, r25
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	9c 93       	st	X, r25
     f70:	11 97       	sbiw	r26, 0x01	; 1
     f72:	21 15       	cp	r18, r1
     f74:	31 05       	cpc	r19, r1
     f76:	a9 f5       	brne	.+106    	; 0xfe2 <__unpack_f+0x9e>
     f78:	41 15       	cp	r20, r1
     f7a:	51 05       	cpc	r21, r1
     f7c:	61 05       	cpc	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	11 f4       	brne	.+4      	; 0xf86 <__unpack_f+0x42>
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	37 c0       	rjmp	.+110    	; 0xff4 <__unpack_f+0xb0>
     f86:	82 e8       	ldi	r24, 0x82	; 130
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	13 96       	adiw	r26, 0x03	; 3
     f8c:	9c 93       	st	X, r25
     f8e:	8e 93       	st	-X, r24
     f90:	12 97       	sbiw	r26, 0x02	; 2
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	67 e0       	ldi	r22, 0x07	; 7
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	44 1f       	adc	r20, r20
     f9e:	55 1f       	adc	r21, r21
     fa0:	6a 95       	dec	r22
     fa2:	d1 f7       	brne	.-12     	; 0xf98 <__unpack_f+0x54>
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	8c 93       	st	X, r24
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <__unpack_f+0x80>
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	44 1f       	adc	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	8d 91       	ld	r24, X+
     fb6:	9c 91       	ld	r25, X
     fb8:	13 97       	sbiw	r26, 0x03	; 3
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
     fc2:	12 97       	sbiw	r26, 0x02	; 2
     fc4:	20 30       	cpi	r18, 0x00	; 0
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	38 07       	cpc	r19, r24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	48 07       	cpc	r20, r24
     fce:	80 e4       	ldi	r24, 0x40	; 64
     fd0:	58 07       	cpc	r21, r24
     fd2:	58 f3       	brcs	.-42     	; 0xfaa <__unpack_f+0x66>
     fd4:	14 96       	adiw	r26, 0x04	; 4
     fd6:	2d 93       	st	X+, r18
     fd8:	3d 93       	st	X+, r19
     fda:	4d 93       	st	X+, r20
     fdc:	5c 93       	st	X, r21
     fde:	17 97       	sbiw	r26, 0x07	; 7
     fe0:	08 95       	ret
     fe2:	2f 3f       	cpi	r18, 0xFF	; 255
     fe4:	31 05       	cpc	r19, r1
     fe6:	79 f4       	brne	.+30     	; 0x1006 <__unpack_f+0xc2>
     fe8:	41 15       	cp	r20, r1
     fea:	51 05       	cpc	r21, r1
     fec:	61 05       	cpc	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	19 f4       	brne	.+6      	; 0xff8 <__unpack_f+0xb4>
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	8c 93       	st	X, r24
     ff6:	08 95       	ret
     ff8:	64 ff       	sbrs	r22, 4
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <__unpack_f+0xbe>
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	8c 93       	st	X, r24
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <__unpack_f+0xe2>
    1002:	1c 92       	st	X, r1
    1004:	10 c0       	rjmp	.+32     	; 0x1026 <__unpack_f+0xe2>
    1006:	2f 57       	subi	r18, 0x7F	; 127
    1008:	30 40       	sbci	r19, 0x00	; 0
    100a:	13 96       	adiw	r26, 0x03	; 3
    100c:	3c 93       	st	X, r19
    100e:	2e 93       	st	-X, r18
    1010:	12 97       	sbiw	r26, 0x02	; 2
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	8c 93       	st	X, r24
    1016:	87 e0       	ldi	r24, 0x07	; 7
    1018:	44 0f       	add	r20, r20
    101a:	55 1f       	adc	r21, r21
    101c:	66 1f       	adc	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	8a 95       	dec	r24
    1022:	d1 f7       	brne	.-12     	; 0x1018 <__unpack_f+0xd4>
    1024:	70 64       	ori	r23, 0x40	; 64
    1026:	14 96       	adiw	r26, 0x04	; 4
    1028:	4d 93       	st	X+, r20
    102a:	5d 93       	st	X+, r21
    102c:	6d 93       	st	X+, r22
    102e:	7c 93       	st	X, r23
    1030:	17 97       	sbiw	r26, 0x07	; 7
    1032:	08 95       	ret

00001034 <__fpcmp_parts_f>:
    1034:	1f 93       	push	r17
    1036:	dc 01       	movw	r26, r24
    1038:	fb 01       	movw	r30, r22
    103a:	9c 91       	ld	r25, X
    103c:	92 30       	cpi	r25, 0x02	; 2
    103e:	08 f4       	brcc	.+2      	; 0x1042 <__fpcmp_parts_f+0xe>
    1040:	47 c0       	rjmp	.+142    	; 0x10d0 <__fpcmp_parts_f+0x9c>
    1042:	80 81       	ld	r24, Z
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	08 f4       	brcc	.+2      	; 0x104a <__fpcmp_parts_f+0x16>
    1048:	43 c0       	rjmp	.+134    	; 0x10d0 <__fpcmp_parts_f+0x9c>
    104a:	94 30       	cpi	r25, 0x04	; 4
    104c:	51 f4       	brne	.+20     	; 0x1062 <__fpcmp_parts_f+0x2e>
    104e:	11 96       	adiw	r26, 0x01	; 1
    1050:	1c 91       	ld	r17, X
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	99 f5       	brne	.+102    	; 0x10bc <__fpcmp_parts_f+0x88>
    1056:	81 81       	ldd	r24, Z+1	; 0x01
    1058:	68 2f       	mov	r22, r24
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	61 1b       	sub	r22, r17
    105e:	71 09       	sbc	r23, r1
    1060:	3f c0       	rjmp	.+126    	; 0x10e0 <__fpcmp_parts_f+0xac>
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	21 f0       	breq	.+8      	; 0x106e <__fpcmp_parts_f+0x3a>
    1066:	92 30       	cpi	r25, 0x02	; 2
    1068:	31 f4       	brne	.+12     	; 0x1076 <__fpcmp_parts_f+0x42>
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	b9 f1       	breq	.+110    	; 0x10dc <__fpcmp_parts_f+0xa8>
    106e:	81 81       	ldd	r24, Z+1	; 0x01
    1070:	88 23       	and	r24, r24
    1072:	89 f1       	breq	.+98     	; 0x10d6 <__fpcmp_parts_f+0xa2>
    1074:	2d c0       	rjmp	.+90     	; 0x10d0 <__fpcmp_parts_f+0x9c>
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	1c 91       	ld	r17, X
    107a:	11 97       	sbiw	r26, 0x01	; 1
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	f1 f0       	breq	.+60     	; 0x10bc <__fpcmp_parts_f+0x88>
    1080:	81 81       	ldd	r24, Z+1	; 0x01
    1082:	18 17       	cp	r17, r24
    1084:	d9 f4       	brne	.+54     	; 0x10bc <__fpcmp_parts_f+0x88>
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	2d 91       	ld	r18, X+
    108a:	3c 91       	ld	r19, X
    108c:	13 97       	sbiw	r26, 0x03	; 3
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	82 17       	cp	r24, r18
    1094:	93 07       	cpc	r25, r19
    1096:	94 f0       	brlt	.+36     	; 0x10bc <__fpcmp_parts_f+0x88>
    1098:	28 17       	cp	r18, r24
    109a:	39 07       	cpc	r19, r25
    109c:	bc f0       	brlt	.+46     	; 0x10cc <__fpcmp_parts_f+0x98>
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	8d 91       	ld	r24, X+
    10a2:	9d 91       	ld	r25, X+
    10a4:	0d 90       	ld	r0, X+
    10a6:	bc 91       	ld	r27, X
    10a8:	a0 2d       	mov	r26, r0
    10aa:	24 81       	ldd	r18, Z+4	; 0x04
    10ac:	35 81       	ldd	r19, Z+5	; 0x05
    10ae:	46 81       	ldd	r20, Z+6	; 0x06
    10b0:	57 81       	ldd	r21, Z+7	; 0x07
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	4a 07       	cpc	r20, r26
    10b8:	5b 07       	cpc	r21, r27
    10ba:	18 f4       	brcc	.+6      	; 0x10c2 <__fpcmp_parts_f+0x8e>
    10bc:	11 23       	and	r17, r17
    10be:	41 f0       	breq	.+16     	; 0x10d0 <__fpcmp_parts_f+0x9c>
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <__fpcmp_parts_f+0xa2>
    10c2:	82 17       	cp	r24, r18
    10c4:	93 07       	cpc	r25, r19
    10c6:	a4 07       	cpc	r26, r20
    10c8:	b5 07       	cpc	r27, r21
    10ca:	40 f4       	brcc	.+16     	; 0x10dc <__fpcmp_parts_f+0xa8>
    10cc:	11 23       	and	r17, r17
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <__fpcmp_parts_f+0xa2>
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <__fpcmp_parts_f+0xac>
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	7f ef       	ldi	r23, 0xFF	; 255
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <__fpcmp_parts_f+0xac>
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	cb 01       	movw	r24, r22
    10e2:	1f 91       	pop	r17
    10e4:	08 95       	ret

000010e6 <TMU_vidInit>:
#else
#error TMU max number of tasks must be between [ 1 : 10 ]
#endif

void TMU_vidInit(void)
{  
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	af 97       	sbiw	r28, 0x2f	; 47
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
        #else
            #error TMU OS tick must be between [ 1 : 200 ] msec
        #endif
    #elif TMU_TIMER_CHANNEL == TMU_TIMER2
        #if TMU_OS_TICK >= 1U && TMU_OS_TICK <= 200U
            TCCR2 = 0x04; // 64-pres , ovf , oc0 pin disconnected
    110a:	e5 e4       	ldi	r30, 0x45	; 69
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	84 e0       	ldi	r24, 0x04	; 4
    1110:	80 83       	st	Z, r24
            
            u32 u32Counts = (TMU_OS_TICK * TMU_CPU_FREQ)/(64UL);
    1112:	82 ee       	ldi	r24, 0xE2	; 226
    1114:	94 e0       	ldi	r25, 0x04	; 4
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	ab 83       	std	Y+3, r26	; 0x03
    1120:	bc 83       	std	Y+4, r27	; 0x04

            LOC_u32OvfCounts = (u32Counts + 255LLU) / 256LLU;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	ab 81       	ldd	r26, Y+3	; 0x03
    1128:	bc 81       	ldd	r27, Y+4	; 0x04
    112a:	8c 01       	movw	r16, r24
    112c:	9d 01       	movw	r18, r26
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	0d 83       	std	Y+5, r16	; 0x05
    1138:	1e 83       	std	Y+6, r17	; 0x06
    113a:	2f 83       	std	Y+7, r18	; 0x07
    113c:	38 87       	std	Y+8, r19	; 0x08
    113e:	49 87       	std	Y+9, r20	; 0x09
    1140:	5a 87       	std	Y+10, r21	; 0x0a
    1142:	6b 87       	std	Y+11, r22	; 0x0b
    1144:	7c 87       	std	Y+12, r23	; 0x0c
    1146:	1f ef       	ldi	r17, 0xFF	; 255
    1148:	1d 87       	std	Y+13, r17	; 0x0d
    114a:	1e 86       	std	Y+14, r1	; 0x0e
    114c:	1f 86       	std	Y+15, r1	; 0x0f
    114e:	18 8a       	std	Y+16, r1	; 0x10
    1150:	19 8a       	std	Y+17, r1	; 0x11
    1152:	1a 8a       	std	Y+18, r1	; 0x12
    1154:	1b 8a       	std	Y+19, r1	; 0x13
    1156:	1c 8a       	std	Y+20, r1	; 0x14
    1158:	2d 81       	ldd	r18, Y+5	; 0x05
    115a:	3d 85       	ldd	r19, Y+13	; 0x0d
    115c:	23 0f       	add	r18, r19
    115e:	2d 8b       	std	Y+21, r18	; 0x15
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	4d 8f       	std	Y+29, r20	; 0x1d
    1164:	5d 89       	ldd	r21, Y+21	; 0x15
    1166:	6d 81       	ldd	r22, Y+5	; 0x05
    1168:	56 17       	cp	r21, r22
    116a:	08 f0       	brcs	.+2      	; 0x116e <TMU_vidInit+0x88>
    116c:	1d 8e       	std	Y+29, r1	; 0x1d
    116e:	7e 81       	ldd	r23, Y+6	; 0x06
    1170:	8e 85       	ldd	r24, Y+14	; 0x0e
    1172:	78 0f       	add	r23, r24
    1174:	7e 8b       	std	Y+22, r23	; 0x16
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	9e 8f       	std	Y+30, r25	; 0x1e
    117a:	0e 89       	ldd	r16, Y+22	; 0x16
    117c:	1e 81       	ldd	r17, Y+6	; 0x06
    117e:	01 17       	cp	r16, r17
    1180:	08 f0       	brcs	.+2      	; 0x1184 <TMU_vidInit+0x9e>
    1182:	1e 8e       	std	Y+30, r1	; 0x1e
    1184:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1186:	3e 89       	ldd	r19, Y+22	; 0x16
    1188:	23 0f       	add	r18, r19
    118a:	2f 8f       	std	Y+31, r18	; 0x1f
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	48 a3       	std	Y+32, r20	; 0x20
    1190:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1192:	6e 89       	ldd	r22, Y+22	; 0x16
    1194:	56 17       	cp	r21, r22
    1196:	08 f0       	brcs	.+2      	; 0x119a <TMU_vidInit+0xb4>
    1198:	18 a2       	std	Y+32, r1	; 0x20
    119a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    119c:	88 a1       	ldd	r24, Y+32	; 0x20
    119e:	78 2b       	or	r23, r24
    11a0:	7e 8f       	std	Y+30, r23	; 0x1e
    11a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11a4:	9e 8b       	std	Y+22, r25	; 0x16
    11a6:	0f 81       	ldd	r16, Y+7	; 0x07
    11a8:	1f 85       	ldd	r17, Y+15	; 0x0f
    11aa:	01 0f       	add	r16, r17
    11ac:	0f 8b       	std	Y+23, r16	; 0x17
    11ae:	21 e0       	ldi	r18, 0x01	; 1
    11b0:	29 a3       	std	Y+33, r18	; 0x21
    11b2:	3f 89       	ldd	r19, Y+23	; 0x17
    11b4:	4f 81       	ldd	r20, Y+7	; 0x07
    11b6:	34 17       	cp	r19, r20
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <TMU_vidInit+0xd6>
    11ba:	19 a2       	std	Y+33, r1	; 0x21
    11bc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    11be:	6f 89       	ldd	r22, Y+23	; 0x17
    11c0:	56 0f       	add	r21, r22
    11c2:	5a a3       	std	Y+34, r21	; 0x22
    11c4:	71 e0       	ldi	r23, 0x01	; 1
    11c6:	7b a3       	std	Y+35, r23	; 0x23
    11c8:	8a a1       	ldd	r24, Y+34	; 0x22
    11ca:	9f 89       	ldd	r25, Y+23	; 0x17
    11cc:	89 17       	cp	r24, r25
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <TMU_vidInit+0xec>
    11d0:	1b a2       	std	Y+35, r1	; 0x23
    11d2:	09 a1       	ldd	r16, Y+33	; 0x21
    11d4:	1b a1       	ldd	r17, Y+35	; 0x23
    11d6:	01 2b       	or	r16, r17
    11d8:	09 a3       	std	Y+33, r16	; 0x21
    11da:	2a a1       	ldd	r18, Y+34	; 0x22
    11dc:	2f 8b       	std	Y+23, r18	; 0x17
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	48 89       	ldd	r20, Y+16	; 0x10
    11e2:	34 0f       	add	r19, r20
    11e4:	38 8f       	std	Y+24, r19	; 0x18
    11e6:	51 e0       	ldi	r21, 0x01	; 1
    11e8:	5c a3       	std	Y+36, r21	; 0x24
    11ea:	68 8d       	ldd	r22, Y+24	; 0x18
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	67 17       	cp	r22, r23
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <TMU_vidInit+0x10e>
    11f2:	1c a2       	std	Y+36, r1	; 0x24
    11f4:	89 a1       	ldd	r24, Y+33	; 0x21
    11f6:	98 8d       	ldd	r25, Y+24	; 0x18
    11f8:	89 0f       	add	r24, r25
    11fa:	8d a3       	std	Y+37, r24	; 0x25
    11fc:	01 e0       	ldi	r16, 0x01	; 1
    11fe:	0e a3       	std	Y+38, r16	; 0x26
    1200:	1d a1       	ldd	r17, Y+37	; 0x25
    1202:	28 8d       	ldd	r18, Y+24	; 0x18
    1204:	12 17       	cp	r17, r18
    1206:	08 f0       	brcs	.+2      	; 0x120a <TMU_vidInit+0x124>
    1208:	1e a2       	std	Y+38, r1	; 0x26
    120a:	3c a1       	ldd	r19, Y+36	; 0x24
    120c:	4e a1       	ldd	r20, Y+38	; 0x26
    120e:	34 2b       	or	r19, r20
    1210:	3c a3       	std	Y+36, r19	; 0x24
    1212:	5d a1       	ldd	r21, Y+37	; 0x25
    1214:	58 8f       	std	Y+24, r21	; 0x18
    1216:	69 85       	ldd	r22, Y+9	; 0x09
    1218:	79 89       	ldd	r23, Y+17	; 0x11
    121a:	67 0f       	add	r22, r23
    121c:	69 8f       	std	Y+25, r22	; 0x19
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	8f a3       	std	Y+39, r24	; 0x27
    1222:	99 8d       	ldd	r25, Y+25	; 0x19
    1224:	09 85       	ldd	r16, Y+9	; 0x09
    1226:	90 17       	cp	r25, r16
    1228:	08 f0       	brcs	.+2      	; 0x122c <TMU_vidInit+0x146>
    122a:	1f a2       	std	Y+39, r1	; 0x27
    122c:	1c a1       	ldd	r17, Y+36	; 0x24
    122e:	29 8d       	ldd	r18, Y+25	; 0x19
    1230:	12 0f       	add	r17, r18
    1232:	18 a7       	std	Y+40, r17	; 0x28
    1234:	31 e0       	ldi	r19, 0x01	; 1
    1236:	39 a7       	std	Y+41, r19	; 0x29
    1238:	48 a5       	ldd	r20, Y+40	; 0x28
    123a:	59 8d       	ldd	r21, Y+25	; 0x19
    123c:	45 17       	cp	r20, r21
    123e:	08 f0       	brcs	.+2      	; 0x1242 <TMU_vidInit+0x15c>
    1240:	19 a6       	std	Y+41, r1	; 0x29
    1242:	6f a1       	ldd	r22, Y+39	; 0x27
    1244:	79 a5       	ldd	r23, Y+41	; 0x29
    1246:	67 2b       	or	r22, r23
    1248:	6f a3       	std	Y+39, r22	; 0x27
    124a:	88 a5       	ldd	r24, Y+40	; 0x28
    124c:	89 8f       	std	Y+25, r24	; 0x19
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	0a 89       	ldd	r16, Y+18	; 0x12
    1252:	90 0f       	add	r25, r16
    1254:	9a 8f       	std	Y+26, r25	; 0x1a
    1256:	11 e0       	ldi	r17, 0x01	; 1
    1258:	1a a7       	std	Y+42, r17	; 0x2a
    125a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    125c:	3a 85       	ldd	r19, Y+10	; 0x0a
    125e:	23 17       	cp	r18, r19
    1260:	08 f0       	brcs	.+2      	; 0x1264 <TMU_vidInit+0x17e>
    1262:	1a a6       	std	Y+42, r1	; 0x2a
    1264:	4f a1       	ldd	r20, Y+39	; 0x27
    1266:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1268:	45 0f       	add	r20, r21
    126a:	4b a7       	std	Y+43, r20	; 0x2b
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	6c a7       	std	Y+44, r22	; 0x2c
    1270:	7b a5       	ldd	r23, Y+43	; 0x2b
    1272:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1274:	78 17       	cp	r23, r24
    1276:	08 f0       	brcs	.+2      	; 0x127a <TMU_vidInit+0x194>
    1278:	1c a6       	std	Y+44, r1	; 0x2c
    127a:	9a a5       	ldd	r25, Y+42	; 0x2a
    127c:	0c a5       	ldd	r16, Y+44	; 0x2c
    127e:	90 2b       	or	r25, r16
    1280:	9a a7       	std	Y+42, r25	; 0x2a
    1282:	1b a5       	ldd	r17, Y+43	; 0x2b
    1284:	1a 8f       	std	Y+26, r17	; 0x1a
    1286:	2b 85       	ldd	r18, Y+11	; 0x0b
    1288:	3b 89       	ldd	r19, Y+19	; 0x13
    128a:	23 0f       	add	r18, r19
    128c:	2b 8f       	std	Y+27, r18	; 0x1b
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	4d a7       	std	Y+45, r20	; 0x2d
    1292:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1294:	6b 85       	ldd	r22, Y+11	; 0x0b
    1296:	56 17       	cp	r21, r22
    1298:	08 f0       	brcs	.+2      	; 0x129c <TMU_vidInit+0x1b6>
    129a:	1d a6       	std	Y+45, r1	; 0x2d
    129c:	7a a5       	ldd	r23, Y+42	; 0x2a
    129e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a0:	78 0f       	add	r23, r24
    12a2:	7e a7       	std	Y+46, r23	; 0x2e
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	9f a7       	std	Y+47, r25	; 0x2f
    12a8:	0e a5       	ldd	r16, Y+46	; 0x2e
    12aa:	1b 8d       	ldd	r17, Y+27	; 0x1b
    12ac:	01 17       	cp	r16, r17
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <TMU_vidInit+0x1cc>
    12b0:	1f a6       	std	Y+47, r1	; 0x2f
    12b2:	2d a5       	ldd	r18, Y+45	; 0x2d
    12b4:	3f a5       	ldd	r19, Y+47	; 0x2f
    12b6:	23 2b       	or	r18, r19
    12b8:	2d a7       	std	Y+45, r18	; 0x2d
    12ba:	4e a5       	ldd	r20, Y+46	; 0x2e
    12bc:	4b 8f       	std	Y+27, r20	; 0x1b
    12be:	5c 85       	ldd	r21, Y+12	; 0x0c
    12c0:	6c 89       	ldd	r22, Y+20	; 0x14
    12c2:	56 0f       	add	r21, r22
    12c4:	5c 8f       	std	Y+28, r21	; 0x1c
    12c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    12ca:	87 0f       	add	r24, r23
    12cc:	8c 8f       	std	Y+28, r24	; 0x1c
    12ce:	ad 88       	ldd	r10, Y+21	; 0x15
    12d0:	be 88       	ldd	r11, Y+22	; 0x16
    12d2:	cf 88       	ldd	r12, Y+23	; 0x17
    12d4:	d8 8c       	ldd	r13, Y+24	; 0x18
    12d6:	e9 8c       	ldd	r14, Y+25	; 0x19
    12d8:	fa 8c       	ldd	r15, Y+26	; 0x1a
    12da:	0b 8d       	ldd	r16, Y+27	; 0x1b
    12dc:	1c 8d       	ldd	r17, Y+28	; 0x1c
    12de:	2a 2d       	mov	r18, r10
    12e0:	3b 2d       	mov	r19, r11
    12e2:	4c 2d       	mov	r20, r12
    12e4:	5d 2d       	mov	r21, r13
    12e6:	6e 2d       	mov	r22, r14
    12e8:	7f 2d       	mov	r23, r15
    12ea:	80 2f       	mov	r24, r16
    12ec:	91 2f       	mov	r25, r17
    12ee:	08 e0       	ldi	r16, 0x08	; 8
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    12f4:	a2 2e       	mov	r10, r18
    12f6:	b3 2e       	mov	r11, r19
    12f8:	c4 2e       	mov	r12, r20
    12fa:	d5 2e       	mov	r13, r21
    12fc:	e6 2e       	mov	r14, r22
    12fe:	f7 2e       	mov	r15, r23
    1300:	08 2f       	mov	r16, r24
    1302:	19 2f       	mov	r17, r25
    1304:	2a 2d       	mov	r18, r10
    1306:	3b 2d       	mov	r19, r11
    1308:	4c 2d       	mov	r20, r12
    130a:	5d 2d       	mov	r21, r13
    130c:	6e 2d       	mov	r22, r14
    130e:	7f 2d       	mov	r23, r15
    1310:	80 2f       	mov	r24, r16
    1312:	91 2f       	mov	r25, r17
    1314:	da 01       	movw	r26, r20
    1316:	c9 01       	movw	r24, r18
    1318:	80 93 9a 01 	sts	0x019A, r24
    131c:	90 93 9b 01 	sts	0x019B, r25
    1320:	a0 93 9c 01 	sts	0x019C, r26
    1324:	b0 93 9d 01 	sts	0x019D, r27

            LOC_u8Preload = 256U - (u32Counts % 256LLU);
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	81 95       	neg	r24
    132c:	80 93 a2 01 	sts	0x01A2, r24
            
            TCNT2 = LOC_u8Preload;
    1330:	e4 e4       	ldi	r30, 0x44	; 68
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 91 a2 01 	lds	r24, 0x01A2
    1338:	80 83       	st	Z, r24

            LOC_u32ISRCounter = LOC_u32OvfCounts;
    133a:	80 91 9a 01 	lds	r24, 0x019A
    133e:	90 91 9b 01 	lds	r25, 0x019B
    1342:	a0 91 9c 01 	lds	r26, 0x019C
    1346:	b0 91 9d 01 	lds	r27, 0x019D
    134a:	80 93 9e 01 	sts	0x019E, r24
    134e:	90 93 9f 01 	sts	0x019F, r25
    1352:	a0 93 a0 01 	sts	0x01A0, r26
    1356:	b0 93 a1 01 	sts	0x01A1, r27

            TIMSK |= (1<<6);
    135a:	a9 e5       	ldi	r26, 0x59	; 89
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e9 e5       	ldi	r30, 0x59	; 89
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	80 64       	ori	r24, 0x40	; 64
    1366:	8c 93       	st	X, r24
            #error TMU OS tick must be between [ 1 : 200 ] msec
        #endif
    #else
        #error TMU timer channel configuration is wrong [TMU_TIMER0 - TMU_TIMER1 - TMU_TIMER2]
    #endif
}
    1368:	af 96       	adiw	r28, 0x2f	; 47
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	08 95       	ret

0000138a <TMU_vidCreateTask>:


void TMU_vidCreateTask(void(*pfunTask)(void) , u8 u8Priority , u16 u16Periodicity)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <TMU_vidCreateTask+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <TMU_vidCreateTask+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6b 83       	std	Y+3, r22	; 0x03
    139e:	5d 83       	std	Y+5, r21	; 0x05
    13a0:	4c 83       	std	Y+4, r20	; 0x04
    if (u8Priority < TMU_MAX_TASK_NUM)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	8a 30       	cpi	r24, 0x0A	; 10
    13a6:	e8 f4       	brcc	.+58     	; 0x13e2 <TMU_vidCreateTask+0x58>
    {
        LOC_astrTasks[u8Priority].pfunTask = pfunTask;
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	fc 01       	movw	r30, r24
    13b8:	ed 55       	subi	r30, 0x5D	; 93
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	91 83       	std	Z+1, r25	; 0x01
    13c2:	80 83       	st	Z, r24
        LOC_astrTasks[u8Priority].u16Periodicity = u16Periodicity;
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	fc 01       	movw	r30, r24
    13d6:	ed 55       	subi	r30, 0x5D	; 93
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	80 83       	st	Z, r24
    }
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <TMU_vidStartScheduler>:

void TMU_vidStartScheduler(void)
{
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <TMU_vidStartScheduler+0xe>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <TMU_vidStartScheduler+0x10>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    u32 u32PrevOsTicksCounts = 0UL;
    1408:	1a 82       	std	Y+2, r1	; 0x02
    140a:	1b 82       	std	Y+3, r1	; 0x03
    140c:	1c 82       	std	Y+4, r1	; 0x04
    140e:	1d 82       	std	Y+5, r1	; 0x05
    __asm__("sei");
    1410:	78 94       	sei
    while(1)
    {
        if (LOC_u32OSTicksCounter > u32PrevOsTicksCounts)
    1412:	20 91 f6 01 	lds	r18, 0x01F6
    1416:	30 91 f7 01 	lds	r19, 0x01F7
    141a:	40 91 f8 01 	lds	r20, 0x01F8
    141e:	50 91 f9 01 	lds	r21, 0x01F9
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	9b 81       	ldd	r25, Y+3	; 0x03
    1426:	ac 81       	ldd	r26, Y+4	; 0x04
    1428:	bd 81       	ldd	r27, Y+5	; 0x05
    142a:	82 17       	cp	r24, r18
    142c:	93 07       	cpc	r25, r19
    142e:	a4 07       	cpc	r26, r20
    1430:	b5 07       	cpc	r27, r21
    1432:	78 f7       	brcc	.-34     	; 0x1412 <TMU_vidStartScheduler+0x20>
        {
            u32PrevOsTicksCounts = LOC_u32OSTicksCounter;
    1434:	80 91 f6 01 	lds	r24, 0x01F6
    1438:	90 91 f7 01 	lds	r25, 0x01F7
    143c:	a0 91 f8 01 	lds	r26, 0x01F8
    1440:	b0 91 f9 01 	lds	r27, 0x01F9
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	ac 83       	std	Y+4, r26	; 0x04
    144a:	bd 83       	std	Y+5, r27	; 0x05
            // 0 lowest, max-1 highest
            // for (s8 u8Priority = TMU_MAX_TASK_NUM-1 ; u8Priority >= 0; u8Priority--)
            // 0 highest, max-1 lowest
            for (u8 u8Priority = 0; u8Priority < TMU_MAX_TASK_NUM; u8Priority++)
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	41 c0       	rjmp	.+130    	; 0x14d2 <TMU_vidStartScheduler+0xe0>
            {
                if ((LOC_astrTasks[u8Priority].pfunTask != NULL) &&
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	fc 01       	movw	r30, r24
    1460:	ed 55       	subi	r30, 0x5D	; 93
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	81 f1       	breq	.+96     	; 0x14cc <TMU_vidStartScheduler+0xda>
    146c:	e0 90 f6 01 	lds	r14, 0x01F6
    1470:	f0 90 f7 01 	lds	r15, 0x01F7
    1474:	00 91 f8 01 	lds	r16, 0x01F8
    1478:	10 91 f9 01 	lds	r17, 0x01F9
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	fc 01       	movw	r30, r24
    148e:	ed 55       	subi	r30, 0x5D	; 93
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	9c 01       	movw	r18, r24
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	c8 01       	movw	r24, r16
    149e:	b7 01       	movw	r22, r14
    14a0:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__udivmodsi4>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	a1 05       	cpc	r26, r1
    14ac:	b1 05       	cpc	r27, r1
    14ae:	71 f4       	brne	.+28     	; 0x14cc <TMU_vidStartScheduler+0xda>
                ((LOC_u32OSTicksCounter % LOC_astrTasks[u8Priority].u16Periodicity) == 0U))
                {
                    LOC_astrTasks[u8Priority].pfunTask();
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	fc 01       	movw	r30, r24
    14c0:	ed 55       	subi	r30, 0x5D	; 93
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	01 90       	ld	r0, Z+
    14c6:	f0 81       	ld	r31, Z
    14c8:	e0 2d       	mov	r30, r0
    14ca:	09 95       	icall
        {
            u32PrevOsTicksCounts = LOC_u32OSTicksCounter;
            // 0 lowest, max-1 highest
            // for (s8 u8Priority = TMU_MAX_TASK_NUM-1 ; u8Priority >= 0; u8Priority--)
            // 0 highest, max-1 lowest
            for (u8 u8Priority = 0; u8Priority < TMU_MAX_TASK_NUM; u8Priority++)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	8a 30       	cpi	r24, 0x0A	; 10
    14d6:	08 f4       	brcc	.+2      	; 0x14da <TMU_vidStartScheduler+0xe8>
    14d8:	bb cf       	rjmp	.-138    	; 0x1450 <TMU_vidStartScheduler+0x5e>
    14da:	9b cf       	rjmp	.-202    	; 0x1412 <TMU_vidStartScheduler+0x20>

000014dc <__vector_5>:
        LOC_u32OSTicksCounter++;
    }
#elif TMU_TIMER_CHANNEL == TMU_TIMER2
    void __vector_5(void)__attribute__((signal));
    void __vector_5(void)
    {
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
        LOC_u32ISRCounter--;
    14fa:	80 91 9e 01 	lds	r24, 0x019E
    14fe:	90 91 9f 01 	lds	r25, 0x019F
    1502:	a0 91 a0 01 	lds	r26, 0x01A0
    1506:	b0 91 a1 01 	lds	r27, 0x01A1
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	a1 09       	sbc	r26, r1
    150e:	b1 09       	sbc	r27, r1
    1510:	80 93 9e 01 	sts	0x019E, r24
    1514:	90 93 9f 01 	sts	0x019F, r25
    1518:	a0 93 a0 01 	sts	0x01A0, r26
    151c:	b0 93 a1 01 	sts	0x01A1, r27
        if (! LOC_u32ISRCounter)
    1520:	80 91 9e 01 	lds	r24, 0x019E
    1524:	90 91 9f 01 	lds	r25, 0x019F
    1528:	a0 91 a0 01 	lds	r26, 0x01A0
    152c:	b0 91 a1 01 	lds	r27, 0x01A1
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	a1 05       	cpc	r26, r1
    1534:	b1 05       	cpc	r27, r1
    1536:	41 f5       	brne	.+80     	; 0x1588 <__vector_5+0xac>
        {
            // run scheduler
            LOC_u32OSTicksCounter++;
    1538:	80 91 f6 01 	lds	r24, 0x01F6
    153c:	90 91 f7 01 	lds	r25, 0x01F7
    1540:	a0 91 f8 01 	lds	r26, 0x01F8
    1544:	b0 91 f9 01 	lds	r27, 0x01F9
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	a1 1d       	adc	r26, r1
    154c:	b1 1d       	adc	r27, r1
    154e:	80 93 f6 01 	sts	0x01F6, r24
    1552:	90 93 f7 01 	sts	0x01F7, r25
    1556:	a0 93 f8 01 	sts	0x01F8, r26
    155a:	b0 93 f9 01 	sts	0x01F9, r27

            LOC_u32ISRCounter = LOC_u32OvfCounts;
    155e:	80 91 9a 01 	lds	r24, 0x019A
    1562:	90 91 9b 01 	lds	r25, 0x019B
    1566:	a0 91 9c 01 	lds	r26, 0x019C
    156a:	b0 91 9d 01 	lds	r27, 0x019D
    156e:	80 93 9e 01 	sts	0x019E, r24
    1572:	90 93 9f 01 	sts	0x019F, r25
    1576:	a0 93 a0 01 	sts	0x01A0, r26
    157a:	b0 93 a1 01 	sts	0x01A1, r27
            TCNT2 = LOC_u8Preload;
    157e:	e4 e4       	ldi	r30, 0x44	; 68
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 91 a2 01 	lds	r24, 0x01A2
    1586:	80 83       	st	Z, r24
        }
    }
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <UART_vidInit>:
#include "UART_config.h"
#include "UART_priv.h"
#include "UART_int.h"

void UART_vidInit(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <UART_vidInit+0x6>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    u8 u8UCSRC = 0;
    15ae:	1b 82       	std	Y+3, r1	; 0x03

    // Select UCSRC register (URSEL=1)
    u8UCSRC |= (1 << URSEL);
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	80 68       	ori	r24, 0x80	; 128
    15b4:	8b 83       	std	Y+3, r24	; 0x03
#elif UART_DATA_BITS == 6
    u8UCSRC |= (1 << UCSZ0);
#elif UART_DATA_BITS == 7
    u8UCSRC |= (1 << UCSZ1);
#elif UART_DATA_BITS == 8
    u8UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	86 60       	ori	r24, 0x06	; 6
    15ba:	8b 83       	std	Y+3, r24	; 0x03
#error "Invalid UART_DATA_BITS value"
#endif

    // Stop bits
#if UART_STOP_BITS == 1
    u8UCSRC &= ~(1 << USBS); // 1 stop bit
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	87 7f       	andi	r24, 0xF7	; 247
    15c0:	8b 83       	std	Y+3, r24	; 0x03
#error "Invalid UART_STOP_BITS value"
#endif

    // Parity
#if UART_PARITY == 0
    u8UCSRC &= ~((1 << UPM1) | (1 << UPM0)); // None
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	8f 7c       	andi	r24, 0xCF	; 207
    15c6:	8b 83       	std	Y+3, r24	; 0x03
#else
#error "Invalid UART_PARITY value"
#endif

    // Apply UCSRC settings
    UCSRC = u8UCSRC;
    15c8:	e0 e4       	ldi	r30, 0x40	; 64
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	80 83       	st	Z, r24
    // Baud rate
#if UART_DOUBLE_SPEED == 1
    UCSRA |= (1 << U2X); // Enable double speed
    u16 u16UBRR = (F_CPU / (8UL * UART_BAUDRATE)) - 1;
#else
    UCSRA &= ~(1 << U2X); // Normal speed
    15d0:	ab e2       	ldi	r26, 0x2B	; 43
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e2       	ldi	r30, 0x2B	; 43
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	8c 93       	st	X, r24
    u16 u16UBRR = (F_CPU / (16UL * UART_BAUDRATE)) - 1;
    15de:	87 e6       	ldi	r24, 0x67	; 103
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
#endif
    UBRRL = (u8)u16UBRR;
    15e6:	e9 e2       	ldi	r30, 0x29	; 41
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 83       	st	Z, r24
    UBRRH = (u8)(u16UBRR >> 8);
    15ee:	e0 e4       	ldi	r30, 0x40	; 64
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	89 2f       	mov	r24, r25
    15f8:	99 27       	eor	r25, r25
    15fa:	80 83       	st	Z, r24

    // Enable TX and RX
    UCSRB |= (1 << TXEN) | (1 << RXEN);
    15fc:	aa e2       	ldi	r26, 0x2A	; 42
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ea e2       	ldi	r30, 0x2A	; 42
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	88 61       	ori	r24, 0x18	; 24
    1608:	8c 93       	st	X, r24
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <UART_vidSend>:

void UART_vidSend(u8 u8Data)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
    // Wait until transmit buffer is empty
    while (!(UCSRA & (1 << UDRE)));
    1622:	eb e2       	ldi	r30, 0x2B	; 43
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	80 72       	andi	r24, 0x20	; 32
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	b9 f3       	breq	.-18     	; 0x1622 <UART_vidSend+0xc>
    // Put data into buffer
    UDR = u8Data;
    1634:	ec e2       	ldi	r30, 0x2C	; 44
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	80 83       	st	Z, r24
}
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <UART_vidSendString>:

void UART_vidSendString(const char *str)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <UART_vidSendString+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	0b c0       	rjmp	.+22     	; 0x166a <UART_vidSendString+0x26>
    while (*str)
    {
        UART_vidSend(*str++);
    1654:	e9 81       	ldd	r30, Y+1	; 0x01
    1656:	fa 81       	ldd	r31, Y+2	; 0x02
    1658:	20 81       	ld	r18, Z
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	82 2f       	mov	r24, r18
    1666:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_vidSend>
    UDR = u8Data;
}

void UART_vidSendString(const char *str)
{
    while (*str)
    166a:	e9 81       	ldd	r30, Y+1	; 0x01
    166c:	fa 81       	ldd	r31, Y+2	; 0x02
    166e:	80 81       	ld	r24, Z
    1670:	88 23       	and	r24, r24
    1672:	81 f7       	brne	.-32     	; 0x1654 <UART_vidSendString+0x10>
    {
        UART_vidSend(*str++);
    }
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <UART_u8Receive>:

u8 UART_u8Receive(void)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    // Wait until data is received
    while (!(UCSRA & (1 << RXC)));
    1686:	eb e2       	ldi	r30, 0x2B	; 43
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	dc f7       	brge	.-10     	; 0x1686 <UART_u8Receive+0x8>
    // Get and return received data
    return UDR;
    1690:	ec e2       	ldi	r30, 0x2C	; 44
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <UART_vidReceiveStringUntilNewline>:

void UART_vidReceiveStringUntilNewline(char *buffer, u8 maxLen)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <UART_vidReceiveStringUntilNewline+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <UART_vidReceiveStringUntilNewline+0x8>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <UART_vidReceiveStringUntilNewline+0xa>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9d 83       	std	Y+5, r25	; 0x05
    16ac:	8c 83       	std	Y+4, r24	; 0x04
    16ae:	6e 83       	std	Y+6, r22	; 0x06
    // Clear buffer first
    for (u8 j = 0; j < maxLen; j++)
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	0c c0       	rjmp	.+24     	; 0x16cc <UART_vidReceiveStringUntilNewline+0x30>
    {
        buffer[j] = '\0';
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	fc 01       	movw	r30, r24
    16c0:	e2 0f       	add	r30, r18
    16c2:	f3 1f       	adc	r31, r19
    16c4:	10 82       	st	Z, r1
}

void UART_vidReceiveStringUntilNewline(char *buffer, u8 maxLen)
{
    // Clear buffer first
    for (u8 j = 0; j < maxLen; j++)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	99 81       	ldd	r25, Y+1	; 0x01
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	98 17       	cp	r25, r24
    16d2:	80 f3       	brcs	.-32     	; 0x16b4 <UART_vidReceiveStringUntilNewline+0x18>
    {
        buffer[j] = '\0';
    }

    char c;
    u8 i = 0;
    16d4:	1a 82       	std	Y+2, r1	; 0x02

    do
    {
        c = UART_u8Receive();   // blocking wait for next char
    16d6:	0e 94 3f 0b 	call	0x167e	; 0x167e <UART_u8Receive>
    16da:	8b 83       	std	Y+3, r24	; 0x03
        if (i < maxLen - 1)     // leave space for null terminator
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
    16ee:	6c f4       	brge	.+26     	; 0x170a <UART_vidReceiveStringUntilNewline+0x6e>
        {
            buffer[i++] = c;
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	80 83       	st	Z, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	8a 83       	std	Y+2, r24	; 0x02
        }
    } while (c != '\n' && i < maxLen - 1);
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	8a 30       	cpi	r24, 0x0A	; 10
    170e:	51 f0       	breq	.+20     	; 0x1724 <UART_vidReceiveStringUntilNewline+0x88>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	8e 81       	ldd	r24, Y+6	; 0x06
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	28 17       	cp	r18, r24
    1720:	39 07       	cpc	r19, r25
    1722:	cc f2       	brlt	.-78     	; 0x16d6 <UART_vidReceiveStringUntilNewline+0x3a>

    // Replace newline with end of string
    if (i > 0 && buffer[i - 1] == '\n')
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	88 23       	and	r24, r24
    1728:	d9 f0       	breq	.+54     	; 0x1760 <UART_vidReceiveStringUntilNewline+0xc4>
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9c 01       	movw	r18, r24
    1732:	21 50       	subi	r18, 0x01	; 1
    1734:	30 40       	sbci	r19, 0x00	; 0
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	fc 01       	movw	r30, r24
    173c:	e2 0f       	add	r30, r18
    173e:	f3 1f       	adc	r31, r19
    1740:	80 81       	ld	r24, Z
    1742:	8a 30       	cpi	r24, 0x0A	; 10
    1744:	69 f4       	brne	.+26     	; 0x1760 <UART_vidReceiveStringUntilNewline+0xc4>
    {
        buffer[i - 1] = '\0';
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 01       	movw	r18, r24
    174e:	21 50       	subi	r18, 0x01	; 1
    1750:	30 40       	sbci	r19, 0x00	; 0
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	fc 01       	movw	r30, r24
    1758:	e2 0f       	add	r30, r18
    175a:	f3 1f       	adc	r31, r19
    175c:	10 82       	st	Z, r1
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <UART_vidReceiveStringUntilNewline+0xd6>
    }
    else
    {
        buffer[i] = '\0';
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	fc 01       	movw	r30, r24
    176c:	e2 0f       	add	r30, r18
    176e:	f3 1f       	adc	r31, r19
    1770:	10 82       	st	Z, r1
    }
}
    1772:	26 96       	adiw	r28, 0x06	; 6
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <Timer_vidInit>:
static u8  LOC_u8Preload    = 0U;

static void(*LOC_pfunAsychAppFun)(void) = NULL;

void Timer_vidInit(void)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_PRES>= PRES_STOP && TIMER0_PRES <= PRES_T0_RISE
    TCCR0 &=~ (7<<0);
    178c:	a3 e5       	ldi	r26, 0x53	; 83
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e3 e5       	ldi	r30, 0x53	; 83
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	88 7f       	andi	r24, 0xF8	; 248
    1798:	8c 93       	st	X, r24
    TCCR0 |= (TIMER0_PRES << 0);
    179a:	a3 e5       	ldi	r26, 0x53	; 83
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e3 e5       	ldi	r30, 0x53	; 83
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	82 60       	ori	r24, 0x02	; 2
    17a6:	8c 93       	st	X, r24
#endif

#if TIMER0_MODE == OVF
    TCCR0 &=~(1<<3);
    17a8:	a3 e5       	ldi	r26, 0x53	; 83
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e3 e5       	ldi	r30, 0x53	; 83
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	87 7f       	andi	r24, 0xF7	; 247
    17b4:	8c 93       	st	X, r24
    TCCR0 &=~(1<<6);
    17b6:	a3 e5       	ldi	r26, 0x53	; 83
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e3 e5       	ldi	r30, 0x53	; 83
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 7b       	andi	r24, 0xBF	; 191
    17c2:	8c 93       	st	X, r24
#endif

#if TIMER0_INTERRPT  ==    INTERRUPT 
    TIMSK |= (1<<0);
    17c4:	a9 e5       	ldi	r26, 0x59	; 89
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e9 e5       	ldi	r30, 0x59	; 89
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	8c 93       	st	X, r24
    #endif    
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <Timer_vidSychDelay>:

void Timer_vidSychDelay(u32 u32MilliSeconds)
{
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	cf 58       	subi	r28, 0x8F	; 143
    1802:	d0 40       	sbci	r29, 0x00	; 0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	6a 8b       	std	Y+18, r22	; 0x12
    1810:	7b 8b       	std	Y+19, r23	; 0x13
    1812:	8c 8b       	std	Y+20, r24	; 0x14
    1814:	9d 8b       	std	Y+21, r25	; 0x15
    TIMSK &=~(1<<0);
    1816:	a9 e5       	ldi	r26, 0x59	; 89
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e9 e5       	ldi	r30, 0x59	; 89
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	8e 7f       	andi	r24, 0xFE	; 254
    1822:	8c 93       	st	X, r24
    
    u64 u64Counts = (u32MilliSeconds * 16000LLU)/8;
    1824:	8a 89       	ldd	r24, Y+18	; 0x12
    1826:	9b 89       	ldd	r25, Y+19	; 0x13
    1828:	ac 89       	ldd	r26, Y+20	; 0x14
    182a:	bd 89       	ldd	r27, Y+21	; 0x15
    182c:	8c 01       	movw	r16, r24
    182e:	9d 01       	movw	r18, r26
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	0f 8b       	std	Y+23, r16	; 0x17
    183a:	18 8f       	std	Y+24, r17	; 0x18
    183c:	29 8f       	std	Y+25, r18	; 0x19
    183e:	3a 8f       	std	Y+26, r19	; 0x1a
    1840:	4b 8f       	std	Y+27, r20	; 0x1b
    1842:	5c 8f       	std	Y+28, r21	; 0x1c
    1844:	6d 8f       	std	Y+29, r22	; 0x1d
    1846:	7e 8f       	std	Y+30, r23	; 0x1e
    1848:	af 88       	ldd	r10, Y+23	; 0x17
    184a:	b8 8c       	ldd	r11, Y+24	; 0x18
    184c:	c9 8c       	ldd	r12, Y+25	; 0x19
    184e:	da 8c       	ldd	r13, Y+26	; 0x1a
    1850:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1852:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1854:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1856:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1858:	2a 2d       	mov	r18, r10
    185a:	3b 2d       	mov	r19, r11
    185c:	4c 2d       	mov	r20, r12
    185e:	5d 2d       	mov	r21, r13
    1860:	6e 2d       	mov	r22, r14
    1862:	7f 2d       	mov	r23, r15
    1864:	80 2f       	mov	r24, r16
    1866:	91 2f       	mov	r25, r17
    1868:	02 e0       	ldi	r16, 0x02	; 2
    186a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    186e:	2f 8f       	std	Y+31, r18	; 0x1f
    1870:	38 a3       	std	Y+32, r19	; 0x20
    1872:	49 a3       	std	Y+33, r20	; 0x21
    1874:	5a a3       	std	Y+34, r21	; 0x22
    1876:	6b a3       	std	Y+35, r22	; 0x23
    1878:	7c a3       	std	Y+36, r23	; 0x24
    187a:	8d a3       	std	Y+37, r24	; 0x25
    187c:	9e a3       	std	Y+38, r25	; 0x26
    187e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1880:	38 a1       	ldd	r19, Y+32	; 0x20
    1882:	49 a1       	ldd	r20, Y+33	; 0x21
    1884:	5a a1       	ldd	r21, Y+34	; 0x22
    1886:	6b a1       	ldd	r22, Y+35	; 0x23
    1888:	7c a1       	ldd	r23, Y+36	; 0x24
    188a:	8d a1       	ldd	r24, Y+37	; 0x25
    188c:	9e a1       	ldd	r25, Y+38	; 0x26
    188e:	05 e0       	ldi	r16, 0x05	; 5
    1890:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    1894:	2f a3       	std	Y+39, r18	; 0x27
    1896:	38 a7       	std	Y+40, r19	; 0x28
    1898:	49 a7       	std	Y+41, r20	; 0x29
    189a:	5a a7       	std	Y+42, r21	; 0x2a
    189c:	6b a7       	std	Y+43, r22	; 0x2b
    189e:	7c a7       	std	Y+44, r23	; 0x2c
    18a0:	8d a7       	std	Y+45, r24	; 0x2d
    18a2:	9e a7       	std	Y+46, r25	; 0x2e
    18a4:	1f a1       	ldd	r17, Y+39	; 0x27
    18a6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18a8:	12 1b       	sub	r17, r18
    18aa:	1f a7       	std	Y+47, r17	; 0x2f
    18ac:	31 e0       	ldi	r19, 0x01	; 1
    18ae:	3f ab       	std	Y+55, r19	; 0x37
    18b0:	4f a5       	ldd	r20, Y+47	; 0x2f
    18b2:	5f a1       	ldd	r21, Y+39	; 0x27
    18b4:	54 17       	cp	r21, r20
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <Timer_vidSychDelay+0xe2>
    18b8:	1f aa       	std	Y+55, r1	; 0x37
    18ba:	68 a5       	ldd	r22, Y+40	; 0x28
    18bc:	78 a1       	ldd	r23, Y+32	; 0x20
    18be:	67 1b       	sub	r22, r23
    18c0:	68 ab       	std	Y+48, r22	; 0x30
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	88 af       	std	Y+56, r24	; 0x38
    18c6:	98 a9       	ldd	r25, Y+48	; 0x30
    18c8:	08 a5       	ldd	r16, Y+40	; 0x28
    18ca:	09 17       	cp	r16, r25
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <Timer_vidSychDelay+0xf8>
    18ce:	18 ae       	std	Y+56, r1	; 0x38
    18d0:	18 a9       	ldd	r17, Y+48	; 0x30
    18d2:	2f a9       	ldd	r18, Y+55	; 0x37
    18d4:	12 1b       	sub	r17, r18
    18d6:	19 af       	std	Y+57, r17	; 0x39
    18d8:	31 e0       	ldi	r19, 0x01	; 1
    18da:	3a af       	std	Y+58, r19	; 0x3a
    18dc:	49 ad       	ldd	r20, Y+57	; 0x39
    18de:	58 a9       	ldd	r21, Y+48	; 0x30
    18e0:	54 17       	cp	r21, r20
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <Timer_vidSychDelay+0x10e>
    18e4:	1a ae       	std	Y+58, r1	; 0x3a
    18e6:	68 ad       	ldd	r22, Y+56	; 0x38
    18e8:	7a ad       	ldd	r23, Y+58	; 0x3a
    18ea:	67 2b       	or	r22, r23
    18ec:	68 af       	std	Y+56, r22	; 0x38
    18ee:	89 ad       	ldd	r24, Y+57	; 0x39
    18f0:	88 ab       	std	Y+48, r24	; 0x30
    18f2:	99 a5       	ldd	r25, Y+41	; 0x29
    18f4:	09 a1       	ldd	r16, Y+33	; 0x21
    18f6:	90 1b       	sub	r25, r16
    18f8:	99 ab       	std	Y+49, r25	; 0x31
    18fa:	11 e0       	ldi	r17, 0x01	; 1
    18fc:	1b af       	std	Y+59, r17	; 0x3b
    18fe:	29 a9       	ldd	r18, Y+49	; 0x31
    1900:	39 a5       	ldd	r19, Y+41	; 0x29
    1902:	32 17       	cp	r19, r18
    1904:	08 f0       	brcs	.+2      	; 0x1908 <Timer_vidSychDelay+0x130>
    1906:	1b ae       	std	Y+59, r1	; 0x3b
    1908:	49 a9       	ldd	r20, Y+49	; 0x31
    190a:	58 ad       	ldd	r21, Y+56	; 0x38
    190c:	45 1b       	sub	r20, r21
    190e:	4c af       	std	Y+60, r20	; 0x3c
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	6d af       	std	Y+61, r22	; 0x3d
    1914:	7c ad       	ldd	r23, Y+60	; 0x3c
    1916:	89 a9       	ldd	r24, Y+49	; 0x31
    1918:	87 17       	cp	r24, r23
    191a:	08 f0       	brcs	.+2      	; 0x191e <Timer_vidSychDelay+0x146>
    191c:	1d ae       	std	Y+61, r1	; 0x3d
    191e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1920:	0d ad       	ldd	r16, Y+61	; 0x3d
    1922:	90 2b       	or	r25, r16
    1924:	9b af       	std	Y+59, r25	; 0x3b
    1926:	1c ad       	ldd	r17, Y+60	; 0x3c
    1928:	19 ab       	std	Y+49, r17	; 0x31
    192a:	2a a5       	ldd	r18, Y+42	; 0x2a
    192c:	3a a1       	ldd	r19, Y+34	; 0x22
    192e:	23 1b       	sub	r18, r19
    1930:	2a ab       	std	Y+50, r18	; 0x32
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	4e af       	std	Y+62, r20	; 0x3e
    1936:	5a a9       	ldd	r21, Y+50	; 0x32
    1938:	6a a5       	ldd	r22, Y+42	; 0x2a
    193a:	65 17       	cp	r22, r21
    193c:	08 f0       	brcs	.+2      	; 0x1940 <Timer_vidSychDelay+0x168>
    193e:	1e ae       	std	Y+62, r1	; 0x3e
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b ad       	ldd	r24, Y+59	; 0x3b
    1944:	78 1b       	sub	r23, r24
    1946:	7f af       	std	Y+63, r23	; 0x3f
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	21 96       	adiw	r28, 0x01	; 1
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	21 97       	sbiw	r28, 0x01	; 1
    1950:	0f ad       	ldd	r16, Y+63	; 0x3f
    1952:	1a a9       	ldd	r17, Y+50	; 0x32
    1954:	10 17       	cp	r17, r16
    1956:	18 f0       	brcs	.+6      	; 0x195e <Timer_vidSychDelay+0x186>
    1958:	21 96       	adiw	r28, 0x01	; 1
    195a:	1f ae       	std	Y+63, r1	; 0x3f
    195c:	21 97       	sbiw	r28, 0x01	; 1
    195e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1960:	21 96       	adiw	r28, 0x01	; 1
    1962:	3f ad       	ldd	r19, Y+63	; 0x3f
    1964:	21 97       	sbiw	r28, 0x01	; 1
    1966:	23 2b       	or	r18, r19
    1968:	2e af       	std	Y+62, r18	; 0x3e
    196a:	4f ad       	ldd	r20, Y+63	; 0x3f
    196c:	4a ab       	std	Y+50, r20	; 0x32
    196e:	5b a5       	ldd	r21, Y+43	; 0x2b
    1970:	6b a1       	ldd	r22, Y+35	; 0x23
    1972:	56 1b       	sub	r21, r22
    1974:	5b ab       	std	Y+51, r21	; 0x33
    1976:	71 e0       	ldi	r23, 0x01	; 1
    1978:	22 96       	adiw	r28, 0x02	; 2
    197a:	7f af       	std	Y+63, r23	; 0x3f
    197c:	22 97       	sbiw	r28, 0x02	; 2
    197e:	8b a9       	ldd	r24, Y+51	; 0x33
    1980:	9b a5       	ldd	r25, Y+43	; 0x2b
    1982:	98 17       	cp	r25, r24
    1984:	18 f0       	brcs	.+6      	; 0x198c <Timer_vidSychDelay+0x1b4>
    1986:	22 96       	adiw	r28, 0x02	; 2
    1988:	1f ae       	std	Y+63, r1	; 0x3f
    198a:	22 97       	sbiw	r28, 0x02	; 2
    198c:	0b a9       	ldd	r16, Y+51	; 0x33
    198e:	1e ad       	ldd	r17, Y+62	; 0x3e
    1990:	01 1b       	sub	r16, r17
    1992:	23 96       	adiw	r28, 0x03	; 3
    1994:	0f af       	std	Y+63, r16	; 0x3f
    1996:	23 97       	sbiw	r28, 0x03	; 3
    1998:	21 e0       	ldi	r18, 0x01	; 1
    199a:	24 96       	adiw	r28, 0x04	; 4
    199c:	2f af       	std	Y+63, r18	; 0x3f
    199e:	24 97       	sbiw	r28, 0x04	; 4
    19a0:	23 96       	adiw	r28, 0x03	; 3
    19a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    19a4:	23 97       	sbiw	r28, 0x03	; 3
    19a6:	4b a9       	ldd	r20, Y+51	; 0x33
    19a8:	43 17       	cp	r20, r19
    19aa:	18 f0       	brcs	.+6      	; 0x19b2 <Timer_vidSychDelay+0x1da>
    19ac:	24 96       	adiw	r28, 0x04	; 4
    19ae:	1f ae       	std	Y+63, r1	; 0x3f
    19b0:	24 97       	sbiw	r28, 0x04	; 4
    19b2:	22 96       	adiw	r28, 0x02	; 2
    19b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b6:	22 97       	sbiw	r28, 0x02	; 2
    19b8:	24 96       	adiw	r28, 0x04	; 4
    19ba:	6f ad       	ldd	r22, Y+63	; 0x3f
    19bc:	24 97       	sbiw	r28, 0x04	; 4
    19be:	56 2b       	or	r21, r22
    19c0:	22 96       	adiw	r28, 0x02	; 2
    19c2:	5f af       	std	Y+63, r21	; 0x3f
    19c4:	22 97       	sbiw	r28, 0x02	; 2
    19c6:	23 96       	adiw	r28, 0x03	; 3
    19c8:	7f ad       	ldd	r23, Y+63	; 0x3f
    19ca:	23 97       	sbiw	r28, 0x03	; 3
    19cc:	7b ab       	std	Y+51, r23	; 0x33
    19ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    19d0:	9c a1       	ldd	r25, Y+36	; 0x24
    19d2:	89 1b       	sub	r24, r25
    19d4:	8c ab       	std	Y+52, r24	; 0x34
    19d6:	01 e0       	ldi	r16, 0x01	; 1
    19d8:	25 96       	adiw	r28, 0x05	; 5
    19da:	0f af       	std	Y+63, r16	; 0x3f
    19dc:	25 97       	sbiw	r28, 0x05	; 5
    19de:	1c a9       	ldd	r17, Y+52	; 0x34
    19e0:	2c a5       	ldd	r18, Y+44	; 0x2c
    19e2:	21 17       	cp	r18, r17
    19e4:	18 f0       	brcs	.+6      	; 0x19ec <Timer_vidSychDelay+0x214>
    19e6:	25 96       	adiw	r28, 0x05	; 5
    19e8:	1f ae       	std	Y+63, r1	; 0x3f
    19ea:	25 97       	sbiw	r28, 0x05	; 5
    19ec:	3c a9       	ldd	r19, Y+52	; 0x34
    19ee:	22 96       	adiw	r28, 0x02	; 2
    19f0:	4f ad       	ldd	r20, Y+63	; 0x3f
    19f2:	22 97       	sbiw	r28, 0x02	; 2
    19f4:	34 1b       	sub	r19, r20
    19f6:	26 96       	adiw	r28, 0x06	; 6
    19f8:	3f af       	std	Y+63, r19	; 0x3f
    19fa:	26 97       	sbiw	r28, 0x06	; 6
    19fc:	51 e0       	ldi	r21, 0x01	; 1
    19fe:	27 96       	adiw	r28, 0x07	; 7
    1a00:	5f af       	std	Y+63, r21	; 0x3f
    1a02:	27 97       	sbiw	r28, 0x07	; 7
    1a04:	26 96       	adiw	r28, 0x06	; 6
    1a06:	6f ad       	ldd	r22, Y+63	; 0x3f
    1a08:	26 97       	sbiw	r28, 0x06	; 6
    1a0a:	7c a9       	ldd	r23, Y+52	; 0x34
    1a0c:	76 17       	cp	r23, r22
    1a0e:	18 f0       	brcs	.+6      	; 0x1a16 <Timer_vidSychDelay+0x23e>
    1a10:	27 96       	adiw	r28, 0x07	; 7
    1a12:	1f ae       	std	Y+63, r1	; 0x3f
    1a14:	27 97       	sbiw	r28, 0x07	; 7
    1a16:	25 96       	adiw	r28, 0x05	; 5
    1a18:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a1a:	25 97       	sbiw	r28, 0x05	; 5
    1a1c:	27 96       	adiw	r28, 0x07	; 7
    1a1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a20:	27 97       	sbiw	r28, 0x07	; 7
    1a22:	89 2b       	or	r24, r25
    1a24:	25 96       	adiw	r28, 0x05	; 5
    1a26:	8f af       	std	Y+63, r24	; 0x3f
    1a28:	25 97       	sbiw	r28, 0x05	; 5
    1a2a:	26 96       	adiw	r28, 0x06	; 6
    1a2c:	0f ad       	ldd	r16, Y+63	; 0x3f
    1a2e:	26 97       	sbiw	r28, 0x06	; 6
    1a30:	0c ab       	std	Y+52, r16	; 0x34
    1a32:	1d a5       	ldd	r17, Y+45	; 0x2d
    1a34:	2d a1       	ldd	r18, Y+37	; 0x25
    1a36:	12 1b       	sub	r17, r18
    1a38:	1d ab       	std	Y+53, r17	; 0x35
    1a3a:	31 e0       	ldi	r19, 0x01	; 1
    1a3c:	28 96       	adiw	r28, 0x08	; 8
    1a3e:	3f af       	std	Y+63, r19	; 0x3f
    1a40:	28 97       	sbiw	r28, 0x08	; 8
    1a42:	4d a9       	ldd	r20, Y+53	; 0x35
    1a44:	5d a5       	ldd	r21, Y+45	; 0x2d
    1a46:	54 17       	cp	r21, r20
    1a48:	18 f0       	brcs	.+6      	; 0x1a50 <Timer_vidSychDelay+0x278>
    1a4a:	28 96       	adiw	r28, 0x08	; 8
    1a4c:	1f ae       	std	Y+63, r1	; 0x3f
    1a4e:	28 97       	sbiw	r28, 0x08	; 8
    1a50:	6d a9       	ldd	r22, Y+53	; 0x35
    1a52:	25 96       	adiw	r28, 0x05	; 5
    1a54:	7f ad       	ldd	r23, Y+63	; 0x3f
    1a56:	25 97       	sbiw	r28, 0x05	; 5
    1a58:	67 1b       	sub	r22, r23
    1a5a:	29 96       	adiw	r28, 0x09	; 9
    1a5c:	6f af       	std	Y+63, r22	; 0x3f
    1a5e:	29 97       	sbiw	r28, 0x09	; 9
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	2a 96       	adiw	r28, 0x0a	; 10
    1a64:	8f af       	std	Y+63, r24	; 0x3f
    1a66:	2a 97       	sbiw	r28, 0x0a	; 10
    1a68:	29 96       	adiw	r28, 0x09	; 9
    1a6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a6c:	29 97       	sbiw	r28, 0x09	; 9
    1a6e:	0d a9       	ldd	r16, Y+53	; 0x35
    1a70:	09 17       	cp	r16, r25
    1a72:	18 f0       	brcs	.+6      	; 0x1a7a <Timer_vidSychDelay+0x2a2>
    1a74:	2a 96       	adiw	r28, 0x0a	; 10
    1a76:	1f ae       	std	Y+63, r1	; 0x3f
    1a78:	2a 97       	sbiw	r28, 0x0a	; 10
    1a7a:	28 96       	adiw	r28, 0x08	; 8
    1a7c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a7e:	28 97       	sbiw	r28, 0x08	; 8
    1a80:	2a 96       	adiw	r28, 0x0a	; 10
    1a82:	2f ad       	ldd	r18, Y+63	; 0x3f
    1a84:	2a 97       	sbiw	r28, 0x0a	; 10
    1a86:	12 2b       	or	r17, r18
    1a88:	28 96       	adiw	r28, 0x08	; 8
    1a8a:	1f af       	std	Y+63, r17	; 0x3f
    1a8c:	28 97       	sbiw	r28, 0x08	; 8
    1a8e:	29 96       	adiw	r28, 0x09	; 9
    1a90:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a92:	29 97       	sbiw	r28, 0x09	; 9
    1a94:	3d ab       	std	Y+53, r19	; 0x35
    1a96:	4e a5       	ldd	r20, Y+46	; 0x2e
    1a98:	5e a1       	ldd	r21, Y+38	; 0x26
    1a9a:	45 1b       	sub	r20, r21
    1a9c:	4e ab       	std	Y+54, r20	; 0x36
    1a9e:	8e a9       	ldd	r24, Y+54	; 0x36
    1aa0:	28 96       	adiw	r28, 0x08	; 8
    1aa2:	6f ad       	ldd	r22, Y+63	; 0x3f
    1aa4:	28 97       	sbiw	r28, 0x08	; 8
    1aa6:	86 1b       	sub	r24, r22
    1aa8:	8e ab       	std	Y+54, r24	; 0x36
    1aaa:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aac:	7f a3       	std	Y+39, r23	; 0x27
    1aae:	88 a9       	ldd	r24, Y+48	; 0x30
    1ab0:	88 a7       	std	Y+40, r24	; 0x28
    1ab2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ab4:	99 a7       	std	Y+41, r25	; 0x29
    1ab6:	0a a9       	ldd	r16, Y+50	; 0x32
    1ab8:	0a a7       	std	Y+42, r16	; 0x2a
    1aba:	1b a9       	ldd	r17, Y+51	; 0x33
    1abc:	1b a7       	std	Y+43, r17	; 0x2b
    1abe:	2c a9       	ldd	r18, Y+52	; 0x34
    1ac0:	2c a7       	std	Y+44, r18	; 0x2c
    1ac2:	3d a9       	ldd	r19, Y+53	; 0x35
    1ac4:	3d a7       	std	Y+45, r19	; 0x2d
    1ac6:	4e a9       	ldd	r20, Y+54	; 0x36
    1ac8:	4e a7       	std	Y+46, r20	; 0x2e
    1aca:	5f a1       	ldd	r21, Y+39	; 0x27
    1acc:	6f 89       	ldd	r22, Y+23	; 0x17
    1ace:	56 0f       	add	r21, r22
    1ad0:	2b 96       	adiw	r28, 0x0b	; 11
    1ad2:	5f af       	std	Y+63, r21	; 0x3f
    1ad4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ad6:	71 e0       	ldi	r23, 0x01	; 1
    1ad8:	63 96       	adiw	r28, 0x13	; 19
    1ada:	7f af       	std	Y+63, r23	; 0x3f
    1adc:	63 97       	sbiw	r28, 0x13	; 19
    1ade:	2b 96       	adiw	r28, 0x0b	; 11
    1ae0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ae2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ae4:	9f a1       	ldd	r25, Y+39	; 0x27
    1ae6:	89 17       	cp	r24, r25
    1ae8:	18 f0       	brcs	.+6      	; 0x1af0 <Timer_vidSychDelay+0x318>
    1aea:	63 96       	adiw	r28, 0x13	; 19
    1aec:	1f ae       	std	Y+63, r1	; 0x3f
    1aee:	63 97       	sbiw	r28, 0x13	; 19
    1af0:	08 a5       	ldd	r16, Y+40	; 0x28
    1af2:	18 8d       	ldd	r17, Y+24	; 0x18
    1af4:	01 0f       	add	r16, r17
    1af6:	2c 96       	adiw	r28, 0x0c	; 12
    1af8:	0f af       	std	Y+63, r16	; 0x3f
    1afa:	2c 97       	sbiw	r28, 0x0c	; 12
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	64 96       	adiw	r28, 0x14	; 20
    1b00:	2f af       	std	Y+63, r18	; 0x3f
    1b02:	64 97       	sbiw	r28, 0x14	; 20
    1b04:	2c 96       	adiw	r28, 0x0c	; 12
    1b06:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b08:	2c 97       	sbiw	r28, 0x0c	; 12
    1b0a:	48 a5       	ldd	r20, Y+40	; 0x28
    1b0c:	34 17       	cp	r19, r20
    1b0e:	18 f0       	brcs	.+6      	; 0x1b16 <Timer_vidSychDelay+0x33e>
    1b10:	64 96       	adiw	r28, 0x14	; 20
    1b12:	1f ae       	std	Y+63, r1	; 0x3f
    1b14:	64 97       	sbiw	r28, 0x14	; 20
    1b16:	63 96       	adiw	r28, 0x13	; 19
    1b18:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b1a:	63 97       	sbiw	r28, 0x13	; 19
    1b1c:	2c 96       	adiw	r28, 0x0c	; 12
    1b1e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b20:	2c 97       	sbiw	r28, 0x0c	; 12
    1b22:	56 0f       	add	r21, r22
    1b24:	65 96       	adiw	r28, 0x15	; 21
    1b26:	5f af       	std	Y+63, r21	; 0x3f
    1b28:	65 97       	sbiw	r28, 0x15	; 21
    1b2a:	71 e0       	ldi	r23, 0x01	; 1
    1b2c:	66 96       	adiw	r28, 0x16	; 22
    1b2e:	7f af       	std	Y+63, r23	; 0x3f
    1b30:	66 97       	sbiw	r28, 0x16	; 22
    1b32:	65 96       	adiw	r28, 0x15	; 21
    1b34:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b36:	65 97       	sbiw	r28, 0x15	; 21
    1b38:	2c 96       	adiw	r28, 0x0c	; 12
    1b3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b3c:	2c 97       	sbiw	r28, 0x0c	; 12
    1b3e:	89 17       	cp	r24, r25
    1b40:	18 f0       	brcs	.+6      	; 0x1b48 <Timer_vidSychDelay+0x370>
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	1f ae       	std	Y+63, r1	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	64 96       	adiw	r28, 0x14	; 20
    1b4a:	0f ad       	ldd	r16, Y+63	; 0x3f
    1b4c:	64 97       	sbiw	r28, 0x14	; 20
    1b4e:	66 96       	adiw	r28, 0x16	; 22
    1b50:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b52:	66 97       	sbiw	r28, 0x16	; 22
    1b54:	01 2b       	or	r16, r17
    1b56:	64 96       	adiw	r28, 0x14	; 20
    1b58:	0f af       	std	Y+63, r16	; 0x3f
    1b5a:	64 97       	sbiw	r28, 0x14	; 20
    1b5c:	65 96       	adiw	r28, 0x15	; 21
    1b5e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b60:	65 97       	sbiw	r28, 0x15	; 21
    1b62:	2c 96       	adiw	r28, 0x0c	; 12
    1b64:	2f af       	std	Y+63, r18	; 0x3f
    1b66:	2c 97       	sbiw	r28, 0x0c	; 12
    1b68:	39 a5       	ldd	r19, Y+41	; 0x29
    1b6a:	49 8d       	ldd	r20, Y+25	; 0x19
    1b6c:	34 0f       	add	r19, r20
    1b6e:	2d 96       	adiw	r28, 0x0d	; 13
    1b70:	3f af       	std	Y+63, r19	; 0x3f
    1b72:	2d 97       	sbiw	r28, 0x0d	; 13
    1b74:	51 e0       	ldi	r21, 0x01	; 1
    1b76:	67 96       	adiw	r28, 0x17	; 23
    1b78:	5f af       	std	Y+63, r21	; 0x3f
    1b7a:	67 97       	sbiw	r28, 0x17	; 23
    1b7c:	2d 96       	adiw	r28, 0x0d	; 13
    1b7e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b80:	2d 97       	sbiw	r28, 0x0d	; 13
    1b82:	79 a5       	ldd	r23, Y+41	; 0x29
    1b84:	67 17       	cp	r22, r23
    1b86:	18 f0       	brcs	.+6      	; 0x1b8e <Timer_vidSychDelay+0x3b6>
    1b88:	67 96       	adiw	r28, 0x17	; 23
    1b8a:	1f ae       	std	Y+63, r1	; 0x3f
    1b8c:	67 97       	sbiw	r28, 0x17	; 23
    1b8e:	64 96       	adiw	r28, 0x14	; 20
    1b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b92:	64 97       	sbiw	r28, 0x14	; 20
    1b94:	2d 96       	adiw	r28, 0x0d	; 13
    1b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b98:	2d 97       	sbiw	r28, 0x0d	; 13
    1b9a:	89 0f       	add	r24, r25
    1b9c:	68 96       	adiw	r28, 0x18	; 24
    1b9e:	8f af       	std	Y+63, r24	; 0x3f
    1ba0:	68 97       	sbiw	r28, 0x18	; 24
    1ba2:	01 e0       	ldi	r16, 0x01	; 1
    1ba4:	69 96       	adiw	r28, 0x19	; 25
    1ba6:	0f af       	std	Y+63, r16	; 0x3f
    1ba8:	69 97       	sbiw	r28, 0x19	; 25
    1baa:	68 96       	adiw	r28, 0x18	; 24
    1bac:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bae:	68 97       	sbiw	r28, 0x18	; 24
    1bb0:	2d 96       	adiw	r28, 0x0d	; 13
    1bb2:	2f ad       	ldd	r18, Y+63	; 0x3f
    1bb4:	2d 97       	sbiw	r28, 0x0d	; 13
    1bb6:	12 17       	cp	r17, r18
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <Timer_vidSychDelay+0x3e8>
    1bba:	69 96       	adiw	r28, 0x19	; 25
    1bbc:	1f ae       	std	Y+63, r1	; 0x3f
    1bbe:	69 97       	sbiw	r28, 0x19	; 25
    1bc0:	67 96       	adiw	r28, 0x17	; 23
    1bc2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1bc4:	67 97       	sbiw	r28, 0x17	; 23
    1bc6:	69 96       	adiw	r28, 0x19	; 25
    1bc8:	4f ad       	ldd	r20, Y+63	; 0x3f
    1bca:	69 97       	sbiw	r28, 0x19	; 25
    1bcc:	34 2b       	or	r19, r20
    1bce:	67 96       	adiw	r28, 0x17	; 23
    1bd0:	3f af       	std	Y+63, r19	; 0x3f
    1bd2:	67 97       	sbiw	r28, 0x17	; 23
    1bd4:	68 96       	adiw	r28, 0x18	; 24
    1bd6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bd8:	68 97       	sbiw	r28, 0x18	; 24
    1bda:	2d 96       	adiw	r28, 0x0d	; 13
    1bdc:	5f af       	std	Y+63, r21	; 0x3f
    1bde:	2d 97       	sbiw	r28, 0x0d	; 13
    1be0:	6a a5       	ldd	r22, Y+42	; 0x2a
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	67 0f       	add	r22, r23
    1be6:	2e 96       	adiw	r28, 0x0e	; 14
    1be8:	6f af       	std	Y+63, r22	; 0x3f
    1bea:	2e 97       	sbiw	r28, 0x0e	; 14
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	6a 96       	adiw	r28, 0x1a	; 26
    1bf0:	8f af       	std	Y+63, r24	; 0x3f
    1bf2:	6a 97       	sbiw	r28, 0x1a	; 26
    1bf4:	2e 96       	adiw	r28, 0x0e	; 14
    1bf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bf8:	2e 97       	sbiw	r28, 0x0e	; 14
    1bfa:	0a a5       	ldd	r16, Y+42	; 0x2a
    1bfc:	90 17       	cp	r25, r16
    1bfe:	18 f0       	brcs	.+6      	; 0x1c06 <Timer_vidSychDelay+0x42e>
    1c00:	6a 96       	adiw	r28, 0x1a	; 26
    1c02:	1f ae       	std	Y+63, r1	; 0x3f
    1c04:	6a 97       	sbiw	r28, 0x1a	; 26
    1c06:	67 96       	adiw	r28, 0x17	; 23
    1c08:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c0a:	67 97       	sbiw	r28, 0x17	; 23
    1c0c:	2e 96       	adiw	r28, 0x0e	; 14
    1c0e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1c10:	2e 97       	sbiw	r28, 0x0e	; 14
    1c12:	12 0f       	add	r17, r18
    1c14:	6b 96       	adiw	r28, 0x1b	; 27
    1c16:	1f af       	std	Y+63, r17	; 0x3f
    1c18:	6b 97       	sbiw	r28, 0x1b	; 27
    1c1a:	31 e0       	ldi	r19, 0x01	; 1
    1c1c:	6c 96       	adiw	r28, 0x1c	; 28
    1c1e:	3f af       	std	Y+63, r19	; 0x3f
    1c20:	6c 97       	sbiw	r28, 0x1c	; 28
    1c22:	6b 96       	adiw	r28, 0x1b	; 27
    1c24:	4f ad       	ldd	r20, Y+63	; 0x3f
    1c26:	6b 97       	sbiw	r28, 0x1b	; 27
    1c28:	2e 96       	adiw	r28, 0x0e	; 14
    1c2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c2c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c2e:	45 17       	cp	r20, r21
    1c30:	18 f0       	brcs	.+6      	; 0x1c38 <Timer_vidSychDelay+0x460>
    1c32:	6c 96       	adiw	r28, 0x1c	; 28
    1c34:	1f ae       	std	Y+63, r1	; 0x3f
    1c36:	6c 97       	sbiw	r28, 0x1c	; 28
    1c38:	6a 96       	adiw	r28, 0x1a	; 26
    1c3a:	6f ad       	ldd	r22, Y+63	; 0x3f
    1c3c:	6a 97       	sbiw	r28, 0x1a	; 26
    1c3e:	6c 96       	adiw	r28, 0x1c	; 28
    1c40:	7f ad       	ldd	r23, Y+63	; 0x3f
    1c42:	6c 97       	sbiw	r28, 0x1c	; 28
    1c44:	67 2b       	or	r22, r23
    1c46:	6a 96       	adiw	r28, 0x1a	; 26
    1c48:	6f af       	std	Y+63, r22	; 0x3f
    1c4a:	6a 97       	sbiw	r28, 0x1a	; 26
    1c4c:	6b 96       	adiw	r28, 0x1b	; 27
    1c4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c50:	6b 97       	sbiw	r28, 0x1b	; 27
    1c52:	2e 96       	adiw	r28, 0x0e	; 14
    1c54:	8f af       	std	Y+63, r24	; 0x3f
    1c56:	2e 97       	sbiw	r28, 0x0e	; 14
    1c58:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c5a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c5c:	90 0f       	add	r25, r16
    1c5e:	2f 96       	adiw	r28, 0x0f	; 15
    1c60:	9f af       	std	Y+63, r25	; 0x3f
    1c62:	2f 97       	sbiw	r28, 0x0f	; 15
    1c64:	11 e0       	ldi	r17, 0x01	; 1
    1c66:	6d 96       	adiw	r28, 0x1d	; 29
    1c68:	1f af       	std	Y+63, r17	; 0x3f
    1c6a:	6d 97       	sbiw	r28, 0x1d	; 29
    1c6c:	2f 96       	adiw	r28, 0x0f	; 15
    1c6e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1c70:	2f 97       	sbiw	r28, 0x0f	; 15
    1c72:	3b a5       	ldd	r19, Y+43	; 0x2b
    1c74:	23 17       	cp	r18, r19
    1c76:	18 f0       	brcs	.+6      	; 0x1c7e <Timer_vidSychDelay+0x4a6>
    1c78:	6d 96       	adiw	r28, 0x1d	; 29
    1c7a:	1f ae       	std	Y+63, r1	; 0x3f
    1c7c:	6d 97       	sbiw	r28, 0x1d	; 29
    1c7e:	6a 96       	adiw	r28, 0x1a	; 26
    1c80:	4f ad       	ldd	r20, Y+63	; 0x3f
    1c82:	6a 97       	sbiw	r28, 0x1a	; 26
    1c84:	2f 96       	adiw	r28, 0x0f	; 15
    1c86:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c88:	2f 97       	sbiw	r28, 0x0f	; 15
    1c8a:	45 0f       	add	r20, r21
    1c8c:	6e 96       	adiw	r28, 0x1e	; 30
    1c8e:	4f af       	std	Y+63, r20	; 0x3f
    1c90:	6e 97       	sbiw	r28, 0x1e	; 30
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	6f 96       	adiw	r28, 0x1f	; 31
    1c96:	6f af       	std	Y+63, r22	; 0x3f
    1c98:	6f 97       	sbiw	r28, 0x1f	; 31
    1c9a:	6e 96       	adiw	r28, 0x1e	; 30
    1c9c:	7f ad       	ldd	r23, Y+63	; 0x3f
    1c9e:	6e 97       	sbiw	r28, 0x1e	; 30
    1ca0:	2f 96       	adiw	r28, 0x0f	; 15
    1ca2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ca4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ca6:	78 17       	cp	r23, r24
    1ca8:	18 f0       	brcs	.+6      	; 0x1cb0 <Timer_vidSychDelay+0x4d8>
    1caa:	6f 96       	adiw	r28, 0x1f	; 31
    1cac:	1f ae       	std	Y+63, r1	; 0x3f
    1cae:	6f 97       	sbiw	r28, 0x1f	; 31
    1cb0:	6d 96       	adiw	r28, 0x1d	; 29
    1cb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cb4:	6d 97       	sbiw	r28, 0x1d	; 29
    1cb6:	6f 96       	adiw	r28, 0x1f	; 31
    1cb8:	0f ad       	ldd	r16, Y+63	; 0x3f
    1cba:	6f 97       	sbiw	r28, 0x1f	; 31
    1cbc:	90 2b       	or	r25, r16
    1cbe:	6d 96       	adiw	r28, 0x1d	; 29
    1cc0:	9f af       	std	Y+63, r25	; 0x3f
    1cc2:	6d 97       	sbiw	r28, 0x1d	; 29
    1cc4:	6e 96       	adiw	r28, 0x1e	; 30
    1cc6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1cc8:	6e 97       	sbiw	r28, 0x1e	; 30
    1cca:	2f 96       	adiw	r28, 0x0f	; 15
    1ccc:	1f af       	std	Y+63, r17	; 0x3f
    1cce:	2f 97       	sbiw	r28, 0x0f	; 15
    1cd0:	2c a5       	ldd	r18, Y+44	; 0x2c
    1cd2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1cd4:	23 0f       	add	r18, r19
    1cd6:	60 96       	adiw	r28, 0x10	; 16
    1cd8:	2f af       	std	Y+63, r18	; 0x3f
    1cda:	60 97       	sbiw	r28, 0x10	; 16
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	a0 96       	adiw	r28, 0x20	; 32
    1ce0:	4f af       	std	Y+63, r20	; 0x3f
    1ce2:	a0 97       	sbiw	r28, 0x20	; 32
    1ce4:	60 96       	adiw	r28, 0x10	; 16
    1ce6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ce8:	60 97       	sbiw	r28, 0x10	; 16
    1cea:	6c a5       	ldd	r22, Y+44	; 0x2c
    1cec:	56 17       	cp	r21, r22
    1cee:	18 f0       	brcs	.+6      	; 0x1cf6 <Timer_vidSychDelay+0x51e>
    1cf0:	a0 96       	adiw	r28, 0x20	; 32
    1cf2:	1f ae       	std	Y+63, r1	; 0x3f
    1cf4:	a0 97       	sbiw	r28, 0x20	; 32
    1cf6:	6d 96       	adiw	r28, 0x1d	; 29
    1cf8:	7f ad       	ldd	r23, Y+63	; 0x3f
    1cfa:	6d 97       	sbiw	r28, 0x1d	; 29
    1cfc:	60 96       	adiw	r28, 0x10	; 16
    1cfe:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d00:	60 97       	sbiw	r28, 0x10	; 16
    1d02:	78 0f       	add	r23, r24
    1d04:	a1 96       	adiw	r28, 0x21	; 33
    1d06:	7f af       	std	Y+63, r23	; 0x3f
    1d08:	a1 97       	sbiw	r28, 0x21	; 33
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	a2 96       	adiw	r28, 0x22	; 34
    1d0e:	9f af       	std	Y+63, r25	; 0x3f
    1d10:	a2 97       	sbiw	r28, 0x22	; 34
    1d12:	a1 96       	adiw	r28, 0x21	; 33
    1d14:	0f ad       	ldd	r16, Y+63	; 0x3f
    1d16:	a1 97       	sbiw	r28, 0x21	; 33
    1d18:	60 96       	adiw	r28, 0x10	; 16
    1d1a:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d1c:	60 97       	sbiw	r28, 0x10	; 16
    1d1e:	01 17       	cp	r16, r17
    1d20:	18 f0       	brcs	.+6      	; 0x1d28 <Timer_vidSychDelay+0x550>
    1d22:	a2 96       	adiw	r28, 0x22	; 34
    1d24:	1f ae       	std	Y+63, r1	; 0x3f
    1d26:	a2 97       	sbiw	r28, 0x22	; 34
    1d28:	a0 96       	adiw	r28, 0x20	; 32
    1d2a:	2f ad       	ldd	r18, Y+63	; 0x3f
    1d2c:	a0 97       	sbiw	r28, 0x20	; 32
    1d2e:	a2 96       	adiw	r28, 0x22	; 34
    1d30:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d32:	a2 97       	sbiw	r28, 0x22	; 34
    1d34:	23 2b       	or	r18, r19
    1d36:	a0 96       	adiw	r28, 0x20	; 32
    1d38:	2f af       	std	Y+63, r18	; 0x3f
    1d3a:	a0 97       	sbiw	r28, 0x20	; 32
    1d3c:	a1 96       	adiw	r28, 0x21	; 33
    1d3e:	4f ad       	ldd	r20, Y+63	; 0x3f
    1d40:	a1 97       	sbiw	r28, 0x21	; 33
    1d42:	60 96       	adiw	r28, 0x10	; 16
    1d44:	4f af       	std	Y+63, r20	; 0x3f
    1d46:	60 97       	sbiw	r28, 0x10	; 16
    1d48:	5d a5       	ldd	r21, Y+45	; 0x2d
    1d4a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d4c:	56 0f       	add	r21, r22
    1d4e:	61 96       	adiw	r28, 0x11	; 17
    1d50:	5f af       	std	Y+63, r21	; 0x3f
    1d52:	61 97       	sbiw	r28, 0x11	; 17
    1d54:	71 e0       	ldi	r23, 0x01	; 1
    1d56:	a3 96       	adiw	r28, 0x23	; 35
    1d58:	7f af       	std	Y+63, r23	; 0x3f
    1d5a:	a3 97       	sbiw	r28, 0x23	; 35
    1d5c:	61 96       	adiw	r28, 0x11	; 17
    1d5e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d60:	61 97       	sbiw	r28, 0x11	; 17
    1d62:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d64:	89 17       	cp	r24, r25
    1d66:	18 f0       	brcs	.+6      	; 0x1d6e <Timer_vidSychDelay+0x596>
    1d68:	a3 96       	adiw	r28, 0x23	; 35
    1d6a:	1f ae       	std	Y+63, r1	; 0x3f
    1d6c:	a3 97       	sbiw	r28, 0x23	; 35
    1d6e:	a0 96       	adiw	r28, 0x20	; 32
    1d70:	0f ad       	ldd	r16, Y+63	; 0x3f
    1d72:	a0 97       	sbiw	r28, 0x20	; 32
    1d74:	61 96       	adiw	r28, 0x11	; 17
    1d76:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d78:	61 97       	sbiw	r28, 0x11	; 17
    1d7a:	01 0f       	add	r16, r17
    1d7c:	a4 96       	adiw	r28, 0x24	; 36
    1d7e:	0f af       	std	Y+63, r16	; 0x3f
    1d80:	a4 97       	sbiw	r28, 0x24	; 36
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	a5 96       	adiw	r28, 0x25	; 37
    1d86:	2f af       	std	Y+63, r18	; 0x3f
    1d88:	a5 97       	sbiw	r28, 0x25	; 37
    1d8a:	a4 96       	adiw	r28, 0x24	; 36
    1d8c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d8e:	a4 97       	sbiw	r28, 0x24	; 36
    1d90:	61 96       	adiw	r28, 0x11	; 17
    1d92:	4f ad       	ldd	r20, Y+63	; 0x3f
    1d94:	61 97       	sbiw	r28, 0x11	; 17
    1d96:	34 17       	cp	r19, r20
    1d98:	18 f0       	brcs	.+6      	; 0x1da0 <Timer_vidSychDelay+0x5c8>
    1d9a:	a5 96       	adiw	r28, 0x25	; 37
    1d9c:	1f ae       	std	Y+63, r1	; 0x3f
    1d9e:	a5 97       	sbiw	r28, 0x25	; 37
    1da0:	a3 96       	adiw	r28, 0x23	; 35
    1da2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da4:	a3 97       	sbiw	r28, 0x23	; 35
    1da6:	a5 96       	adiw	r28, 0x25	; 37
    1da8:	6f ad       	ldd	r22, Y+63	; 0x3f
    1daa:	a5 97       	sbiw	r28, 0x25	; 37
    1dac:	56 2b       	or	r21, r22
    1dae:	a3 96       	adiw	r28, 0x23	; 35
    1db0:	5f af       	std	Y+63, r21	; 0x3f
    1db2:	a3 97       	sbiw	r28, 0x23	; 35
    1db4:	a4 96       	adiw	r28, 0x24	; 36
    1db6:	7f ad       	ldd	r23, Y+63	; 0x3f
    1db8:	a4 97       	sbiw	r28, 0x24	; 36
    1dba:	61 96       	adiw	r28, 0x11	; 17
    1dbc:	7f af       	std	Y+63, r23	; 0x3f
    1dbe:	61 97       	sbiw	r28, 0x11	; 17
    1dc0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc4:	89 0f       	add	r24, r25
    1dc6:	62 96       	adiw	r28, 0x12	; 18
    1dc8:	8f af       	std	Y+63, r24	; 0x3f
    1dca:	62 97       	sbiw	r28, 0x12	; 18
    1dcc:	a3 96       	adiw	r28, 0x23	; 35
    1dce:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dd0:	a3 97       	sbiw	r28, 0x23	; 35
    1dd2:	62 96       	adiw	r28, 0x12	; 18
    1dd4:	0f ad       	ldd	r16, Y+63	; 0x3f
    1dd6:	62 97       	sbiw	r28, 0x12	; 18
    1dd8:	80 0f       	add	r24, r16
    1dda:	62 96       	adiw	r28, 0x12	; 18
    1ddc:	8f af       	std	Y+63, r24	; 0x3f
    1dde:	62 97       	sbiw	r28, 0x12	; 18
    1de0:	2b 96       	adiw	r28, 0x0b	; 11
    1de2:	1f ad       	ldd	r17, Y+63	; 0x3f
    1de4:	2b 97       	sbiw	r28, 0x0b	; 11
    1de6:	1f a3       	std	Y+39, r17	; 0x27
    1de8:	2c 96       	adiw	r28, 0x0c	; 12
    1dea:	2f ad       	ldd	r18, Y+63	; 0x3f
    1dec:	2c 97       	sbiw	r28, 0x0c	; 12
    1dee:	28 a7       	std	Y+40, r18	; 0x28
    1df0:	2d 96       	adiw	r28, 0x0d	; 13
    1df2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1df4:	2d 97       	sbiw	r28, 0x0d	; 13
    1df6:	39 a7       	std	Y+41, r19	; 0x29
    1df8:	2e 96       	adiw	r28, 0x0e	; 14
    1dfa:	4f ad       	ldd	r20, Y+63	; 0x3f
    1dfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1dfe:	4a a7       	std	Y+42, r20	; 0x2a
    1e00:	2f 96       	adiw	r28, 0x0f	; 15
    1e02:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e04:	2f 97       	sbiw	r28, 0x0f	; 15
    1e06:	5b a7       	std	Y+43, r21	; 0x2b
    1e08:	60 96       	adiw	r28, 0x10	; 16
    1e0a:	6f ad       	ldd	r22, Y+63	; 0x3f
    1e0c:	60 97       	sbiw	r28, 0x10	; 16
    1e0e:	6c a7       	std	Y+44, r22	; 0x2c
    1e10:	61 96       	adiw	r28, 0x11	; 17
    1e12:	7f ad       	ldd	r23, Y+63	; 0x3f
    1e14:	61 97       	sbiw	r28, 0x11	; 17
    1e16:	7d a7       	std	Y+45, r23	; 0x2d
    1e18:	62 96       	adiw	r28, 0x12	; 18
    1e1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e1c:	62 97       	sbiw	r28, 0x12	; 18
    1e1e:	8e a7       	std	Y+46, r24	; 0x2e
    1e20:	2f a1       	ldd	r18, Y+39	; 0x27
    1e22:	38 a5       	ldd	r19, Y+40	; 0x28
    1e24:	49 a5       	ldd	r20, Y+41	; 0x29
    1e26:	5a a5       	ldd	r21, Y+42	; 0x2a
    1e28:	6b a5       	ldd	r22, Y+43	; 0x2b
    1e2a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1e2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e30:	07 e0       	ldi	r16, 0x07	; 7
    1e32:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    1e36:	22 2e       	mov	r2, r18
    1e38:	33 2e       	mov	r3, r19
    1e3a:	44 2e       	mov	r4, r20
    1e3c:	55 2e       	mov	r5, r21
    1e3e:	66 2e       	mov	r6, r22
    1e40:	77 2e       	mov	r7, r23
    1e42:	88 2e       	mov	r8, r24
    1e44:	99 2e       	mov	r9, r25
    1e46:	a2 2c       	mov	r10, r2
    1e48:	b3 2c       	mov	r11, r3
    1e4a:	c4 2c       	mov	r12, r4
    1e4c:	d5 2c       	mov	r13, r5
    1e4e:	e6 2c       	mov	r14, r6
    1e50:	f7 2c       	mov	r15, r7
    1e52:	08 2d       	mov	r16, r8
    1e54:	19 2d       	mov	r17, r9
    1e56:	2a 2d       	mov	r18, r10
    1e58:	3b 2d       	mov	r19, r11
    1e5a:	4c 2d       	mov	r20, r12
    1e5c:	5d 2d       	mov	r21, r13
    1e5e:	6e 2d       	mov	r22, r14
    1e60:	7f 2d       	mov	r23, r15
    1e62:	80 2f       	mov	r24, r16
    1e64:	91 2f       	mov	r25, r17
    1e66:	03 e0       	ldi	r16, 0x03	; 3
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    1e6c:	a2 2e       	mov	r10, r18
    1e6e:	b3 2e       	mov	r11, r19
    1e70:	c4 2e       	mov	r12, r20
    1e72:	d5 2e       	mov	r13, r21
    1e74:	e6 2e       	mov	r14, r22
    1e76:	f7 2e       	mov	r15, r23
    1e78:	08 2f       	mov	r16, r24
    1e7a:	19 2f       	mov	r17, r25
    1e7c:	aa 86       	std	Y+10, r10	; 0x0a
    1e7e:	bb 86       	std	Y+11, r11	; 0x0b
    1e80:	cc 86       	std	Y+12, r12	; 0x0c
    1e82:	dd 86       	std	Y+13, r13	; 0x0d
    1e84:	ee 86       	std	Y+14, r14	; 0x0e
    1e86:	ff 86       	std	Y+15, r15	; 0x0f
    1e88:	08 8b       	std	Y+16, r16	; 0x10
    1e8a:	19 8b       	std	Y+17, r17	; 0x11
    u32 u32OvfCounts = (u64Counts + 255LLU) / 256LLU;
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	a6 96       	adiw	r28, 0x26	; 38
    1e90:	9f af       	std	Y+63, r25	; 0x3f
    1e92:	a6 97       	sbiw	r28, 0x26	; 38
    1e94:	0b 85       	ldd	r16, Y+11	; 0x0b
    1e96:	a7 96       	adiw	r28, 0x27	; 39
    1e98:	0f af       	std	Y+63, r16	; 0x3f
    1e9a:	a7 97       	sbiw	r28, 0x27	; 39
    1e9c:	1c 85       	ldd	r17, Y+12	; 0x0c
    1e9e:	a8 96       	adiw	r28, 0x28	; 40
    1ea0:	1f af       	std	Y+63, r17	; 0x3f
    1ea2:	a8 97       	sbiw	r28, 0x28	; 40
    1ea4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ea6:	a9 96       	adiw	r28, 0x29	; 41
    1ea8:	2f af       	std	Y+63, r18	; 0x3f
    1eaa:	a9 97       	sbiw	r28, 0x29	; 41
    1eac:	3e 85       	ldd	r19, Y+14	; 0x0e
    1eae:	aa 96       	adiw	r28, 0x2a	; 42
    1eb0:	3f af       	std	Y+63, r19	; 0x3f
    1eb2:	aa 97       	sbiw	r28, 0x2a	; 42
    1eb4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1eb6:	ab 96       	adiw	r28, 0x2b	; 43
    1eb8:	4f af       	std	Y+63, r20	; 0x3f
    1eba:	ab 97       	sbiw	r28, 0x2b	; 43
    1ebc:	58 89       	ldd	r21, Y+16	; 0x10
    1ebe:	ac 96       	adiw	r28, 0x2c	; 44
    1ec0:	5f af       	std	Y+63, r21	; 0x3f
    1ec2:	ac 97       	sbiw	r28, 0x2c	; 44
    1ec4:	69 89       	ldd	r22, Y+17	; 0x11
    1ec6:	ad 96       	adiw	r28, 0x2d	; 45
    1ec8:	6f af       	std	Y+63, r22	; 0x3f
    1eca:	ad 97       	sbiw	r28, 0x2d	; 45
    1ecc:	7f ef       	ldi	r23, 0xFF	; 255
    1ece:	ae 96       	adiw	r28, 0x2e	; 46
    1ed0:	7f af       	std	Y+63, r23	; 0x3f
    1ed2:	ae 97       	sbiw	r28, 0x2e	; 46
    1ed4:	af 96       	adiw	r28, 0x2f	; 47
    1ed6:	1f ae       	std	Y+63, r1	; 0x3f
    1ed8:	af 97       	sbiw	r28, 0x2f	; 47
    1eda:	e0 96       	adiw	r28, 0x30	; 48
    1edc:	1f ae       	std	Y+63, r1	; 0x3f
    1ede:	e0 97       	sbiw	r28, 0x30	; 48
    1ee0:	e1 96       	adiw	r28, 0x31	; 49
    1ee2:	1f ae       	std	Y+63, r1	; 0x3f
    1ee4:	e1 97       	sbiw	r28, 0x31	; 49
    1ee6:	e2 96       	adiw	r28, 0x32	; 50
    1ee8:	1f ae       	std	Y+63, r1	; 0x3f
    1eea:	e2 97       	sbiw	r28, 0x32	; 50
    1eec:	e3 96       	adiw	r28, 0x33	; 51
    1eee:	1f ae       	std	Y+63, r1	; 0x3f
    1ef0:	e3 97       	sbiw	r28, 0x33	; 51
    1ef2:	e4 96       	adiw	r28, 0x34	; 52
    1ef4:	1f ae       	std	Y+63, r1	; 0x3f
    1ef6:	e4 97       	sbiw	r28, 0x34	; 52
    1ef8:	e5 96       	adiw	r28, 0x35	; 53
    1efa:	1f ae       	std	Y+63, r1	; 0x3f
    1efc:	e5 97       	sbiw	r28, 0x35	; 53
    1efe:	a6 96       	adiw	r28, 0x26	; 38
    1f00:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f02:	a6 97       	sbiw	r28, 0x26	; 38
    1f04:	ae 96       	adiw	r28, 0x2e	; 46
    1f06:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f08:	ae 97       	sbiw	r28, 0x2e	; 46
    1f0a:	89 0f       	add	r24, r25
    1f0c:	e6 96       	adiw	r28, 0x36	; 54
    1f0e:	8f af       	std	Y+63, r24	; 0x3f
    1f10:	e6 97       	sbiw	r28, 0x36	; 54
    1f12:	01 e0       	ldi	r16, 0x01	; 1
    1f14:	ee 96       	adiw	r28, 0x3e	; 62
    1f16:	0f af       	std	Y+63, r16	; 0x3f
    1f18:	ee 97       	sbiw	r28, 0x3e	; 62
    1f1a:	e6 96       	adiw	r28, 0x36	; 54
    1f1c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1f1e:	e6 97       	sbiw	r28, 0x36	; 54
    1f20:	a6 96       	adiw	r28, 0x26	; 38
    1f22:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f24:	a6 97       	sbiw	r28, 0x26	; 38
    1f26:	12 17       	cp	r17, r18
    1f28:	18 f0       	brcs	.+6      	; 0x1f30 <Timer_vidSychDelay+0x758>
    1f2a:	ee 96       	adiw	r28, 0x3e	; 62
    1f2c:	1f ae       	std	Y+63, r1	; 0x3f
    1f2e:	ee 97       	sbiw	r28, 0x3e	; 62
    1f30:	a7 96       	adiw	r28, 0x27	; 39
    1f32:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f34:	a7 97       	sbiw	r28, 0x27	; 39
    1f36:	af 96       	adiw	r28, 0x2f	; 47
    1f38:	4f ad       	ldd	r20, Y+63	; 0x3f
    1f3a:	af 97       	sbiw	r28, 0x2f	; 47
    1f3c:	34 0f       	add	r19, r20
    1f3e:	e7 96       	adiw	r28, 0x37	; 55
    1f40:	3f af       	std	Y+63, r19	; 0x3f
    1f42:	e7 97       	sbiw	r28, 0x37	; 55
    1f44:	51 e0       	ldi	r21, 0x01	; 1
    1f46:	ef 96       	adiw	r28, 0x3f	; 63
    1f48:	5f af       	std	Y+63, r21	; 0x3f
    1f4a:	ef 97       	sbiw	r28, 0x3f	; 63
    1f4c:	e7 96       	adiw	r28, 0x37	; 55
    1f4e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1f50:	e7 97       	sbiw	r28, 0x37	; 55
    1f52:	a7 96       	adiw	r28, 0x27	; 39
    1f54:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f56:	a7 97       	sbiw	r28, 0x27	; 39
    1f58:	67 17       	cp	r22, r23
    1f5a:	18 f0       	brcs	.+6      	; 0x1f62 <Timer_vidSychDelay+0x78a>
    1f5c:	ef 96       	adiw	r28, 0x3f	; 63
    1f5e:	1f ae       	std	Y+63, r1	; 0x3f
    1f60:	ef 97       	sbiw	r28, 0x3f	; 63
    1f62:	ee 96       	adiw	r28, 0x3e	; 62
    1f64:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f66:	ee 97       	sbiw	r28, 0x3e	; 62
    1f68:	e7 96       	adiw	r28, 0x37	; 55
    1f6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f6c:	e7 97       	sbiw	r28, 0x37	; 55
    1f6e:	89 0f       	add	r24, r25
    1f70:	c1 58       	subi	r28, 0x81	; 129
    1f72:	df 4f       	sbci	r29, 0xFF	; 255
    1f74:	88 83       	st	Y, r24
    1f76:	cf 57       	subi	r28, 0x7F	; 127
    1f78:	d0 40       	sbci	r29, 0x00	; 0
    1f7a:	01 e0       	ldi	r16, 0x01	; 1
    1f7c:	c0 58       	subi	r28, 0x80	; 128
    1f7e:	df 4f       	sbci	r29, 0xFF	; 255
    1f80:	08 83       	st	Y, r16
    1f82:	c0 58       	subi	r28, 0x80	; 128
    1f84:	d0 40       	sbci	r29, 0x00	; 0
    1f86:	c1 58       	subi	r28, 0x81	; 129
    1f88:	df 4f       	sbci	r29, 0xFF	; 255
    1f8a:	18 81       	ld	r17, Y
    1f8c:	cf 57       	subi	r28, 0x7F	; 127
    1f8e:	d0 40       	sbci	r29, 0x00	; 0
    1f90:	e7 96       	adiw	r28, 0x37	; 55
    1f92:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f94:	e7 97       	sbiw	r28, 0x37	; 55
    1f96:	12 17       	cp	r17, r18
    1f98:	28 f0       	brcs	.+10     	; 0x1fa4 <Timer_vidSychDelay+0x7cc>
    1f9a:	c0 58       	subi	r28, 0x80	; 128
    1f9c:	df 4f       	sbci	r29, 0xFF	; 255
    1f9e:	18 82       	st	Y, r1
    1fa0:	c0 58       	subi	r28, 0x80	; 128
    1fa2:	d0 40       	sbci	r29, 0x00	; 0
    1fa4:	ef 96       	adiw	r28, 0x3f	; 63
    1fa6:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fa8:	ef 97       	sbiw	r28, 0x3f	; 63
    1faa:	c0 58       	subi	r28, 0x80	; 128
    1fac:	df 4f       	sbci	r29, 0xFF	; 255
    1fae:	48 81       	ld	r20, Y
    1fb0:	c0 58       	subi	r28, 0x80	; 128
    1fb2:	d0 40       	sbci	r29, 0x00	; 0
    1fb4:	34 2b       	or	r19, r20
    1fb6:	ef 96       	adiw	r28, 0x3f	; 63
    1fb8:	3f af       	std	Y+63, r19	; 0x3f
    1fba:	ef 97       	sbiw	r28, 0x3f	; 63
    1fbc:	c1 58       	subi	r28, 0x81	; 129
    1fbe:	df 4f       	sbci	r29, 0xFF	; 255
    1fc0:	58 81       	ld	r21, Y
    1fc2:	cf 57       	subi	r28, 0x7F	; 127
    1fc4:	d0 40       	sbci	r29, 0x00	; 0
    1fc6:	e7 96       	adiw	r28, 0x37	; 55
    1fc8:	5f af       	std	Y+63, r21	; 0x3f
    1fca:	e7 97       	sbiw	r28, 0x37	; 55
    1fcc:	a8 96       	adiw	r28, 0x28	; 40
    1fce:	6f ad       	ldd	r22, Y+63	; 0x3f
    1fd0:	a8 97       	sbiw	r28, 0x28	; 40
    1fd2:	e0 96       	adiw	r28, 0x30	; 48
    1fd4:	7f ad       	ldd	r23, Y+63	; 0x3f
    1fd6:	e0 97       	sbiw	r28, 0x30	; 48
    1fd8:	67 0f       	add	r22, r23
    1fda:	e8 96       	adiw	r28, 0x38	; 56
    1fdc:	6f af       	std	Y+63, r22	; 0x3f
    1fde:	e8 97       	sbiw	r28, 0x38	; 56
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	cf 57       	subi	r28, 0x7F	; 127
    1fe4:	df 4f       	sbci	r29, 0xFF	; 255
    1fe6:	88 83       	st	Y, r24
    1fe8:	c1 58       	subi	r28, 0x81	; 129
    1fea:	d0 40       	sbci	r29, 0x00	; 0
    1fec:	e8 96       	adiw	r28, 0x38	; 56
    1fee:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ff0:	e8 97       	sbiw	r28, 0x38	; 56
    1ff2:	a8 96       	adiw	r28, 0x28	; 40
    1ff4:	0f ad       	ldd	r16, Y+63	; 0x3f
    1ff6:	a8 97       	sbiw	r28, 0x28	; 40
    1ff8:	90 17       	cp	r25, r16
    1ffa:	28 f0       	brcs	.+10     	; 0x2006 <Timer_vidSychDelay+0x82e>
    1ffc:	cf 57       	subi	r28, 0x7F	; 127
    1ffe:	df 4f       	sbci	r29, 0xFF	; 255
    2000:	18 82       	st	Y, r1
    2002:	c1 58       	subi	r28, 0x81	; 129
    2004:	d0 40       	sbci	r29, 0x00	; 0
    2006:	ef 96       	adiw	r28, 0x3f	; 63
    2008:	1f ad       	ldd	r17, Y+63	; 0x3f
    200a:	ef 97       	sbiw	r28, 0x3f	; 63
    200c:	e8 96       	adiw	r28, 0x38	; 56
    200e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2010:	e8 97       	sbiw	r28, 0x38	; 56
    2012:	12 0f       	add	r17, r18
    2014:	ce 57       	subi	r28, 0x7E	; 126
    2016:	df 4f       	sbci	r29, 0xFF	; 255
    2018:	18 83       	st	Y, r17
    201a:	c2 58       	subi	r28, 0x82	; 130
    201c:	d0 40       	sbci	r29, 0x00	; 0
    201e:	31 e0       	ldi	r19, 0x01	; 1
    2020:	cd 57       	subi	r28, 0x7D	; 125
    2022:	df 4f       	sbci	r29, 0xFF	; 255
    2024:	38 83       	st	Y, r19
    2026:	c3 58       	subi	r28, 0x83	; 131
    2028:	d0 40       	sbci	r29, 0x00	; 0
    202a:	ce 57       	subi	r28, 0x7E	; 126
    202c:	df 4f       	sbci	r29, 0xFF	; 255
    202e:	48 81       	ld	r20, Y
    2030:	c2 58       	subi	r28, 0x82	; 130
    2032:	d0 40       	sbci	r29, 0x00	; 0
    2034:	e8 96       	adiw	r28, 0x38	; 56
    2036:	5f ad       	ldd	r21, Y+63	; 0x3f
    2038:	e8 97       	sbiw	r28, 0x38	; 56
    203a:	45 17       	cp	r20, r21
    203c:	28 f0       	brcs	.+10     	; 0x2048 <Timer_vidSychDelay+0x870>
    203e:	cd 57       	subi	r28, 0x7D	; 125
    2040:	df 4f       	sbci	r29, 0xFF	; 255
    2042:	18 82       	st	Y, r1
    2044:	c3 58       	subi	r28, 0x83	; 131
    2046:	d0 40       	sbci	r29, 0x00	; 0
    2048:	cf 57       	subi	r28, 0x7F	; 127
    204a:	df 4f       	sbci	r29, 0xFF	; 255
    204c:	68 81       	ld	r22, Y
    204e:	c1 58       	subi	r28, 0x81	; 129
    2050:	d0 40       	sbci	r29, 0x00	; 0
    2052:	cd 57       	subi	r28, 0x7D	; 125
    2054:	df 4f       	sbci	r29, 0xFF	; 255
    2056:	78 81       	ld	r23, Y
    2058:	c3 58       	subi	r28, 0x83	; 131
    205a:	d0 40       	sbci	r29, 0x00	; 0
    205c:	67 2b       	or	r22, r23
    205e:	cf 57       	subi	r28, 0x7F	; 127
    2060:	df 4f       	sbci	r29, 0xFF	; 255
    2062:	68 83       	st	Y, r22
    2064:	c1 58       	subi	r28, 0x81	; 129
    2066:	d0 40       	sbci	r29, 0x00	; 0
    2068:	ce 57       	subi	r28, 0x7E	; 126
    206a:	df 4f       	sbci	r29, 0xFF	; 255
    206c:	88 81       	ld	r24, Y
    206e:	c2 58       	subi	r28, 0x82	; 130
    2070:	d0 40       	sbci	r29, 0x00	; 0
    2072:	e8 96       	adiw	r28, 0x38	; 56
    2074:	8f af       	std	Y+63, r24	; 0x3f
    2076:	e8 97       	sbiw	r28, 0x38	; 56
    2078:	a9 96       	adiw	r28, 0x29	; 41
    207a:	9f ad       	ldd	r25, Y+63	; 0x3f
    207c:	a9 97       	sbiw	r28, 0x29	; 41
    207e:	e1 96       	adiw	r28, 0x31	; 49
    2080:	0f ad       	ldd	r16, Y+63	; 0x3f
    2082:	e1 97       	sbiw	r28, 0x31	; 49
    2084:	90 0f       	add	r25, r16
    2086:	e9 96       	adiw	r28, 0x39	; 57
    2088:	9f af       	std	Y+63, r25	; 0x3f
    208a:	e9 97       	sbiw	r28, 0x39	; 57
    208c:	11 e0       	ldi	r17, 0x01	; 1
    208e:	cc 57       	subi	r28, 0x7C	; 124
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	18 83       	st	Y, r17
    2094:	c4 58       	subi	r28, 0x84	; 132
    2096:	d0 40       	sbci	r29, 0x00	; 0
    2098:	e9 96       	adiw	r28, 0x39	; 57
    209a:	2f ad       	ldd	r18, Y+63	; 0x3f
    209c:	e9 97       	sbiw	r28, 0x39	; 57
    209e:	a9 96       	adiw	r28, 0x29	; 41
    20a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    20a2:	a9 97       	sbiw	r28, 0x29	; 41
    20a4:	23 17       	cp	r18, r19
    20a6:	28 f0       	brcs	.+10     	; 0x20b2 <Timer_vidSychDelay+0x8da>
    20a8:	cc 57       	subi	r28, 0x7C	; 124
    20aa:	df 4f       	sbci	r29, 0xFF	; 255
    20ac:	18 82       	st	Y, r1
    20ae:	c4 58       	subi	r28, 0x84	; 132
    20b0:	d0 40       	sbci	r29, 0x00	; 0
    20b2:	cf 57       	subi	r28, 0x7F	; 127
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	48 81       	ld	r20, Y
    20b8:	c1 58       	subi	r28, 0x81	; 129
    20ba:	d0 40       	sbci	r29, 0x00	; 0
    20bc:	e9 96       	adiw	r28, 0x39	; 57
    20be:	5f ad       	ldd	r21, Y+63	; 0x3f
    20c0:	e9 97       	sbiw	r28, 0x39	; 57
    20c2:	45 0f       	add	r20, r21
    20c4:	cb 57       	subi	r28, 0x7B	; 123
    20c6:	df 4f       	sbci	r29, 0xFF	; 255
    20c8:	48 83       	st	Y, r20
    20ca:	c5 58       	subi	r28, 0x85	; 133
    20cc:	d0 40       	sbci	r29, 0x00	; 0
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	ca 57       	subi	r28, 0x7A	; 122
    20d2:	df 4f       	sbci	r29, 0xFF	; 255
    20d4:	68 83       	st	Y, r22
    20d6:	c6 58       	subi	r28, 0x86	; 134
    20d8:	d0 40       	sbci	r29, 0x00	; 0
    20da:	cb 57       	subi	r28, 0x7B	; 123
    20dc:	df 4f       	sbci	r29, 0xFF	; 255
    20de:	78 81       	ld	r23, Y
    20e0:	c5 58       	subi	r28, 0x85	; 133
    20e2:	d0 40       	sbci	r29, 0x00	; 0
    20e4:	e9 96       	adiw	r28, 0x39	; 57
    20e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    20e8:	e9 97       	sbiw	r28, 0x39	; 57
    20ea:	78 17       	cp	r23, r24
    20ec:	28 f0       	brcs	.+10     	; 0x20f8 <Timer_vidSychDelay+0x920>
    20ee:	ca 57       	subi	r28, 0x7A	; 122
    20f0:	df 4f       	sbci	r29, 0xFF	; 255
    20f2:	18 82       	st	Y, r1
    20f4:	c6 58       	subi	r28, 0x86	; 134
    20f6:	d0 40       	sbci	r29, 0x00	; 0
    20f8:	cc 57       	subi	r28, 0x7C	; 124
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	98 81       	ld	r25, Y
    20fe:	c4 58       	subi	r28, 0x84	; 132
    2100:	d0 40       	sbci	r29, 0x00	; 0
    2102:	ca 57       	subi	r28, 0x7A	; 122
    2104:	df 4f       	sbci	r29, 0xFF	; 255
    2106:	08 81       	ld	r16, Y
    2108:	c6 58       	subi	r28, 0x86	; 134
    210a:	d0 40       	sbci	r29, 0x00	; 0
    210c:	90 2b       	or	r25, r16
    210e:	cc 57       	subi	r28, 0x7C	; 124
    2110:	df 4f       	sbci	r29, 0xFF	; 255
    2112:	98 83       	st	Y, r25
    2114:	c4 58       	subi	r28, 0x84	; 132
    2116:	d0 40       	sbci	r29, 0x00	; 0
    2118:	cb 57       	subi	r28, 0x7B	; 123
    211a:	df 4f       	sbci	r29, 0xFF	; 255
    211c:	18 81       	ld	r17, Y
    211e:	c5 58       	subi	r28, 0x85	; 133
    2120:	d0 40       	sbci	r29, 0x00	; 0
    2122:	e9 96       	adiw	r28, 0x39	; 57
    2124:	1f af       	std	Y+63, r17	; 0x3f
    2126:	e9 97       	sbiw	r28, 0x39	; 57
    2128:	aa 96       	adiw	r28, 0x2a	; 42
    212a:	2f ad       	ldd	r18, Y+63	; 0x3f
    212c:	aa 97       	sbiw	r28, 0x2a	; 42
    212e:	e2 96       	adiw	r28, 0x32	; 50
    2130:	3f ad       	ldd	r19, Y+63	; 0x3f
    2132:	e2 97       	sbiw	r28, 0x32	; 50
    2134:	23 0f       	add	r18, r19
    2136:	ea 96       	adiw	r28, 0x3a	; 58
    2138:	2f af       	std	Y+63, r18	; 0x3f
    213a:	ea 97       	sbiw	r28, 0x3a	; 58
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	c9 57       	subi	r28, 0x79	; 121
    2140:	df 4f       	sbci	r29, 0xFF	; 255
    2142:	48 83       	st	Y, r20
    2144:	c7 58       	subi	r28, 0x87	; 135
    2146:	d0 40       	sbci	r29, 0x00	; 0
    2148:	ea 96       	adiw	r28, 0x3a	; 58
    214a:	5f ad       	ldd	r21, Y+63	; 0x3f
    214c:	ea 97       	sbiw	r28, 0x3a	; 58
    214e:	aa 96       	adiw	r28, 0x2a	; 42
    2150:	6f ad       	ldd	r22, Y+63	; 0x3f
    2152:	aa 97       	sbiw	r28, 0x2a	; 42
    2154:	56 17       	cp	r21, r22
    2156:	28 f0       	brcs	.+10     	; 0x2162 <Timer_vidSychDelay+0x98a>
    2158:	c9 57       	subi	r28, 0x79	; 121
    215a:	df 4f       	sbci	r29, 0xFF	; 255
    215c:	18 82       	st	Y, r1
    215e:	c7 58       	subi	r28, 0x87	; 135
    2160:	d0 40       	sbci	r29, 0x00	; 0
    2162:	cc 57       	subi	r28, 0x7C	; 124
    2164:	df 4f       	sbci	r29, 0xFF	; 255
    2166:	78 81       	ld	r23, Y
    2168:	c4 58       	subi	r28, 0x84	; 132
    216a:	d0 40       	sbci	r29, 0x00	; 0
    216c:	ea 96       	adiw	r28, 0x3a	; 58
    216e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2170:	ea 97       	sbiw	r28, 0x3a	; 58
    2172:	78 0f       	add	r23, r24
    2174:	c8 57       	subi	r28, 0x78	; 120
    2176:	df 4f       	sbci	r29, 0xFF	; 255
    2178:	78 83       	st	Y, r23
    217a:	c8 58       	subi	r28, 0x88	; 136
    217c:	d0 40       	sbci	r29, 0x00	; 0
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	c7 57       	subi	r28, 0x77	; 119
    2182:	df 4f       	sbci	r29, 0xFF	; 255
    2184:	98 83       	st	Y, r25
    2186:	c9 58       	subi	r28, 0x89	; 137
    2188:	d0 40       	sbci	r29, 0x00	; 0
    218a:	c8 57       	subi	r28, 0x78	; 120
    218c:	df 4f       	sbci	r29, 0xFF	; 255
    218e:	08 81       	ld	r16, Y
    2190:	c8 58       	subi	r28, 0x88	; 136
    2192:	d0 40       	sbci	r29, 0x00	; 0
    2194:	ea 96       	adiw	r28, 0x3a	; 58
    2196:	1f ad       	ldd	r17, Y+63	; 0x3f
    2198:	ea 97       	sbiw	r28, 0x3a	; 58
    219a:	01 17       	cp	r16, r17
    219c:	28 f0       	brcs	.+10     	; 0x21a8 <Timer_vidSychDelay+0x9d0>
    219e:	c7 57       	subi	r28, 0x77	; 119
    21a0:	df 4f       	sbci	r29, 0xFF	; 255
    21a2:	18 82       	st	Y, r1
    21a4:	c9 58       	subi	r28, 0x89	; 137
    21a6:	d0 40       	sbci	r29, 0x00	; 0
    21a8:	c9 57       	subi	r28, 0x79	; 121
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	28 81       	ld	r18, Y
    21ae:	c7 58       	subi	r28, 0x87	; 135
    21b0:	d0 40       	sbci	r29, 0x00	; 0
    21b2:	c7 57       	subi	r28, 0x77	; 119
    21b4:	df 4f       	sbci	r29, 0xFF	; 255
    21b6:	38 81       	ld	r19, Y
    21b8:	c9 58       	subi	r28, 0x89	; 137
    21ba:	d0 40       	sbci	r29, 0x00	; 0
    21bc:	23 2b       	or	r18, r19
    21be:	c9 57       	subi	r28, 0x79	; 121
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	28 83       	st	Y, r18
    21c4:	c7 58       	subi	r28, 0x87	; 135
    21c6:	d0 40       	sbci	r29, 0x00	; 0
    21c8:	c8 57       	subi	r28, 0x78	; 120
    21ca:	df 4f       	sbci	r29, 0xFF	; 255
    21cc:	48 81       	ld	r20, Y
    21ce:	c8 58       	subi	r28, 0x88	; 136
    21d0:	d0 40       	sbci	r29, 0x00	; 0
    21d2:	ea 96       	adiw	r28, 0x3a	; 58
    21d4:	4f af       	std	Y+63, r20	; 0x3f
    21d6:	ea 97       	sbiw	r28, 0x3a	; 58
    21d8:	ab 96       	adiw	r28, 0x2b	; 43
    21da:	5f ad       	ldd	r21, Y+63	; 0x3f
    21dc:	ab 97       	sbiw	r28, 0x2b	; 43
    21de:	e3 96       	adiw	r28, 0x33	; 51
    21e0:	6f ad       	ldd	r22, Y+63	; 0x3f
    21e2:	e3 97       	sbiw	r28, 0x33	; 51
    21e4:	56 0f       	add	r21, r22
    21e6:	eb 96       	adiw	r28, 0x3b	; 59
    21e8:	5f af       	std	Y+63, r21	; 0x3f
    21ea:	eb 97       	sbiw	r28, 0x3b	; 59
    21ec:	71 e0       	ldi	r23, 0x01	; 1
    21ee:	c6 57       	subi	r28, 0x76	; 118
    21f0:	df 4f       	sbci	r29, 0xFF	; 255
    21f2:	78 83       	st	Y, r23
    21f4:	ca 58       	subi	r28, 0x8A	; 138
    21f6:	d0 40       	sbci	r29, 0x00	; 0
    21f8:	eb 96       	adiw	r28, 0x3b	; 59
    21fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    21fc:	eb 97       	sbiw	r28, 0x3b	; 59
    21fe:	ab 96       	adiw	r28, 0x2b	; 43
    2200:	9f ad       	ldd	r25, Y+63	; 0x3f
    2202:	ab 97       	sbiw	r28, 0x2b	; 43
    2204:	89 17       	cp	r24, r25
    2206:	28 f0       	brcs	.+10     	; 0x2212 <Timer_vidSychDelay+0xa3a>
    2208:	c6 57       	subi	r28, 0x76	; 118
    220a:	df 4f       	sbci	r29, 0xFF	; 255
    220c:	18 82       	st	Y, r1
    220e:	ca 58       	subi	r28, 0x8A	; 138
    2210:	d0 40       	sbci	r29, 0x00	; 0
    2212:	c9 57       	subi	r28, 0x79	; 121
    2214:	df 4f       	sbci	r29, 0xFF	; 255
    2216:	08 81       	ld	r16, Y
    2218:	c7 58       	subi	r28, 0x87	; 135
    221a:	d0 40       	sbci	r29, 0x00	; 0
    221c:	eb 96       	adiw	r28, 0x3b	; 59
    221e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2220:	eb 97       	sbiw	r28, 0x3b	; 59
    2222:	01 0f       	add	r16, r17
    2224:	c5 57       	subi	r28, 0x75	; 117
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	08 83       	st	Y, r16
    222a:	cb 58       	subi	r28, 0x8B	; 139
    222c:	d0 40       	sbci	r29, 0x00	; 0
    222e:	21 e0       	ldi	r18, 0x01	; 1
    2230:	c4 57       	subi	r28, 0x74	; 116
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	28 83       	st	Y, r18
    2236:	cc 58       	subi	r28, 0x8C	; 140
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	c5 57       	subi	r28, 0x75	; 117
    223c:	df 4f       	sbci	r29, 0xFF	; 255
    223e:	38 81       	ld	r19, Y
    2240:	cb 58       	subi	r28, 0x8B	; 139
    2242:	d0 40       	sbci	r29, 0x00	; 0
    2244:	eb 96       	adiw	r28, 0x3b	; 59
    2246:	4f ad       	ldd	r20, Y+63	; 0x3f
    2248:	eb 97       	sbiw	r28, 0x3b	; 59
    224a:	34 17       	cp	r19, r20
    224c:	28 f0       	brcs	.+10     	; 0x2258 <Timer_vidSychDelay+0xa80>
    224e:	c4 57       	subi	r28, 0x74	; 116
    2250:	df 4f       	sbci	r29, 0xFF	; 255
    2252:	18 82       	st	Y, r1
    2254:	cc 58       	subi	r28, 0x8C	; 140
    2256:	d0 40       	sbci	r29, 0x00	; 0
    2258:	c6 57       	subi	r28, 0x76	; 118
    225a:	df 4f       	sbci	r29, 0xFF	; 255
    225c:	58 81       	ld	r21, Y
    225e:	ca 58       	subi	r28, 0x8A	; 138
    2260:	d0 40       	sbci	r29, 0x00	; 0
    2262:	c4 57       	subi	r28, 0x74	; 116
    2264:	df 4f       	sbci	r29, 0xFF	; 255
    2266:	68 81       	ld	r22, Y
    2268:	cc 58       	subi	r28, 0x8C	; 140
    226a:	d0 40       	sbci	r29, 0x00	; 0
    226c:	56 2b       	or	r21, r22
    226e:	c6 57       	subi	r28, 0x76	; 118
    2270:	df 4f       	sbci	r29, 0xFF	; 255
    2272:	58 83       	st	Y, r21
    2274:	ca 58       	subi	r28, 0x8A	; 138
    2276:	d0 40       	sbci	r29, 0x00	; 0
    2278:	c5 57       	subi	r28, 0x75	; 117
    227a:	df 4f       	sbci	r29, 0xFF	; 255
    227c:	78 81       	ld	r23, Y
    227e:	cb 58       	subi	r28, 0x8B	; 139
    2280:	d0 40       	sbci	r29, 0x00	; 0
    2282:	eb 96       	adiw	r28, 0x3b	; 59
    2284:	7f af       	std	Y+63, r23	; 0x3f
    2286:	eb 97       	sbiw	r28, 0x3b	; 59
    2288:	ac 96       	adiw	r28, 0x2c	; 44
    228a:	8f ad       	ldd	r24, Y+63	; 0x3f
    228c:	ac 97       	sbiw	r28, 0x2c	; 44
    228e:	e4 96       	adiw	r28, 0x34	; 52
    2290:	9f ad       	ldd	r25, Y+63	; 0x3f
    2292:	e4 97       	sbiw	r28, 0x34	; 52
    2294:	89 0f       	add	r24, r25
    2296:	ec 96       	adiw	r28, 0x3c	; 60
    2298:	8f af       	std	Y+63, r24	; 0x3f
    229a:	ec 97       	sbiw	r28, 0x3c	; 60
    229c:	01 e0       	ldi	r16, 0x01	; 1
    229e:	c3 57       	subi	r28, 0x73	; 115
    22a0:	df 4f       	sbci	r29, 0xFF	; 255
    22a2:	08 83       	st	Y, r16
    22a4:	cd 58       	subi	r28, 0x8D	; 141
    22a6:	d0 40       	sbci	r29, 0x00	; 0
    22a8:	ec 96       	adiw	r28, 0x3c	; 60
    22aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    22ac:	ec 97       	sbiw	r28, 0x3c	; 60
    22ae:	ac 96       	adiw	r28, 0x2c	; 44
    22b0:	2f ad       	ldd	r18, Y+63	; 0x3f
    22b2:	ac 97       	sbiw	r28, 0x2c	; 44
    22b4:	12 17       	cp	r17, r18
    22b6:	28 f0       	brcs	.+10     	; 0x22c2 <Timer_vidSychDelay+0xaea>
    22b8:	c3 57       	subi	r28, 0x73	; 115
    22ba:	df 4f       	sbci	r29, 0xFF	; 255
    22bc:	18 82       	st	Y, r1
    22be:	cd 58       	subi	r28, 0x8D	; 141
    22c0:	d0 40       	sbci	r29, 0x00	; 0
    22c2:	c6 57       	subi	r28, 0x76	; 118
    22c4:	df 4f       	sbci	r29, 0xFF	; 255
    22c6:	38 81       	ld	r19, Y
    22c8:	ca 58       	subi	r28, 0x8A	; 138
    22ca:	d0 40       	sbci	r29, 0x00	; 0
    22cc:	ec 96       	adiw	r28, 0x3c	; 60
    22ce:	4f ad       	ldd	r20, Y+63	; 0x3f
    22d0:	ec 97       	sbiw	r28, 0x3c	; 60
    22d2:	34 0f       	add	r19, r20
    22d4:	c2 57       	subi	r28, 0x72	; 114
    22d6:	df 4f       	sbci	r29, 0xFF	; 255
    22d8:	38 83       	st	Y, r19
    22da:	ce 58       	subi	r28, 0x8E	; 142
    22dc:	d0 40       	sbci	r29, 0x00	; 0
    22de:	51 e0       	ldi	r21, 0x01	; 1
    22e0:	c1 57       	subi	r28, 0x71	; 113
    22e2:	df 4f       	sbci	r29, 0xFF	; 255
    22e4:	58 83       	st	Y, r21
    22e6:	cf 58       	subi	r28, 0x8F	; 143
    22e8:	d0 40       	sbci	r29, 0x00	; 0
    22ea:	c2 57       	subi	r28, 0x72	; 114
    22ec:	df 4f       	sbci	r29, 0xFF	; 255
    22ee:	68 81       	ld	r22, Y
    22f0:	ce 58       	subi	r28, 0x8E	; 142
    22f2:	d0 40       	sbci	r29, 0x00	; 0
    22f4:	ec 96       	adiw	r28, 0x3c	; 60
    22f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    22f8:	ec 97       	sbiw	r28, 0x3c	; 60
    22fa:	67 17       	cp	r22, r23
    22fc:	28 f0       	brcs	.+10     	; 0x2308 <Timer_vidSychDelay+0xb30>
    22fe:	c1 57       	subi	r28, 0x71	; 113
    2300:	df 4f       	sbci	r29, 0xFF	; 255
    2302:	18 82       	st	Y, r1
    2304:	cf 58       	subi	r28, 0x8F	; 143
    2306:	d0 40       	sbci	r29, 0x00	; 0
    2308:	c3 57       	subi	r28, 0x73	; 115
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	88 81       	ld	r24, Y
    230e:	cd 58       	subi	r28, 0x8D	; 141
    2310:	d0 40       	sbci	r29, 0x00	; 0
    2312:	c1 57       	subi	r28, 0x71	; 113
    2314:	df 4f       	sbci	r29, 0xFF	; 255
    2316:	98 81       	ld	r25, Y
    2318:	cf 58       	subi	r28, 0x8F	; 143
    231a:	d0 40       	sbci	r29, 0x00	; 0
    231c:	89 2b       	or	r24, r25
    231e:	c3 57       	subi	r28, 0x73	; 115
    2320:	df 4f       	sbci	r29, 0xFF	; 255
    2322:	88 83       	st	Y, r24
    2324:	cd 58       	subi	r28, 0x8D	; 141
    2326:	d0 40       	sbci	r29, 0x00	; 0
    2328:	c2 57       	subi	r28, 0x72	; 114
    232a:	df 4f       	sbci	r29, 0xFF	; 255
    232c:	08 81       	ld	r16, Y
    232e:	ce 58       	subi	r28, 0x8E	; 142
    2330:	d0 40       	sbci	r29, 0x00	; 0
    2332:	ec 96       	adiw	r28, 0x3c	; 60
    2334:	0f af       	std	Y+63, r16	; 0x3f
    2336:	ec 97       	sbiw	r28, 0x3c	; 60
    2338:	ad 96       	adiw	r28, 0x2d	; 45
    233a:	1f ad       	ldd	r17, Y+63	; 0x3f
    233c:	ad 97       	sbiw	r28, 0x2d	; 45
    233e:	e5 96       	adiw	r28, 0x35	; 53
    2340:	2f ad       	ldd	r18, Y+63	; 0x3f
    2342:	e5 97       	sbiw	r28, 0x35	; 53
    2344:	12 0f       	add	r17, r18
    2346:	ed 96       	adiw	r28, 0x3d	; 61
    2348:	1f af       	std	Y+63, r17	; 0x3f
    234a:	ed 97       	sbiw	r28, 0x3d	; 61
    234c:	c3 57       	subi	r28, 0x73	; 115
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	88 81       	ld	r24, Y
    2352:	cd 58       	subi	r28, 0x8D	; 141
    2354:	d0 40       	sbci	r29, 0x00	; 0
    2356:	ed 96       	adiw	r28, 0x3d	; 61
    2358:	3f ad       	ldd	r19, Y+63	; 0x3f
    235a:	ed 97       	sbiw	r28, 0x3d	; 61
    235c:	83 0f       	add	r24, r19
    235e:	ed 96       	adiw	r28, 0x3d	; 61
    2360:	8f af       	std	Y+63, r24	; 0x3f
    2362:	ed 97       	sbiw	r28, 0x3d	; 61
    2364:	e6 96       	adiw	r28, 0x36	; 54
    2366:	af ac       	ldd	r10, Y+63	; 0x3f
    2368:	e6 97       	sbiw	r28, 0x36	; 54
    236a:	e7 96       	adiw	r28, 0x37	; 55
    236c:	bf ac       	ldd	r11, Y+63	; 0x3f
    236e:	e7 97       	sbiw	r28, 0x37	; 55
    2370:	e8 96       	adiw	r28, 0x38	; 56
    2372:	cf ac       	ldd	r12, Y+63	; 0x3f
    2374:	e8 97       	sbiw	r28, 0x38	; 56
    2376:	e9 96       	adiw	r28, 0x39	; 57
    2378:	df ac       	ldd	r13, Y+63	; 0x3f
    237a:	e9 97       	sbiw	r28, 0x39	; 57
    237c:	ea 96       	adiw	r28, 0x3a	; 58
    237e:	ef ac       	ldd	r14, Y+63	; 0x3f
    2380:	ea 97       	sbiw	r28, 0x3a	; 58
    2382:	eb 96       	adiw	r28, 0x3b	; 59
    2384:	ff ac       	ldd	r15, Y+63	; 0x3f
    2386:	eb 97       	sbiw	r28, 0x3b	; 59
    2388:	ec 96       	adiw	r28, 0x3c	; 60
    238a:	0f ad       	ldd	r16, Y+63	; 0x3f
    238c:	ec 97       	sbiw	r28, 0x3c	; 60
    238e:	ed 96       	adiw	r28, 0x3d	; 61
    2390:	1f ad       	ldd	r17, Y+63	; 0x3f
    2392:	ed 97       	sbiw	r28, 0x3d	; 61
    2394:	2a 2d       	mov	r18, r10
    2396:	3b 2d       	mov	r19, r11
    2398:	4c 2d       	mov	r20, r12
    239a:	5d 2d       	mov	r21, r13
    239c:	6e 2d       	mov	r22, r14
    239e:	7f 2d       	mov	r23, r15
    23a0:	80 2f       	mov	r24, r16
    23a2:	91 2f       	mov	r25, r17
    23a4:	08 e0       	ldi	r16, 0x08	; 8
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    23aa:	a2 2e       	mov	r10, r18
    23ac:	b3 2e       	mov	r11, r19
    23ae:	c4 2e       	mov	r12, r20
    23b0:	d5 2e       	mov	r13, r21
    23b2:	e6 2e       	mov	r14, r22
    23b4:	f7 2e       	mov	r15, r23
    23b6:	08 2f       	mov	r16, r24
    23b8:	19 2f       	mov	r17, r25
    23ba:	2a 2d       	mov	r18, r10
    23bc:	3b 2d       	mov	r19, r11
    23be:	4c 2d       	mov	r20, r12
    23c0:	5d 2d       	mov	r21, r13
    23c2:	6e 2d       	mov	r22, r14
    23c4:	7f 2d       	mov	r23, r15
    23c6:	80 2f       	mov	r24, r16
    23c8:	91 2f       	mov	r25, r17
    23ca:	2e 83       	std	Y+6, r18	; 0x06
    23cc:	3f 83       	std	Y+7, r19	; 0x07
    23ce:	48 87       	std	Y+8, r20	; 0x08
    23d0:	59 87       	std	Y+9, r21	; 0x09
    u8 u8Preload = 256U - (u64Counts % 256LLU);
    23d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d4:	81 95       	neg	r24
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    TCNT0 = u8Preload;
    23d8:	e2 e5       	ldi	r30, 0x52	; 82
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	80 83       	st	Z, r24
    u32 u32Counter=0;
    23e0:	19 82       	std	Y+1, r1	; 0x01
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    23e4:	1b 82       	std	Y+3, r1	; 0x03
    23e6:	1c 82       	std	Y+4, r1	; 0x04
    23e8:	10 c0       	rjmp	.+32     	; 0x240a <Timer_vidSychDelay+0xc32>
    while (u32Counter++ < u32OvfCounts)
    {
        while(((TIFR>>0)&1) == 0);
    23ea:	e8 e5       	ldi	r30, 0x58	; 88
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	81 70       	andi	r24, 0x01	; 1
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	b9 f3       	breq	.-18     	; 0x23ea <Timer_vidSychDelay+0xc12>
        TIFR |= (1<<0);
    23fc:	a8 e5       	ldi	r26, 0x58	; 88
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e8 e5       	ldi	r30, 0x58	; 88
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	81 60       	ori	r24, 0x01	; 1
    2408:	8c 93       	st	X, r24
    u64 u64Counts = (u32MilliSeconds * 16000LLU)/8;
    u32 u32OvfCounts = (u64Counts + 255LLU) / 256LLU;
    u8 u8Preload = 256U - (u64Counts % 256LLU);
    TCNT0 = u8Preload;
    u32 u32Counter=0;
    while (u32Counter++ < u32OvfCounts)
    240a:	1e 8a       	std	Y+22, r1	; 0x16
    240c:	29 81       	ldd	r18, Y+1	; 0x01
    240e:	3a 81       	ldd	r19, Y+2	; 0x02
    2410:	4b 81       	ldd	r20, Y+3	; 0x03
    2412:	5c 81       	ldd	r21, Y+4	; 0x04
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	9f 81       	ldd	r25, Y+7	; 0x07
    2418:	a8 85       	ldd	r26, Y+8	; 0x08
    241a:	b9 85       	ldd	r27, Y+9	; 0x09
    241c:	28 17       	cp	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	4a 07       	cpc	r20, r26
    2422:	5b 07       	cpc	r21, r27
    2424:	10 f4       	brcc	.+4      	; 0x242a <Timer_vidSychDelay+0xc52>
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	4e 8b       	std	Y+22, r20	; 0x16
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	ab 81       	ldd	r26, Y+3	; 0x03
    2430:	bc 81       	ldd	r27, Y+4	; 0x04
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	a1 1d       	adc	r26, r1
    2436:	b1 1d       	adc	r27, r1
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	ab 83       	std	Y+3, r26	; 0x03
    243e:	bc 83       	std	Y+4, r27	; 0x04
    2440:	5e 89       	ldd	r21, Y+22	; 0x16
    2442:	55 23       	and	r21, r21
    2444:	91 f6       	brne	.-92     	; 0x23ea <Timer_vidSychDelay+0xc12>
    {
        while(((TIFR>>0)&1) == 0);
        TIFR |= (1<<0);
    }
}
    2446:	c1 57       	subi	r28, 0x71	; 113
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	ff 90       	pop	r15
    245e:	ef 90       	pop	r14
    2460:	df 90       	pop	r13
    2462:	cf 90       	pop	r12
    2464:	bf 90       	pop	r11
    2466:	af 90       	pop	r10
    2468:	9f 90       	pop	r9
    246a:	8f 90       	pop	r8
    246c:	7f 90       	pop	r7
    246e:	6f 90       	pop	r6
    2470:	5f 90       	pop	r5
    2472:	4f 90       	pop	r4
    2474:	3f 90       	pop	r3
    2476:	2f 90       	pop	r2
    2478:	08 95       	ret

0000247a <Timer_vidAsychDelay>:

void Timer_vidAsychDelay(void(*pfunAppFun)(void) , u32 u32MilliSeconds)
{
    247a:	2f 92       	push	r2
    247c:	3f 92       	push	r3
    247e:	4f 92       	push	r4
    2480:	5f 92       	push	r5
    2482:	6f 92       	push	r6
    2484:	7f 92       	push	r7
    2486:	8f 92       	push	r8
    2488:	9f 92       	push	r9
    248a:	af 92       	push	r10
    248c:	bf 92       	push	r11
    248e:	cf 92       	push	r12
    2490:	df 92       	push	r13
    2492:	ef 92       	push	r14
    2494:	ff 92       	push	r15
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	c7 58       	subi	r28, 0x87	; 135
    24a4:	d0 40       	sbci	r29, 0x00	; 0
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	9a 87       	std	Y+10, r25	; 0x0a
    24b2:	89 87       	std	Y+9, r24	; 0x09
    24b4:	4b 87       	std	Y+11, r20	; 0x0b
    24b6:	5c 87       	std	Y+12, r21	; 0x0c
    24b8:	6d 87       	std	Y+13, r22	; 0x0d
    24ba:	7e 87       	std	Y+14, r23	; 0x0e
    if (pfunAppFun != NULL)
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <Timer_vidAsychDelay+0x4c>
    24c4:	8f c5       	rjmp	.+2846   	; 0x2fe4 <Timer_vidAsychDelay+0xb6a>
    {
        TIMSK |= (1<<0);
    24c6:	a9 e5       	ldi	r26, 0x59	; 89
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e9 e5       	ldi	r30, 0x59	; 89
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	81 60       	ori	r24, 0x01	; 1
    24d2:	8c 93       	st	X, r24
        u64 u64Counts = (u32MilliSeconds * 16000LLU)/8;
    24d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    24d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    24da:	be 85       	ldd	r27, Y+14	; 0x0e
    24dc:	8c 01       	movw	r16, r24
    24de:	9d 01       	movw	r18, r26
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	0f 87       	std	Y+15, r16	; 0x0f
    24ea:	18 8b       	std	Y+16, r17	; 0x10
    24ec:	29 8b       	std	Y+17, r18	; 0x11
    24ee:	3a 8b       	std	Y+18, r19	; 0x12
    24f0:	4b 8b       	std	Y+19, r20	; 0x13
    24f2:	5c 8b       	std	Y+20, r21	; 0x14
    24f4:	6d 8b       	std	Y+21, r22	; 0x15
    24f6:	7e 8b       	std	Y+22, r23	; 0x16
    24f8:	af 84       	ldd	r10, Y+15	; 0x0f
    24fa:	b8 88       	ldd	r11, Y+16	; 0x10
    24fc:	c9 88       	ldd	r12, Y+17	; 0x11
    24fe:	da 88       	ldd	r13, Y+18	; 0x12
    2500:	eb 88       	ldd	r14, Y+19	; 0x13
    2502:	fc 88       	ldd	r15, Y+20	; 0x14
    2504:	0d 89       	ldd	r16, Y+21	; 0x15
    2506:	1e 89       	ldd	r17, Y+22	; 0x16
    2508:	2a 2d       	mov	r18, r10
    250a:	3b 2d       	mov	r19, r11
    250c:	4c 2d       	mov	r20, r12
    250e:	5d 2d       	mov	r21, r13
    2510:	6e 2d       	mov	r22, r14
    2512:	7f 2d       	mov	r23, r15
    2514:	80 2f       	mov	r24, r16
    2516:	91 2f       	mov	r25, r17
    2518:	02 e0       	ldi	r16, 0x02	; 2
    251a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    251e:	2f 8b       	std	Y+23, r18	; 0x17
    2520:	38 8f       	std	Y+24, r19	; 0x18
    2522:	49 8f       	std	Y+25, r20	; 0x19
    2524:	5a 8f       	std	Y+26, r21	; 0x1a
    2526:	6b 8f       	std	Y+27, r22	; 0x1b
    2528:	7c 8f       	std	Y+28, r23	; 0x1c
    252a:	8d 8f       	std	Y+29, r24	; 0x1d
    252c:	9e 8f       	std	Y+30, r25	; 0x1e
    252e:	2f 89       	ldd	r18, Y+23	; 0x17
    2530:	38 8d       	ldd	r19, Y+24	; 0x18
    2532:	49 8d       	ldd	r20, Y+25	; 0x19
    2534:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2536:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2538:	7c 8d       	ldd	r23, Y+28	; 0x1c
    253a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    253e:	05 e0       	ldi	r16, 0x05	; 5
    2540:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2544:	2f 8f       	std	Y+31, r18	; 0x1f
    2546:	38 a3       	std	Y+32, r19	; 0x20
    2548:	49 a3       	std	Y+33, r20	; 0x21
    254a:	5a a3       	std	Y+34, r21	; 0x22
    254c:	6b a3       	std	Y+35, r22	; 0x23
    254e:	7c a3       	std	Y+36, r23	; 0x24
    2550:	8d a3       	std	Y+37, r24	; 0x25
    2552:	9e a3       	std	Y+38, r25	; 0x26
    2554:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2556:	2f 89       	ldd	r18, Y+23	; 0x17
    2558:	12 1b       	sub	r17, r18
    255a:	1f a3       	std	Y+39, r17	; 0x27
    255c:	31 e0       	ldi	r19, 0x01	; 1
    255e:	3f a7       	std	Y+47, r19	; 0x2f
    2560:	4f a1       	ldd	r20, Y+39	; 0x27
    2562:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2564:	54 17       	cp	r21, r20
    2566:	08 f0       	brcs	.+2      	; 0x256a <Timer_vidAsychDelay+0xf0>
    2568:	1f a6       	std	Y+47, r1	; 0x2f
    256a:	68 a1       	ldd	r22, Y+32	; 0x20
    256c:	78 8d       	ldd	r23, Y+24	; 0x18
    256e:	67 1b       	sub	r22, r23
    2570:	68 a7       	std	Y+40, r22	; 0x28
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	88 ab       	std	Y+48, r24	; 0x30
    2576:	98 a5       	ldd	r25, Y+40	; 0x28
    2578:	08 a1       	ldd	r16, Y+32	; 0x20
    257a:	09 17       	cp	r16, r25
    257c:	08 f0       	brcs	.+2      	; 0x2580 <Timer_vidAsychDelay+0x106>
    257e:	18 aa       	std	Y+48, r1	; 0x30
    2580:	18 a5       	ldd	r17, Y+40	; 0x28
    2582:	2f a5       	ldd	r18, Y+47	; 0x2f
    2584:	12 1b       	sub	r17, r18
    2586:	19 ab       	std	Y+49, r17	; 0x31
    2588:	31 e0       	ldi	r19, 0x01	; 1
    258a:	3a ab       	std	Y+50, r19	; 0x32
    258c:	49 a9       	ldd	r20, Y+49	; 0x31
    258e:	58 a5       	ldd	r21, Y+40	; 0x28
    2590:	54 17       	cp	r21, r20
    2592:	08 f0       	brcs	.+2      	; 0x2596 <Timer_vidAsychDelay+0x11c>
    2594:	1a aa       	std	Y+50, r1	; 0x32
    2596:	68 a9       	ldd	r22, Y+48	; 0x30
    2598:	7a a9       	ldd	r23, Y+50	; 0x32
    259a:	67 2b       	or	r22, r23
    259c:	68 ab       	std	Y+48, r22	; 0x30
    259e:	89 a9       	ldd	r24, Y+49	; 0x31
    25a0:	88 a7       	std	Y+40, r24	; 0x28
    25a2:	99 a1       	ldd	r25, Y+33	; 0x21
    25a4:	09 8d       	ldd	r16, Y+25	; 0x19
    25a6:	90 1b       	sub	r25, r16
    25a8:	99 a7       	std	Y+41, r25	; 0x29
    25aa:	11 e0       	ldi	r17, 0x01	; 1
    25ac:	1b ab       	std	Y+51, r17	; 0x33
    25ae:	29 a5       	ldd	r18, Y+41	; 0x29
    25b0:	39 a1       	ldd	r19, Y+33	; 0x21
    25b2:	32 17       	cp	r19, r18
    25b4:	08 f0       	brcs	.+2      	; 0x25b8 <Timer_vidAsychDelay+0x13e>
    25b6:	1b aa       	std	Y+51, r1	; 0x33
    25b8:	49 a5       	ldd	r20, Y+41	; 0x29
    25ba:	58 a9       	ldd	r21, Y+48	; 0x30
    25bc:	45 1b       	sub	r20, r21
    25be:	4c ab       	std	Y+52, r20	; 0x34
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	6d ab       	std	Y+53, r22	; 0x35
    25c4:	7c a9       	ldd	r23, Y+52	; 0x34
    25c6:	89 a5       	ldd	r24, Y+41	; 0x29
    25c8:	87 17       	cp	r24, r23
    25ca:	08 f0       	brcs	.+2      	; 0x25ce <Timer_vidAsychDelay+0x154>
    25cc:	1d aa       	std	Y+53, r1	; 0x35
    25ce:	9b a9       	ldd	r25, Y+51	; 0x33
    25d0:	0d a9       	ldd	r16, Y+53	; 0x35
    25d2:	90 2b       	or	r25, r16
    25d4:	9b ab       	std	Y+51, r25	; 0x33
    25d6:	1c a9       	ldd	r17, Y+52	; 0x34
    25d8:	19 a7       	std	Y+41, r17	; 0x29
    25da:	2a a1       	ldd	r18, Y+34	; 0x22
    25dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    25de:	23 1b       	sub	r18, r19
    25e0:	2a a7       	std	Y+42, r18	; 0x2a
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	4e ab       	std	Y+54, r20	; 0x36
    25e6:	5a a5       	ldd	r21, Y+42	; 0x2a
    25e8:	6a a1       	ldd	r22, Y+34	; 0x22
    25ea:	65 17       	cp	r22, r21
    25ec:	08 f0       	brcs	.+2      	; 0x25f0 <Timer_vidAsychDelay+0x176>
    25ee:	1e aa       	std	Y+54, r1	; 0x36
    25f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    25f2:	8b a9       	ldd	r24, Y+51	; 0x33
    25f4:	78 1b       	sub	r23, r24
    25f6:	7f ab       	std	Y+55, r23	; 0x37
    25f8:	91 e0       	ldi	r25, 0x01	; 1
    25fa:	98 af       	std	Y+56, r25	; 0x38
    25fc:	0f a9       	ldd	r16, Y+55	; 0x37
    25fe:	1a a5       	ldd	r17, Y+42	; 0x2a
    2600:	10 17       	cp	r17, r16
    2602:	08 f0       	brcs	.+2      	; 0x2606 <Timer_vidAsychDelay+0x18c>
    2604:	18 ae       	std	Y+56, r1	; 0x38
    2606:	2e a9       	ldd	r18, Y+54	; 0x36
    2608:	38 ad       	ldd	r19, Y+56	; 0x38
    260a:	23 2b       	or	r18, r19
    260c:	2e ab       	std	Y+54, r18	; 0x36
    260e:	4f a9       	ldd	r20, Y+55	; 0x37
    2610:	4a a7       	std	Y+42, r20	; 0x2a
    2612:	5b a1       	ldd	r21, Y+35	; 0x23
    2614:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2616:	56 1b       	sub	r21, r22
    2618:	5b a7       	std	Y+43, r21	; 0x2b
    261a:	71 e0       	ldi	r23, 0x01	; 1
    261c:	79 af       	std	Y+57, r23	; 0x39
    261e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2620:	9b a1       	ldd	r25, Y+35	; 0x23
    2622:	98 17       	cp	r25, r24
    2624:	08 f0       	brcs	.+2      	; 0x2628 <Timer_vidAsychDelay+0x1ae>
    2626:	19 ae       	std	Y+57, r1	; 0x39
    2628:	0b a5       	ldd	r16, Y+43	; 0x2b
    262a:	1e a9       	ldd	r17, Y+54	; 0x36
    262c:	01 1b       	sub	r16, r17
    262e:	0a af       	std	Y+58, r16	; 0x3a
    2630:	21 e0       	ldi	r18, 0x01	; 1
    2632:	2b af       	std	Y+59, r18	; 0x3b
    2634:	3a ad       	ldd	r19, Y+58	; 0x3a
    2636:	4b a5       	ldd	r20, Y+43	; 0x2b
    2638:	43 17       	cp	r20, r19
    263a:	08 f0       	brcs	.+2      	; 0x263e <Timer_vidAsychDelay+0x1c4>
    263c:	1b ae       	std	Y+59, r1	; 0x3b
    263e:	59 ad       	ldd	r21, Y+57	; 0x39
    2640:	6b ad       	ldd	r22, Y+59	; 0x3b
    2642:	56 2b       	or	r21, r22
    2644:	59 af       	std	Y+57, r21	; 0x39
    2646:	7a ad       	ldd	r23, Y+58	; 0x3a
    2648:	7b a7       	std	Y+43, r23	; 0x2b
    264a:	8c a1       	ldd	r24, Y+36	; 0x24
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	89 1b       	sub	r24, r25
    2650:	8c a7       	std	Y+44, r24	; 0x2c
    2652:	01 e0       	ldi	r16, 0x01	; 1
    2654:	0c af       	std	Y+60, r16	; 0x3c
    2656:	1c a5       	ldd	r17, Y+44	; 0x2c
    2658:	2c a1       	ldd	r18, Y+36	; 0x24
    265a:	21 17       	cp	r18, r17
    265c:	08 f0       	brcs	.+2      	; 0x2660 <Timer_vidAsychDelay+0x1e6>
    265e:	1c ae       	std	Y+60, r1	; 0x3c
    2660:	3c a5       	ldd	r19, Y+44	; 0x2c
    2662:	49 ad       	ldd	r20, Y+57	; 0x39
    2664:	34 1b       	sub	r19, r20
    2666:	3d af       	std	Y+61, r19	; 0x3d
    2668:	51 e0       	ldi	r21, 0x01	; 1
    266a:	5e af       	std	Y+62, r21	; 0x3e
    266c:	6d ad       	ldd	r22, Y+61	; 0x3d
    266e:	7c a5       	ldd	r23, Y+44	; 0x2c
    2670:	76 17       	cp	r23, r22
    2672:	08 f0       	brcs	.+2      	; 0x2676 <Timer_vidAsychDelay+0x1fc>
    2674:	1e ae       	std	Y+62, r1	; 0x3e
    2676:	8c ad       	ldd	r24, Y+60	; 0x3c
    2678:	9e ad       	ldd	r25, Y+62	; 0x3e
    267a:	89 2b       	or	r24, r25
    267c:	8c af       	std	Y+60, r24	; 0x3c
    267e:	0d ad       	ldd	r16, Y+61	; 0x3d
    2680:	0c a7       	std	Y+44, r16	; 0x2c
    2682:	1d a1       	ldd	r17, Y+37	; 0x25
    2684:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2686:	12 1b       	sub	r17, r18
    2688:	1d a7       	std	Y+45, r17	; 0x2d
    268a:	31 e0       	ldi	r19, 0x01	; 1
    268c:	3f af       	std	Y+63, r19	; 0x3f
    268e:	4d a5       	ldd	r20, Y+45	; 0x2d
    2690:	5d a1       	ldd	r21, Y+37	; 0x25
    2692:	54 17       	cp	r21, r20
    2694:	08 f0       	brcs	.+2      	; 0x2698 <Timer_vidAsychDelay+0x21e>
    2696:	1f ae       	std	Y+63, r1	; 0x3f
    2698:	6d a5       	ldd	r22, Y+45	; 0x2d
    269a:	7c ad       	ldd	r23, Y+60	; 0x3c
    269c:	67 1b       	sub	r22, r23
    269e:	21 96       	adiw	r28, 0x01	; 1
    26a0:	6f af       	std	Y+63, r22	; 0x3f
    26a2:	21 97       	sbiw	r28, 0x01	; 1
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	22 96       	adiw	r28, 0x02	; 2
    26a8:	8f af       	std	Y+63, r24	; 0x3f
    26aa:	22 97       	sbiw	r28, 0x02	; 2
    26ac:	21 96       	adiw	r28, 0x01	; 1
    26ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    26b0:	21 97       	sbiw	r28, 0x01	; 1
    26b2:	0d a5       	ldd	r16, Y+45	; 0x2d
    26b4:	09 17       	cp	r16, r25
    26b6:	18 f0       	brcs	.+6      	; 0x26be <Timer_vidAsychDelay+0x244>
    26b8:	22 96       	adiw	r28, 0x02	; 2
    26ba:	1f ae       	std	Y+63, r1	; 0x3f
    26bc:	22 97       	sbiw	r28, 0x02	; 2
    26be:	1f ad       	ldd	r17, Y+63	; 0x3f
    26c0:	22 96       	adiw	r28, 0x02	; 2
    26c2:	2f ad       	ldd	r18, Y+63	; 0x3f
    26c4:	22 97       	sbiw	r28, 0x02	; 2
    26c6:	12 2b       	or	r17, r18
    26c8:	1f af       	std	Y+63, r17	; 0x3f
    26ca:	21 96       	adiw	r28, 0x01	; 1
    26cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    26ce:	21 97       	sbiw	r28, 0x01	; 1
    26d0:	3d a7       	std	Y+45, r19	; 0x2d
    26d2:	4e a1       	ldd	r20, Y+38	; 0x26
    26d4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    26d6:	45 1b       	sub	r20, r21
    26d8:	4e a7       	std	Y+46, r20	; 0x2e
    26da:	8e a5       	ldd	r24, Y+46	; 0x2e
    26dc:	6f ad       	ldd	r22, Y+63	; 0x3f
    26de:	86 1b       	sub	r24, r22
    26e0:	8e a7       	std	Y+46, r24	; 0x2e
    26e2:	7f a1       	ldd	r23, Y+39	; 0x27
    26e4:	7f 8f       	std	Y+31, r23	; 0x1f
    26e6:	88 a5       	ldd	r24, Y+40	; 0x28
    26e8:	88 a3       	std	Y+32, r24	; 0x20
    26ea:	99 a5       	ldd	r25, Y+41	; 0x29
    26ec:	99 a3       	std	Y+33, r25	; 0x21
    26ee:	0a a5       	ldd	r16, Y+42	; 0x2a
    26f0:	0a a3       	std	Y+34, r16	; 0x22
    26f2:	1b a5       	ldd	r17, Y+43	; 0x2b
    26f4:	1b a3       	std	Y+35, r17	; 0x23
    26f6:	2c a5       	ldd	r18, Y+44	; 0x2c
    26f8:	2c a3       	std	Y+36, r18	; 0x24
    26fa:	3d a5       	ldd	r19, Y+45	; 0x2d
    26fc:	3d a3       	std	Y+37, r19	; 0x25
    26fe:	4e a5       	ldd	r20, Y+46	; 0x2e
    2700:	4e a3       	std	Y+38, r20	; 0x26
    2702:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2704:	6f 85       	ldd	r22, Y+15	; 0x0f
    2706:	56 0f       	add	r21, r22
    2708:	23 96       	adiw	r28, 0x03	; 3
    270a:	5f af       	std	Y+63, r21	; 0x3f
    270c:	23 97       	sbiw	r28, 0x03	; 3
    270e:	71 e0       	ldi	r23, 0x01	; 1
    2710:	2b 96       	adiw	r28, 0x0b	; 11
    2712:	7f af       	std	Y+63, r23	; 0x3f
    2714:	2b 97       	sbiw	r28, 0x0b	; 11
    2716:	23 96       	adiw	r28, 0x03	; 3
    2718:	8f ad       	ldd	r24, Y+63	; 0x3f
    271a:	23 97       	sbiw	r28, 0x03	; 3
    271c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    271e:	89 17       	cp	r24, r25
    2720:	18 f0       	brcs	.+6      	; 0x2728 <Timer_vidAsychDelay+0x2ae>
    2722:	2b 96       	adiw	r28, 0x0b	; 11
    2724:	1f ae       	std	Y+63, r1	; 0x3f
    2726:	2b 97       	sbiw	r28, 0x0b	; 11
    2728:	08 a1       	ldd	r16, Y+32	; 0x20
    272a:	18 89       	ldd	r17, Y+16	; 0x10
    272c:	01 0f       	add	r16, r17
    272e:	24 96       	adiw	r28, 0x04	; 4
    2730:	0f af       	std	Y+63, r16	; 0x3f
    2732:	24 97       	sbiw	r28, 0x04	; 4
    2734:	21 e0       	ldi	r18, 0x01	; 1
    2736:	2c 96       	adiw	r28, 0x0c	; 12
    2738:	2f af       	std	Y+63, r18	; 0x3f
    273a:	2c 97       	sbiw	r28, 0x0c	; 12
    273c:	24 96       	adiw	r28, 0x04	; 4
    273e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2740:	24 97       	sbiw	r28, 0x04	; 4
    2742:	48 a1       	ldd	r20, Y+32	; 0x20
    2744:	34 17       	cp	r19, r20
    2746:	18 f0       	brcs	.+6      	; 0x274e <Timer_vidAsychDelay+0x2d4>
    2748:	2c 96       	adiw	r28, 0x0c	; 12
    274a:	1f ae       	std	Y+63, r1	; 0x3f
    274c:	2c 97       	sbiw	r28, 0x0c	; 12
    274e:	2b 96       	adiw	r28, 0x0b	; 11
    2750:	5f ad       	ldd	r21, Y+63	; 0x3f
    2752:	2b 97       	sbiw	r28, 0x0b	; 11
    2754:	24 96       	adiw	r28, 0x04	; 4
    2756:	6f ad       	ldd	r22, Y+63	; 0x3f
    2758:	24 97       	sbiw	r28, 0x04	; 4
    275a:	56 0f       	add	r21, r22
    275c:	2d 96       	adiw	r28, 0x0d	; 13
    275e:	5f af       	std	Y+63, r21	; 0x3f
    2760:	2d 97       	sbiw	r28, 0x0d	; 13
    2762:	71 e0       	ldi	r23, 0x01	; 1
    2764:	2e 96       	adiw	r28, 0x0e	; 14
    2766:	7f af       	std	Y+63, r23	; 0x3f
    2768:	2e 97       	sbiw	r28, 0x0e	; 14
    276a:	2d 96       	adiw	r28, 0x0d	; 13
    276c:	8f ad       	ldd	r24, Y+63	; 0x3f
    276e:	2d 97       	sbiw	r28, 0x0d	; 13
    2770:	24 96       	adiw	r28, 0x04	; 4
    2772:	9f ad       	ldd	r25, Y+63	; 0x3f
    2774:	24 97       	sbiw	r28, 0x04	; 4
    2776:	89 17       	cp	r24, r25
    2778:	18 f0       	brcs	.+6      	; 0x2780 <Timer_vidAsychDelay+0x306>
    277a:	2e 96       	adiw	r28, 0x0e	; 14
    277c:	1f ae       	std	Y+63, r1	; 0x3f
    277e:	2e 97       	sbiw	r28, 0x0e	; 14
    2780:	2c 96       	adiw	r28, 0x0c	; 12
    2782:	0f ad       	ldd	r16, Y+63	; 0x3f
    2784:	2c 97       	sbiw	r28, 0x0c	; 12
    2786:	2e 96       	adiw	r28, 0x0e	; 14
    2788:	1f ad       	ldd	r17, Y+63	; 0x3f
    278a:	2e 97       	sbiw	r28, 0x0e	; 14
    278c:	01 2b       	or	r16, r17
    278e:	2c 96       	adiw	r28, 0x0c	; 12
    2790:	0f af       	std	Y+63, r16	; 0x3f
    2792:	2c 97       	sbiw	r28, 0x0c	; 12
    2794:	2d 96       	adiw	r28, 0x0d	; 13
    2796:	2f ad       	ldd	r18, Y+63	; 0x3f
    2798:	2d 97       	sbiw	r28, 0x0d	; 13
    279a:	24 96       	adiw	r28, 0x04	; 4
    279c:	2f af       	std	Y+63, r18	; 0x3f
    279e:	24 97       	sbiw	r28, 0x04	; 4
    27a0:	39 a1       	ldd	r19, Y+33	; 0x21
    27a2:	49 89       	ldd	r20, Y+17	; 0x11
    27a4:	34 0f       	add	r19, r20
    27a6:	25 96       	adiw	r28, 0x05	; 5
    27a8:	3f af       	std	Y+63, r19	; 0x3f
    27aa:	25 97       	sbiw	r28, 0x05	; 5
    27ac:	51 e0       	ldi	r21, 0x01	; 1
    27ae:	2f 96       	adiw	r28, 0x0f	; 15
    27b0:	5f af       	std	Y+63, r21	; 0x3f
    27b2:	2f 97       	sbiw	r28, 0x0f	; 15
    27b4:	25 96       	adiw	r28, 0x05	; 5
    27b6:	6f ad       	ldd	r22, Y+63	; 0x3f
    27b8:	25 97       	sbiw	r28, 0x05	; 5
    27ba:	79 a1       	ldd	r23, Y+33	; 0x21
    27bc:	67 17       	cp	r22, r23
    27be:	18 f0       	brcs	.+6      	; 0x27c6 <Timer_vidAsychDelay+0x34c>
    27c0:	2f 96       	adiw	r28, 0x0f	; 15
    27c2:	1f ae       	std	Y+63, r1	; 0x3f
    27c4:	2f 97       	sbiw	r28, 0x0f	; 15
    27c6:	2c 96       	adiw	r28, 0x0c	; 12
    27c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    27ca:	2c 97       	sbiw	r28, 0x0c	; 12
    27cc:	25 96       	adiw	r28, 0x05	; 5
    27ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d0:	25 97       	sbiw	r28, 0x05	; 5
    27d2:	89 0f       	add	r24, r25
    27d4:	60 96       	adiw	r28, 0x10	; 16
    27d6:	8f af       	std	Y+63, r24	; 0x3f
    27d8:	60 97       	sbiw	r28, 0x10	; 16
    27da:	01 e0       	ldi	r16, 0x01	; 1
    27dc:	61 96       	adiw	r28, 0x11	; 17
    27de:	0f af       	std	Y+63, r16	; 0x3f
    27e0:	61 97       	sbiw	r28, 0x11	; 17
    27e2:	60 96       	adiw	r28, 0x10	; 16
    27e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    27e6:	60 97       	sbiw	r28, 0x10	; 16
    27e8:	25 96       	adiw	r28, 0x05	; 5
    27ea:	2f ad       	ldd	r18, Y+63	; 0x3f
    27ec:	25 97       	sbiw	r28, 0x05	; 5
    27ee:	12 17       	cp	r17, r18
    27f0:	18 f0       	brcs	.+6      	; 0x27f8 <Timer_vidAsychDelay+0x37e>
    27f2:	61 96       	adiw	r28, 0x11	; 17
    27f4:	1f ae       	std	Y+63, r1	; 0x3f
    27f6:	61 97       	sbiw	r28, 0x11	; 17
    27f8:	2f 96       	adiw	r28, 0x0f	; 15
    27fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    27fc:	2f 97       	sbiw	r28, 0x0f	; 15
    27fe:	61 96       	adiw	r28, 0x11	; 17
    2800:	4f ad       	ldd	r20, Y+63	; 0x3f
    2802:	61 97       	sbiw	r28, 0x11	; 17
    2804:	34 2b       	or	r19, r20
    2806:	2f 96       	adiw	r28, 0x0f	; 15
    2808:	3f af       	std	Y+63, r19	; 0x3f
    280a:	2f 97       	sbiw	r28, 0x0f	; 15
    280c:	60 96       	adiw	r28, 0x10	; 16
    280e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2810:	60 97       	sbiw	r28, 0x10	; 16
    2812:	25 96       	adiw	r28, 0x05	; 5
    2814:	5f af       	std	Y+63, r21	; 0x3f
    2816:	25 97       	sbiw	r28, 0x05	; 5
    2818:	6a a1       	ldd	r22, Y+34	; 0x22
    281a:	7a 89       	ldd	r23, Y+18	; 0x12
    281c:	67 0f       	add	r22, r23
    281e:	26 96       	adiw	r28, 0x06	; 6
    2820:	6f af       	std	Y+63, r22	; 0x3f
    2822:	26 97       	sbiw	r28, 0x06	; 6
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	62 96       	adiw	r28, 0x12	; 18
    2828:	8f af       	std	Y+63, r24	; 0x3f
    282a:	62 97       	sbiw	r28, 0x12	; 18
    282c:	26 96       	adiw	r28, 0x06	; 6
    282e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2830:	26 97       	sbiw	r28, 0x06	; 6
    2832:	0a a1       	ldd	r16, Y+34	; 0x22
    2834:	90 17       	cp	r25, r16
    2836:	18 f0       	brcs	.+6      	; 0x283e <Timer_vidAsychDelay+0x3c4>
    2838:	62 96       	adiw	r28, 0x12	; 18
    283a:	1f ae       	std	Y+63, r1	; 0x3f
    283c:	62 97       	sbiw	r28, 0x12	; 18
    283e:	2f 96       	adiw	r28, 0x0f	; 15
    2840:	1f ad       	ldd	r17, Y+63	; 0x3f
    2842:	2f 97       	sbiw	r28, 0x0f	; 15
    2844:	26 96       	adiw	r28, 0x06	; 6
    2846:	2f ad       	ldd	r18, Y+63	; 0x3f
    2848:	26 97       	sbiw	r28, 0x06	; 6
    284a:	12 0f       	add	r17, r18
    284c:	63 96       	adiw	r28, 0x13	; 19
    284e:	1f af       	std	Y+63, r17	; 0x3f
    2850:	63 97       	sbiw	r28, 0x13	; 19
    2852:	31 e0       	ldi	r19, 0x01	; 1
    2854:	64 96       	adiw	r28, 0x14	; 20
    2856:	3f af       	std	Y+63, r19	; 0x3f
    2858:	64 97       	sbiw	r28, 0x14	; 20
    285a:	63 96       	adiw	r28, 0x13	; 19
    285c:	4f ad       	ldd	r20, Y+63	; 0x3f
    285e:	63 97       	sbiw	r28, 0x13	; 19
    2860:	26 96       	adiw	r28, 0x06	; 6
    2862:	5f ad       	ldd	r21, Y+63	; 0x3f
    2864:	26 97       	sbiw	r28, 0x06	; 6
    2866:	45 17       	cp	r20, r21
    2868:	18 f0       	brcs	.+6      	; 0x2870 <Timer_vidAsychDelay+0x3f6>
    286a:	64 96       	adiw	r28, 0x14	; 20
    286c:	1f ae       	std	Y+63, r1	; 0x3f
    286e:	64 97       	sbiw	r28, 0x14	; 20
    2870:	62 96       	adiw	r28, 0x12	; 18
    2872:	6f ad       	ldd	r22, Y+63	; 0x3f
    2874:	62 97       	sbiw	r28, 0x12	; 18
    2876:	64 96       	adiw	r28, 0x14	; 20
    2878:	7f ad       	ldd	r23, Y+63	; 0x3f
    287a:	64 97       	sbiw	r28, 0x14	; 20
    287c:	67 2b       	or	r22, r23
    287e:	62 96       	adiw	r28, 0x12	; 18
    2880:	6f af       	std	Y+63, r22	; 0x3f
    2882:	62 97       	sbiw	r28, 0x12	; 18
    2884:	63 96       	adiw	r28, 0x13	; 19
    2886:	8f ad       	ldd	r24, Y+63	; 0x3f
    2888:	63 97       	sbiw	r28, 0x13	; 19
    288a:	26 96       	adiw	r28, 0x06	; 6
    288c:	8f af       	std	Y+63, r24	; 0x3f
    288e:	26 97       	sbiw	r28, 0x06	; 6
    2890:	9b a1       	ldd	r25, Y+35	; 0x23
    2892:	0b 89       	ldd	r16, Y+19	; 0x13
    2894:	90 0f       	add	r25, r16
    2896:	27 96       	adiw	r28, 0x07	; 7
    2898:	9f af       	std	Y+63, r25	; 0x3f
    289a:	27 97       	sbiw	r28, 0x07	; 7
    289c:	11 e0       	ldi	r17, 0x01	; 1
    289e:	65 96       	adiw	r28, 0x15	; 21
    28a0:	1f af       	std	Y+63, r17	; 0x3f
    28a2:	65 97       	sbiw	r28, 0x15	; 21
    28a4:	27 96       	adiw	r28, 0x07	; 7
    28a6:	2f ad       	ldd	r18, Y+63	; 0x3f
    28a8:	27 97       	sbiw	r28, 0x07	; 7
    28aa:	3b a1       	ldd	r19, Y+35	; 0x23
    28ac:	23 17       	cp	r18, r19
    28ae:	18 f0       	brcs	.+6      	; 0x28b6 <Timer_vidAsychDelay+0x43c>
    28b0:	65 96       	adiw	r28, 0x15	; 21
    28b2:	1f ae       	std	Y+63, r1	; 0x3f
    28b4:	65 97       	sbiw	r28, 0x15	; 21
    28b6:	62 96       	adiw	r28, 0x12	; 18
    28b8:	4f ad       	ldd	r20, Y+63	; 0x3f
    28ba:	62 97       	sbiw	r28, 0x12	; 18
    28bc:	27 96       	adiw	r28, 0x07	; 7
    28be:	5f ad       	ldd	r21, Y+63	; 0x3f
    28c0:	27 97       	sbiw	r28, 0x07	; 7
    28c2:	45 0f       	add	r20, r21
    28c4:	66 96       	adiw	r28, 0x16	; 22
    28c6:	4f af       	std	Y+63, r20	; 0x3f
    28c8:	66 97       	sbiw	r28, 0x16	; 22
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	67 96       	adiw	r28, 0x17	; 23
    28ce:	6f af       	std	Y+63, r22	; 0x3f
    28d0:	67 97       	sbiw	r28, 0x17	; 23
    28d2:	66 96       	adiw	r28, 0x16	; 22
    28d4:	7f ad       	ldd	r23, Y+63	; 0x3f
    28d6:	66 97       	sbiw	r28, 0x16	; 22
    28d8:	27 96       	adiw	r28, 0x07	; 7
    28da:	8f ad       	ldd	r24, Y+63	; 0x3f
    28dc:	27 97       	sbiw	r28, 0x07	; 7
    28de:	78 17       	cp	r23, r24
    28e0:	18 f0       	brcs	.+6      	; 0x28e8 <Timer_vidAsychDelay+0x46e>
    28e2:	67 96       	adiw	r28, 0x17	; 23
    28e4:	1f ae       	std	Y+63, r1	; 0x3f
    28e6:	67 97       	sbiw	r28, 0x17	; 23
    28e8:	65 96       	adiw	r28, 0x15	; 21
    28ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ec:	65 97       	sbiw	r28, 0x15	; 21
    28ee:	67 96       	adiw	r28, 0x17	; 23
    28f0:	0f ad       	ldd	r16, Y+63	; 0x3f
    28f2:	67 97       	sbiw	r28, 0x17	; 23
    28f4:	90 2b       	or	r25, r16
    28f6:	65 96       	adiw	r28, 0x15	; 21
    28f8:	9f af       	std	Y+63, r25	; 0x3f
    28fa:	65 97       	sbiw	r28, 0x15	; 21
    28fc:	66 96       	adiw	r28, 0x16	; 22
    28fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    2900:	66 97       	sbiw	r28, 0x16	; 22
    2902:	27 96       	adiw	r28, 0x07	; 7
    2904:	1f af       	std	Y+63, r17	; 0x3f
    2906:	27 97       	sbiw	r28, 0x07	; 7
    2908:	2c a1       	ldd	r18, Y+36	; 0x24
    290a:	3c 89       	ldd	r19, Y+20	; 0x14
    290c:	23 0f       	add	r18, r19
    290e:	28 96       	adiw	r28, 0x08	; 8
    2910:	2f af       	std	Y+63, r18	; 0x3f
    2912:	28 97       	sbiw	r28, 0x08	; 8
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	68 96       	adiw	r28, 0x18	; 24
    2918:	4f af       	std	Y+63, r20	; 0x3f
    291a:	68 97       	sbiw	r28, 0x18	; 24
    291c:	28 96       	adiw	r28, 0x08	; 8
    291e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2920:	28 97       	sbiw	r28, 0x08	; 8
    2922:	6c a1       	ldd	r22, Y+36	; 0x24
    2924:	56 17       	cp	r21, r22
    2926:	18 f0       	brcs	.+6      	; 0x292e <Timer_vidAsychDelay+0x4b4>
    2928:	68 96       	adiw	r28, 0x18	; 24
    292a:	1f ae       	std	Y+63, r1	; 0x3f
    292c:	68 97       	sbiw	r28, 0x18	; 24
    292e:	65 96       	adiw	r28, 0x15	; 21
    2930:	7f ad       	ldd	r23, Y+63	; 0x3f
    2932:	65 97       	sbiw	r28, 0x15	; 21
    2934:	28 96       	adiw	r28, 0x08	; 8
    2936:	8f ad       	ldd	r24, Y+63	; 0x3f
    2938:	28 97       	sbiw	r28, 0x08	; 8
    293a:	78 0f       	add	r23, r24
    293c:	69 96       	adiw	r28, 0x19	; 25
    293e:	7f af       	std	Y+63, r23	; 0x3f
    2940:	69 97       	sbiw	r28, 0x19	; 25
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	6a 96       	adiw	r28, 0x1a	; 26
    2946:	9f af       	std	Y+63, r25	; 0x3f
    2948:	6a 97       	sbiw	r28, 0x1a	; 26
    294a:	69 96       	adiw	r28, 0x19	; 25
    294c:	0f ad       	ldd	r16, Y+63	; 0x3f
    294e:	69 97       	sbiw	r28, 0x19	; 25
    2950:	28 96       	adiw	r28, 0x08	; 8
    2952:	1f ad       	ldd	r17, Y+63	; 0x3f
    2954:	28 97       	sbiw	r28, 0x08	; 8
    2956:	01 17       	cp	r16, r17
    2958:	18 f0       	brcs	.+6      	; 0x2960 <Timer_vidAsychDelay+0x4e6>
    295a:	6a 96       	adiw	r28, 0x1a	; 26
    295c:	1f ae       	std	Y+63, r1	; 0x3f
    295e:	6a 97       	sbiw	r28, 0x1a	; 26
    2960:	68 96       	adiw	r28, 0x18	; 24
    2962:	2f ad       	ldd	r18, Y+63	; 0x3f
    2964:	68 97       	sbiw	r28, 0x18	; 24
    2966:	6a 96       	adiw	r28, 0x1a	; 26
    2968:	3f ad       	ldd	r19, Y+63	; 0x3f
    296a:	6a 97       	sbiw	r28, 0x1a	; 26
    296c:	23 2b       	or	r18, r19
    296e:	68 96       	adiw	r28, 0x18	; 24
    2970:	2f af       	std	Y+63, r18	; 0x3f
    2972:	68 97       	sbiw	r28, 0x18	; 24
    2974:	69 96       	adiw	r28, 0x19	; 25
    2976:	4f ad       	ldd	r20, Y+63	; 0x3f
    2978:	69 97       	sbiw	r28, 0x19	; 25
    297a:	28 96       	adiw	r28, 0x08	; 8
    297c:	4f af       	std	Y+63, r20	; 0x3f
    297e:	28 97       	sbiw	r28, 0x08	; 8
    2980:	5d a1       	ldd	r21, Y+37	; 0x25
    2982:	6d 89       	ldd	r22, Y+21	; 0x15
    2984:	56 0f       	add	r21, r22
    2986:	29 96       	adiw	r28, 0x09	; 9
    2988:	5f af       	std	Y+63, r21	; 0x3f
    298a:	29 97       	sbiw	r28, 0x09	; 9
    298c:	71 e0       	ldi	r23, 0x01	; 1
    298e:	6b 96       	adiw	r28, 0x1b	; 27
    2990:	7f af       	std	Y+63, r23	; 0x3f
    2992:	6b 97       	sbiw	r28, 0x1b	; 27
    2994:	29 96       	adiw	r28, 0x09	; 9
    2996:	8f ad       	ldd	r24, Y+63	; 0x3f
    2998:	29 97       	sbiw	r28, 0x09	; 9
    299a:	9d a1       	ldd	r25, Y+37	; 0x25
    299c:	89 17       	cp	r24, r25
    299e:	18 f0       	brcs	.+6      	; 0x29a6 <Timer_vidAsychDelay+0x52c>
    29a0:	6b 96       	adiw	r28, 0x1b	; 27
    29a2:	1f ae       	std	Y+63, r1	; 0x3f
    29a4:	6b 97       	sbiw	r28, 0x1b	; 27
    29a6:	68 96       	adiw	r28, 0x18	; 24
    29a8:	0f ad       	ldd	r16, Y+63	; 0x3f
    29aa:	68 97       	sbiw	r28, 0x18	; 24
    29ac:	29 96       	adiw	r28, 0x09	; 9
    29ae:	1f ad       	ldd	r17, Y+63	; 0x3f
    29b0:	29 97       	sbiw	r28, 0x09	; 9
    29b2:	01 0f       	add	r16, r17
    29b4:	6c 96       	adiw	r28, 0x1c	; 28
    29b6:	0f af       	std	Y+63, r16	; 0x3f
    29b8:	6c 97       	sbiw	r28, 0x1c	; 28
    29ba:	21 e0       	ldi	r18, 0x01	; 1
    29bc:	6d 96       	adiw	r28, 0x1d	; 29
    29be:	2f af       	std	Y+63, r18	; 0x3f
    29c0:	6d 97       	sbiw	r28, 0x1d	; 29
    29c2:	6c 96       	adiw	r28, 0x1c	; 28
    29c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    29c6:	6c 97       	sbiw	r28, 0x1c	; 28
    29c8:	29 96       	adiw	r28, 0x09	; 9
    29ca:	4f ad       	ldd	r20, Y+63	; 0x3f
    29cc:	29 97       	sbiw	r28, 0x09	; 9
    29ce:	34 17       	cp	r19, r20
    29d0:	18 f0       	brcs	.+6      	; 0x29d8 <Timer_vidAsychDelay+0x55e>
    29d2:	6d 96       	adiw	r28, 0x1d	; 29
    29d4:	1f ae       	std	Y+63, r1	; 0x3f
    29d6:	6d 97       	sbiw	r28, 0x1d	; 29
    29d8:	6b 96       	adiw	r28, 0x1b	; 27
    29da:	5f ad       	ldd	r21, Y+63	; 0x3f
    29dc:	6b 97       	sbiw	r28, 0x1b	; 27
    29de:	6d 96       	adiw	r28, 0x1d	; 29
    29e0:	6f ad       	ldd	r22, Y+63	; 0x3f
    29e2:	6d 97       	sbiw	r28, 0x1d	; 29
    29e4:	56 2b       	or	r21, r22
    29e6:	6b 96       	adiw	r28, 0x1b	; 27
    29e8:	5f af       	std	Y+63, r21	; 0x3f
    29ea:	6b 97       	sbiw	r28, 0x1b	; 27
    29ec:	6c 96       	adiw	r28, 0x1c	; 28
    29ee:	7f ad       	ldd	r23, Y+63	; 0x3f
    29f0:	6c 97       	sbiw	r28, 0x1c	; 28
    29f2:	29 96       	adiw	r28, 0x09	; 9
    29f4:	7f af       	std	Y+63, r23	; 0x3f
    29f6:	29 97       	sbiw	r28, 0x09	; 9
    29f8:	8e a1       	ldd	r24, Y+38	; 0x26
    29fa:	9e 89       	ldd	r25, Y+22	; 0x16
    29fc:	89 0f       	add	r24, r25
    29fe:	2a 96       	adiw	r28, 0x0a	; 10
    2a00:	8f af       	std	Y+63, r24	; 0x3f
    2a02:	2a 97       	sbiw	r28, 0x0a	; 10
    2a04:	6b 96       	adiw	r28, 0x1b	; 27
    2a06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a08:	6b 97       	sbiw	r28, 0x1b	; 27
    2a0a:	2a 96       	adiw	r28, 0x0a	; 10
    2a0c:	0f ad       	ldd	r16, Y+63	; 0x3f
    2a0e:	2a 97       	sbiw	r28, 0x0a	; 10
    2a10:	80 0f       	add	r24, r16
    2a12:	2a 96       	adiw	r28, 0x0a	; 10
    2a14:	8f af       	std	Y+63, r24	; 0x3f
    2a16:	2a 97       	sbiw	r28, 0x0a	; 10
    2a18:	23 96       	adiw	r28, 0x03	; 3
    2a1a:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a1c:	23 97       	sbiw	r28, 0x03	; 3
    2a1e:	1f 8f       	std	Y+31, r17	; 0x1f
    2a20:	24 96       	adiw	r28, 0x04	; 4
    2a22:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a24:	24 97       	sbiw	r28, 0x04	; 4
    2a26:	28 a3       	std	Y+32, r18	; 0x20
    2a28:	25 96       	adiw	r28, 0x05	; 5
    2a2a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a2c:	25 97       	sbiw	r28, 0x05	; 5
    2a2e:	39 a3       	std	Y+33, r19	; 0x21
    2a30:	26 96       	adiw	r28, 0x06	; 6
    2a32:	4f ad       	ldd	r20, Y+63	; 0x3f
    2a34:	26 97       	sbiw	r28, 0x06	; 6
    2a36:	4a a3       	std	Y+34, r20	; 0x22
    2a38:	27 96       	adiw	r28, 0x07	; 7
    2a3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a3c:	27 97       	sbiw	r28, 0x07	; 7
    2a3e:	5b a3       	std	Y+35, r21	; 0x23
    2a40:	28 96       	adiw	r28, 0x08	; 8
    2a42:	6f ad       	ldd	r22, Y+63	; 0x3f
    2a44:	28 97       	sbiw	r28, 0x08	; 8
    2a46:	6c a3       	std	Y+36, r22	; 0x24
    2a48:	29 96       	adiw	r28, 0x09	; 9
    2a4a:	7f ad       	ldd	r23, Y+63	; 0x3f
    2a4c:	29 97       	sbiw	r28, 0x09	; 9
    2a4e:	7d a3       	std	Y+37, r23	; 0x25
    2a50:	2a 96       	adiw	r28, 0x0a	; 10
    2a52:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a54:	2a 97       	sbiw	r28, 0x0a	; 10
    2a56:	8e a3       	std	Y+38, r24	; 0x26
    2a58:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2a5a:	38 a1       	ldd	r19, Y+32	; 0x20
    2a5c:	49 a1       	ldd	r20, Y+33	; 0x21
    2a5e:	5a a1       	ldd	r21, Y+34	; 0x22
    2a60:	6b a1       	ldd	r22, Y+35	; 0x23
    2a62:	7c a1       	ldd	r23, Y+36	; 0x24
    2a64:	8d a1       	ldd	r24, Y+37	; 0x25
    2a66:	9e a1       	ldd	r25, Y+38	; 0x26
    2a68:	07 e0       	ldi	r16, 0x07	; 7
    2a6a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2a6e:	22 2e       	mov	r2, r18
    2a70:	33 2e       	mov	r3, r19
    2a72:	44 2e       	mov	r4, r20
    2a74:	55 2e       	mov	r5, r21
    2a76:	66 2e       	mov	r6, r22
    2a78:	77 2e       	mov	r7, r23
    2a7a:	88 2e       	mov	r8, r24
    2a7c:	99 2e       	mov	r9, r25
    2a7e:	a2 2c       	mov	r10, r2
    2a80:	b3 2c       	mov	r11, r3
    2a82:	c4 2c       	mov	r12, r4
    2a84:	d5 2c       	mov	r13, r5
    2a86:	e6 2c       	mov	r14, r6
    2a88:	f7 2c       	mov	r15, r7
    2a8a:	08 2d       	mov	r16, r8
    2a8c:	19 2d       	mov	r17, r9
    2a8e:	2a 2d       	mov	r18, r10
    2a90:	3b 2d       	mov	r19, r11
    2a92:	4c 2d       	mov	r20, r12
    2a94:	5d 2d       	mov	r21, r13
    2a96:	6e 2d       	mov	r22, r14
    2a98:	7f 2d       	mov	r23, r15
    2a9a:	80 2f       	mov	r24, r16
    2a9c:	91 2f       	mov	r25, r17
    2a9e:	03 e0       	ldi	r16, 0x03	; 3
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    2aa4:	a2 2e       	mov	r10, r18
    2aa6:	b3 2e       	mov	r11, r19
    2aa8:	c4 2e       	mov	r12, r20
    2aaa:	d5 2e       	mov	r13, r21
    2aac:	e6 2e       	mov	r14, r22
    2aae:	f7 2e       	mov	r15, r23
    2ab0:	08 2f       	mov	r16, r24
    2ab2:	19 2f       	mov	r17, r25
    2ab4:	a9 82       	std	Y+1, r10	; 0x01
    2ab6:	ba 82       	std	Y+2, r11	; 0x02
    2ab8:	cb 82       	std	Y+3, r12	; 0x03
    2aba:	dc 82       	std	Y+4, r13	; 0x04
    2abc:	ed 82       	std	Y+5, r14	; 0x05
    2abe:	fe 82       	std	Y+6, r15	; 0x06
    2ac0:	0f 83       	std	Y+7, r16	; 0x07
    2ac2:	18 87       	std	Y+8, r17	; 0x08
        LOC_u32OvfCounts = (u64Counts + 255LLU) / 256LLU;
    2ac4:	99 81       	ldd	r25, Y+1	; 0x01
    2ac6:	6e 96       	adiw	r28, 0x1e	; 30
    2ac8:	9f af       	std	Y+63, r25	; 0x3f
    2aca:	6e 97       	sbiw	r28, 0x1e	; 30
    2acc:	0a 81       	ldd	r16, Y+2	; 0x02
    2ace:	6f 96       	adiw	r28, 0x1f	; 31
    2ad0:	0f af       	std	Y+63, r16	; 0x3f
    2ad2:	6f 97       	sbiw	r28, 0x1f	; 31
    2ad4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ad6:	a0 96       	adiw	r28, 0x20	; 32
    2ad8:	1f af       	std	Y+63, r17	; 0x3f
    2ada:	a0 97       	sbiw	r28, 0x20	; 32
    2adc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ade:	a1 96       	adiw	r28, 0x21	; 33
    2ae0:	2f af       	std	Y+63, r18	; 0x3f
    2ae2:	a1 97       	sbiw	r28, 0x21	; 33
    2ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae6:	a2 96       	adiw	r28, 0x22	; 34
    2ae8:	3f af       	std	Y+63, r19	; 0x3f
    2aea:	a2 97       	sbiw	r28, 0x22	; 34
    2aec:	4e 81       	ldd	r20, Y+6	; 0x06
    2aee:	a3 96       	adiw	r28, 0x23	; 35
    2af0:	4f af       	std	Y+63, r20	; 0x3f
    2af2:	a3 97       	sbiw	r28, 0x23	; 35
    2af4:	5f 81       	ldd	r21, Y+7	; 0x07
    2af6:	a4 96       	adiw	r28, 0x24	; 36
    2af8:	5f af       	std	Y+63, r21	; 0x3f
    2afa:	a4 97       	sbiw	r28, 0x24	; 36
    2afc:	68 85       	ldd	r22, Y+8	; 0x08
    2afe:	a5 96       	adiw	r28, 0x25	; 37
    2b00:	6f af       	std	Y+63, r22	; 0x3f
    2b02:	a5 97       	sbiw	r28, 0x25	; 37
    2b04:	7f ef       	ldi	r23, 0xFF	; 255
    2b06:	a6 96       	adiw	r28, 0x26	; 38
    2b08:	7f af       	std	Y+63, r23	; 0x3f
    2b0a:	a6 97       	sbiw	r28, 0x26	; 38
    2b0c:	a7 96       	adiw	r28, 0x27	; 39
    2b0e:	1f ae       	std	Y+63, r1	; 0x3f
    2b10:	a7 97       	sbiw	r28, 0x27	; 39
    2b12:	a8 96       	adiw	r28, 0x28	; 40
    2b14:	1f ae       	std	Y+63, r1	; 0x3f
    2b16:	a8 97       	sbiw	r28, 0x28	; 40
    2b18:	a9 96       	adiw	r28, 0x29	; 41
    2b1a:	1f ae       	std	Y+63, r1	; 0x3f
    2b1c:	a9 97       	sbiw	r28, 0x29	; 41
    2b1e:	aa 96       	adiw	r28, 0x2a	; 42
    2b20:	1f ae       	std	Y+63, r1	; 0x3f
    2b22:	aa 97       	sbiw	r28, 0x2a	; 42
    2b24:	ab 96       	adiw	r28, 0x2b	; 43
    2b26:	1f ae       	std	Y+63, r1	; 0x3f
    2b28:	ab 97       	sbiw	r28, 0x2b	; 43
    2b2a:	ac 96       	adiw	r28, 0x2c	; 44
    2b2c:	1f ae       	std	Y+63, r1	; 0x3f
    2b2e:	ac 97       	sbiw	r28, 0x2c	; 44
    2b30:	ad 96       	adiw	r28, 0x2d	; 45
    2b32:	1f ae       	std	Y+63, r1	; 0x3f
    2b34:	ad 97       	sbiw	r28, 0x2d	; 45
    2b36:	6e 96       	adiw	r28, 0x1e	; 30
    2b38:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b3a:	6e 97       	sbiw	r28, 0x1e	; 30
    2b3c:	a6 96       	adiw	r28, 0x26	; 38
    2b3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b40:	a6 97       	sbiw	r28, 0x26	; 38
    2b42:	89 0f       	add	r24, r25
    2b44:	ae 96       	adiw	r28, 0x2e	; 46
    2b46:	8f af       	std	Y+63, r24	; 0x3f
    2b48:	ae 97       	sbiw	r28, 0x2e	; 46
    2b4a:	01 e0       	ldi	r16, 0x01	; 1
    2b4c:	e6 96       	adiw	r28, 0x36	; 54
    2b4e:	0f af       	std	Y+63, r16	; 0x3f
    2b50:	e6 97       	sbiw	r28, 0x36	; 54
    2b52:	ae 96       	adiw	r28, 0x2e	; 46
    2b54:	1f ad       	ldd	r17, Y+63	; 0x3f
    2b56:	ae 97       	sbiw	r28, 0x2e	; 46
    2b58:	6e 96       	adiw	r28, 0x1e	; 30
    2b5a:	2f ad       	ldd	r18, Y+63	; 0x3f
    2b5c:	6e 97       	sbiw	r28, 0x1e	; 30
    2b5e:	12 17       	cp	r17, r18
    2b60:	18 f0       	brcs	.+6      	; 0x2b68 <Timer_vidAsychDelay+0x6ee>
    2b62:	e6 96       	adiw	r28, 0x36	; 54
    2b64:	1f ae       	std	Y+63, r1	; 0x3f
    2b66:	e6 97       	sbiw	r28, 0x36	; 54
    2b68:	6f 96       	adiw	r28, 0x1f	; 31
    2b6a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b6c:	6f 97       	sbiw	r28, 0x1f	; 31
    2b6e:	a7 96       	adiw	r28, 0x27	; 39
    2b70:	4f ad       	ldd	r20, Y+63	; 0x3f
    2b72:	a7 97       	sbiw	r28, 0x27	; 39
    2b74:	34 0f       	add	r19, r20
    2b76:	af 96       	adiw	r28, 0x2f	; 47
    2b78:	3f af       	std	Y+63, r19	; 0x3f
    2b7a:	af 97       	sbiw	r28, 0x2f	; 47
    2b7c:	51 e0       	ldi	r21, 0x01	; 1
    2b7e:	e7 96       	adiw	r28, 0x37	; 55
    2b80:	5f af       	std	Y+63, r21	; 0x3f
    2b82:	e7 97       	sbiw	r28, 0x37	; 55
    2b84:	af 96       	adiw	r28, 0x2f	; 47
    2b86:	6f ad       	ldd	r22, Y+63	; 0x3f
    2b88:	af 97       	sbiw	r28, 0x2f	; 47
    2b8a:	6f 96       	adiw	r28, 0x1f	; 31
    2b8c:	7f ad       	ldd	r23, Y+63	; 0x3f
    2b8e:	6f 97       	sbiw	r28, 0x1f	; 31
    2b90:	67 17       	cp	r22, r23
    2b92:	18 f0       	brcs	.+6      	; 0x2b9a <Timer_vidAsychDelay+0x720>
    2b94:	e7 96       	adiw	r28, 0x37	; 55
    2b96:	1f ae       	std	Y+63, r1	; 0x3f
    2b98:	e7 97       	sbiw	r28, 0x37	; 55
    2b9a:	e6 96       	adiw	r28, 0x36	; 54
    2b9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b9e:	e6 97       	sbiw	r28, 0x36	; 54
    2ba0:	af 96       	adiw	r28, 0x2f	; 47
    2ba2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ba4:	af 97       	sbiw	r28, 0x2f	; 47
    2ba6:	89 0f       	add	r24, r25
    2ba8:	e8 96       	adiw	r28, 0x38	; 56
    2baa:	8f af       	std	Y+63, r24	; 0x3f
    2bac:	e8 97       	sbiw	r28, 0x38	; 56
    2bae:	01 e0       	ldi	r16, 0x01	; 1
    2bb0:	e9 96       	adiw	r28, 0x39	; 57
    2bb2:	0f af       	std	Y+63, r16	; 0x3f
    2bb4:	e9 97       	sbiw	r28, 0x39	; 57
    2bb6:	e8 96       	adiw	r28, 0x38	; 56
    2bb8:	1f ad       	ldd	r17, Y+63	; 0x3f
    2bba:	e8 97       	sbiw	r28, 0x38	; 56
    2bbc:	af 96       	adiw	r28, 0x2f	; 47
    2bbe:	2f ad       	ldd	r18, Y+63	; 0x3f
    2bc0:	af 97       	sbiw	r28, 0x2f	; 47
    2bc2:	12 17       	cp	r17, r18
    2bc4:	18 f0       	brcs	.+6      	; 0x2bcc <Timer_vidAsychDelay+0x752>
    2bc6:	e9 96       	adiw	r28, 0x39	; 57
    2bc8:	1f ae       	std	Y+63, r1	; 0x3f
    2bca:	e9 97       	sbiw	r28, 0x39	; 57
    2bcc:	e7 96       	adiw	r28, 0x37	; 55
    2bce:	3f ad       	ldd	r19, Y+63	; 0x3f
    2bd0:	e7 97       	sbiw	r28, 0x37	; 55
    2bd2:	e9 96       	adiw	r28, 0x39	; 57
    2bd4:	4f ad       	ldd	r20, Y+63	; 0x3f
    2bd6:	e9 97       	sbiw	r28, 0x39	; 57
    2bd8:	34 2b       	or	r19, r20
    2bda:	e7 96       	adiw	r28, 0x37	; 55
    2bdc:	3f af       	std	Y+63, r19	; 0x3f
    2bde:	e7 97       	sbiw	r28, 0x37	; 55
    2be0:	e8 96       	adiw	r28, 0x38	; 56
    2be2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2be4:	e8 97       	sbiw	r28, 0x38	; 56
    2be6:	af 96       	adiw	r28, 0x2f	; 47
    2be8:	5f af       	std	Y+63, r21	; 0x3f
    2bea:	af 97       	sbiw	r28, 0x2f	; 47
    2bec:	a0 96       	adiw	r28, 0x20	; 32
    2bee:	6f ad       	ldd	r22, Y+63	; 0x3f
    2bf0:	a0 97       	sbiw	r28, 0x20	; 32
    2bf2:	a8 96       	adiw	r28, 0x28	; 40
    2bf4:	7f ad       	ldd	r23, Y+63	; 0x3f
    2bf6:	a8 97       	sbiw	r28, 0x28	; 40
    2bf8:	67 0f       	add	r22, r23
    2bfa:	e0 96       	adiw	r28, 0x30	; 48
    2bfc:	6f af       	std	Y+63, r22	; 0x3f
    2bfe:	e0 97       	sbiw	r28, 0x30	; 48
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	ea 96       	adiw	r28, 0x3a	; 58
    2c04:	8f af       	std	Y+63, r24	; 0x3f
    2c06:	ea 97       	sbiw	r28, 0x3a	; 58
    2c08:	e0 96       	adiw	r28, 0x30	; 48
    2c0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c0c:	e0 97       	sbiw	r28, 0x30	; 48
    2c0e:	a0 96       	adiw	r28, 0x20	; 32
    2c10:	0f ad       	ldd	r16, Y+63	; 0x3f
    2c12:	a0 97       	sbiw	r28, 0x20	; 32
    2c14:	90 17       	cp	r25, r16
    2c16:	18 f0       	brcs	.+6      	; 0x2c1e <Timer_vidAsychDelay+0x7a4>
    2c18:	ea 96       	adiw	r28, 0x3a	; 58
    2c1a:	1f ae       	std	Y+63, r1	; 0x3f
    2c1c:	ea 97       	sbiw	r28, 0x3a	; 58
    2c1e:	e7 96       	adiw	r28, 0x37	; 55
    2c20:	1f ad       	ldd	r17, Y+63	; 0x3f
    2c22:	e7 97       	sbiw	r28, 0x37	; 55
    2c24:	e0 96       	adiw	r28, 0x30	; 48
    2c26:	2f ad       	ldd	r18, Y+63	; 0x3f
    2c28:	e0 97       	sbiw	r28, 0x30	; 48
    2c2a:	12 0f       	add	r17, r18
    2c2c:	eb 96       	adiw	r28, 0x3b	; 59
    2c2e:	1f af       	std	Y+63, r17	; 0x3f
    2c30:	eb 97       	sbiw	r28, 0x3b	; 59
    2c32:	31 e0       	ldi	r19, 0x01	; 1
    2c34:	ec 96       	adiw	r28, 0x3c	; 60
    2c36:	3f af       	std	Y+63, r19	; 0x3f
    2c38:	ec 97       	sbiw	r28, 0x3c	; 60
    2c3a:	eb 96       	adiw	r28, 0x3b	; 59
    2c3c:	4f ad       	ldd	r20, Y+63	; 0x3f
    2c3e:	eb 97       	sbiw	r28, 0x3b	; 59
    2c40:	e0 96       	adiw	r28, 0x30	; 48
    2c42:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c44:	e0 97       	sbiw	r28, 0x30	; 48
    2c46:	45 17       	cp	r20, r21
    2c48:	18 f0       	brcs	.+6      	; 0x2c50 <Timer_vidAsychDelay+0x7d6>
    2c4a:	ec 96       	adiw	r28, 0x3c	; 60
    2c4c:	1f ae       	std	Y+63, r1	; 0x3f
    2c4e:	ec 97       	sbiw	r28, 0x3c	; 60
    2c50:	ea 96       	adiw	r28, 0x3a	; 58
    2c52:	6f ad       	ldd	r22, Y+63	; 0x3f
    2c54:	ea 97       	sbiw	r28, 0x3a	; 58
    2c56:	ec 96       	adiw	r28, 0x3c	; 60
    2c58:	7f ad       	ldd	r23, Y+63	; 0x3f
    2c5a:	ec 97       	sbiw	r28, 0x3c	; 60
    2c5c:	67 2b       	or	r22, r23
    2c5e:	ea 96       	adiw	r28, 0x3a	; 58
    2c60:	6f af       	std	Y+63, r22	; 0x3f
    2c62:	ea 97       	sbiw	r28, 0x3a	; 58
    2c64:	eb 96       	adiw	r28, 0x3b	; 59
    2c66:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c68:	eb 97       	sbiw	r28, 0x3b	; 59
    2c6a:	e0 96       	adiw	r28, 0x30	; 48
    2c6c:	8f af       	std	Y+63, r24	; 0x3f
    2c6e:	e0 97       	sbiw	r28, 0x30	; 48
    2c70:	a1 96       	adiw	r28, 0x21	; 33
    2c72:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c74:	a1 97       	sbiw	r28, 0x21	; 33
    2c76:	a9 96       	adiw	r28, 0x29	; 41
    2c78:	0f ad       	ldd	r16, Y+63	; 0x3f
    2c7a:	a9 97       	sbiw	r28, 0x29	; 41
    2c7c:	90 0f       	add	r25, r16
    2c7e:	e1 96       	adiw	r28, 0x31	; 49
    2c80:	9f af       	std	Y+63, r25	; 0x3f
    2c82:	e1 97       	sbiw	r28, 0x31	; 49
    2c84:	11 e0       	ldi	r17, 0x01	; 1
    2c86:	ed 96       	adiw	r28, 0x3d	; 61
    2c88:	1f af       	std	Y+63, r17	; 0x3f
    2c8a:	ed 97       	sbiw	r28, 0x3d	; 61
    2c8c:	e1 96       	adiw	r28, 0x31	; 49
    2c8e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2c90:	e1 97       	sbiw	r28, 0x31	; 49
    2c92:	a1 96       	adiw	r28, 0x21	; 33
    2c94:	3f ad       	ldd	r19, Y+63	; 0x3f
    2c96:	a1 97       	sbiw	r28, 0x21	; 33
    2c98:	23 17       	cp	r18, r19
    2c9a:	18 f0       	brcs	.+6      	; 0x2ca2 <Timer_vidAsychDelay+0x828>
    2c9c:	ed 96       	adiw	r28, 0x3d	; 61
    2c9e:	1f ae       	std	Y+63, r1	; 0x3f
    2ca0:	ed 97       	sbiw	r28, 0x3d	; 61
    2ca2:	ea 96       	adiw	r28, 0x3a	; 58
    2ca4:	4f ad       	ldd	r20, Y+63	; 0x3f
    2ca6:	ea 97       	sbiw	r28, 0x3a	; 58
    2ca8:	e1 96       	adiw	r28, 0x31	; 49
    2caa:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cac:	e1 97       	sbiw	r28, 0x31	; 49
    2cae:	45 0f       	add	r20, r21
    2cb0:	ee 96       	adiw	r28, 0x3e	; 62
    2cb2:	4f af       	std	Y+63, r20	; 0x3f
    2cb4:	ee 97       	sbiw	r28, 0x3e	; 62
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	ef 96       	adiw	r28, 0x3f	; 63
    2cba:	6f af       	std	Y+63, r22	; 0x3f
    2cbc:	ef 97       	sbiw	r28, 0x3f	; 63
    2cbe:	ee 96       	adiw	r28, 0x3e	; 62
    2cc0:	7f ad       	ldd	r23, Y+63	; 0x3f
    2cc2:	ee 97       	sbiw	r28, 0x3e	; 62
    2cc4:	e1 96       	adiw	r28, 0x31	; 49
    2cc6:	8f ad       	ldd	r24, Y+63	; 0x3f
    2cc8:	e1 97       	sbiw	r28, 0x31	; 49
    2cca:	78 17       	cp	r23, r24
    2ccc:	18 f0       	brcs	.+6      	; 0x2cd4 <Timer_vidAsychDelay+0x85a>
    2cce:	ef 96       	adiw	r28, 0x3f	; 63
    2cd0:	1f ae       	std	Y+63, r1	; 0x3f
    2cd2:	ef 97       	sbiw	r28, 0x3f	; 63
    2cd4:	ed 96       	adiw	r28, 0x3d	; 61
    2cd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cd8:	ed 97       	sbiw	r28, 0x3d	; 61
    2cda:	ef 96       	adiw	r28, 0x3f	; 63
    2cdc:	0f ad       	ldd	r16, Y+63	; 0x3f
    2cde:	ef 97       	sbiw	r28, 0x3f	; 63
    2ce0:	90 2b       	or	r25, r16
    2ce2:	ed 96       	adiw	r28, 0x3d	; 61
    2ce4:	9f af       	std	Y+63, r25	; 0x3f
    2ce6:	ed 97       	sbiw	r28, 0x3d	; 61
    2ce8:	ee 96       	adiw	r28, 0x3e	; 62
    2cea:	1f ad       	ldd	r17, Y+63	; 0x3f
    2cec:	ee 97       	sbiw	r28, 0x3e	; 62
    2cee:	e1 96       	adiw	r28, 0x31	; 49
    2cf0:	1f af       	std	Y+63, r17	; 0x3f
    2cf2:	e1 97       	sbiw	r28, 0x31	; 49
    2cf4:	a2 96       	adiw	r28, 0x22	; 34
    2cf6:	2f ad       	ldd	r18, Y+63	; 0x3f
    2cf8:	a2 97       	sbiw	r28, 0x22	; 34
    2cfa:	aa 96       	adiw	r28, 0x2a	; 42
    2cfc:	3f ad       	ldd	r19, Y+63	; 0x3f
    2cfe:	aa 97       	sbiw	r28, 0x2a	; 42
    2d00:	23 0f       	add	r18, r19
    2d02:	e2 96       	adiw	r28, 0x32	; 50
    2d04:	2f af       	std	Y+63, r18	; 0x3f
    2d06:	e2 97       	sbiw	r28, 0x32	; 50
    2d08:	41 e0       	ldi	r20, 0x01	; 1
    2d0a:	c1 58       	subi	r28, 0x81	; 129
    2d0c:	df 4f       	sbci	r29, 0xFF	; 255
    2d0e:	48 83       	st	Y, r20
    2d10:	cf 57       	subi	r28, 0x7F	; 127
    2d12:	d0 40       	sbci	r29, 0x00	; 0
    2d14:	e2 96       	adiw	r28, 0x32	; 50
    2d16:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d18:	e2 97       	sbiw	r28, 0x32	; 50
    2d1a:	a2 96       	adiw	r28, 0x22	; 34
    2d1c:	6f ad       	ldd	r22, Y+63	; 0x3f
    2d1e:	a2 97       	sbiw	r28, 0x22	; 34
    2d20:	56 17       	cp	r21, r22
    2d22:	28 f0       	brcs	.+10     	; 0x2d2e <Timer_vidAsychDelay+0x8b4>
    2d24:	c1 58       	subi	r28, 0x81	; 129
    2d26:	df 4f       	sbci	r29, 0xFF	; 255
    2d28:	18 82       	st	Y, r1
    2d2a:	cf 57       	subi	r28, 0x7F	; 127
    2d2c:	d0 40       	sbci	r29, 0x00	; 0
    2d2e:	ed 96       	adiw	r28, 0x3d	; 61
    2d30:	7f ad       	ldd	r23, Y+63	; 0x3f
    2d32:	ed 97       	sbiw	r28, 0x3d	; 61
    2d34:	e2 96       	adiw	r28, 0x32	; 50
    2d36:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d38:	e2 97       	sbiw	r28, 0x32	; 50
    2d3a:	78 0f       	add	r23, r24
    2d3c:	c0 58       	subi	r28, 0x80	; 128
    2d3e:	df 4f       	sbci	r29, 0xFF	; 255
    2d40:	78 83       	st	Y, r23
    2d42:	c0 58       	subi	r28, 0x80	; 128
    2d44:	d0 40       	sbci	r29, 0x00	; 0
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	cf 57       	subi	r28, 0x7F	; 127
    2d4a:	df 4f       	sbci	r29, 0xFF	; 255
    2d4c:	98 83       	st	Y, r25
    2d4e:	c1 58       	subi	r28, 0x81	; 129
    2d50:	d0 40       	sbci	r29, 0x00	; 0
    2d52:	c0 58       	subi	r28, 0x80	; 128
    2d54:	df 4f       	sbci	r29, 0xFF	; 255
    2d56:	08 81       	ld	r16, Y
    2d58:	c0 58       	subi	r28, 0x80	; 128
    2d5a:	d0 40       	sbci	r29, 0x00	; 0
    2d5c:	e2 96       	adiw	r28, 0x32	; 50
    2d5e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2d60:	e2 97       	sbiw	r28, 0x32	; 50
    2d62:	01 17       	cp	r16, r17
    2d64:	28 f0       	brcs	.+10     	; 0x2d70 <Timer_vidAsychDelay+0x8f6>
    2d66:	cf 57       	subi	r28, 0x7F	; 127
    2d68:	df 4f       	sbci	r29, 0xFF	; 255
    2d6a:	18 82       	st	Y, r1
    2d6c:	c1 58       	subi	r28, 0x81	; 129
    2d6e:	d0 40       	sbci	r29, 0x00	; 0
    2d70:	c1 58       	subi	r28, 0x81	; 129
    2d72:	df 4f       	sbci	r29, 0xFF	; 255
    2d74:	28 81       	ld	r18, Y
    2d76:	cf 57       	subi	r28, 0x7F	; 127
    2d78:	d0 40       	sbci	r29, 0x00	; 0
    2d7a:	cf 57       	subi	r28, 0x7F	; 127
    2d7c:	df 4f       	sbci	r29, 0xFF	; 255
    2d7e:	38 81       	ld	r19, Y
    2d80:	c1 58       	subi	r28, 0x81	; 129
    2d82:	d0 40       	sbci	r29, 0x00	; 0
    2d84:	23 2b       	or	r18, r19
    2d86:	c1 58       	subi	r28, 0x81	; 129
    2d88:	df 4f       	sbci	r29, 0xFF	; 255
    2d8a:	28 83       	st	Y, r18
    2d8c:	cf 57       	subi	r28, 0x7F	; 127
    2d8e:	d0 40       	sbci	r29, 0x00	; 0
    2d90:	c0 58       	subi	r28, 0x80	; 128
    2d92:	df 4f       	sbci	r29, 0xFF	; 255
    2d94:	48 81       	ld	r20, Y
    2d96:	c0 58       	subi	r28, 0x80	; 128
    2d98:	d0 40       	sbci	r29, 0x00	; 0
    2d9a:	e2 96       	adiw	r28, 0x32	; 50
    2d9c:	4f af       	std	Y+63, r20	; 0x3f
    2d9e:	e2 97       	sbiw	r28, 0x32	; 50
    2da0:	a3 96       	adiw	r28, 0x23	; 35
    2da2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2da4:	a3 97       	sbiw	r28, 0x23	; 35
    2da6:	ab 96       	adiw	r28, 0x2b	; 43
    2da8:	6f ad       	ldd	r22, Y+63	; 0x3f
    2daa:	ab 97       	sbiw	r28, 0x2b	; 43
    2dac:	56 0f       	add	r21, r22
    2dae:	e3 96       	adiw	r28, 0x33	; 51
    2db0:	5f af       	std	Y+63, r21	; 0x3f
    2db2:	e3 97       	sbiw	r28, 0x33	; 51
    2db4:	71 e0       	ldi	r23, 0x01	; 1
    2db6:	ce 57       	subi	r28, 0x7E	; 126
    2db8:	df 4f       	sbci	r29, 0xFF	; 255
    2dba:	78 83       	st	Y, r23
    2dbc:	c2 58       	subi	r28, 0x82	; 130
    2dbe:	d0 40       	sbci	r29, 0x00	; 0
    2dc0:	e3 96       	adiw	r28, 0x33	; 51
    2dc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    2dc4:	e3 97       	sbiw	r28, 0x33	; 51
    2dc6:	a3 96       	adiw	r28, 0x23	; 35
    2dc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dca:	a3 97       	sbiw	r28, 0x23	; 35
    2dcc:	89 17       	cp	r24, r25
    2dce:	28 f0       	brcs	.+10     	; 0x2dda <Timer_vidAsychDelay+0x960>
    2dd0:	ce 57       	subi	r28, 0x7E	; 126
    2dd2:	df 4f       	sbci	r29, 0xFF	; 255
    2dd4:	18 82       	st	Y, r1
    2dd6:	c2 58       	subi	r28, 0x82	; 130
    2dd8:	d0 40       	sbci	r29, 0x00	; 0
    2dda:	c1 58       	subi	r28, 0x81	; 129
    2ddc:	df 4f       	sbci	r29, 0xFF	; 255
    2dde:	08 81       	ld	r16, Y
    2de0:	cf 57       	subi	r28, 0x7F	; 127
    2de2:	d0 40       	sbci	r29, 0x00	; 0
    2de4:	e3 96       	adiw	r28, 0x33	; 51
    2de6:	1f ad       	ldd	r17, Y+63	; 0x3f
    2de8:	e3 97       	sbiw	r28, 0x33	; 51
    2dea:	01 0f       	add	r16, r17
    2dec:	cd 57       	subi	r28, 0x7D	; 125
    2dee:	df 4f       	sbci	r29, 0xFF	; 255
    2df0:	08 83       	st	Y, r16
    2df2:	c3 58       	subi	r28, 0x83	; 131
    2df4:	d0 40       	sbci	r29, 0x00	; 0
    2df6:	21 e0       	ldi	r18, 0x01	; 1
    2df8:	cc 57       	subi	r28, 0x7C	; 124
    2dfa:	df 4f       	sbci	r29, 0xFF	; 255
    2dfc:	28 83       	st	Y, r18
    2dfe:	c4 58       	subi	r28, 0x84	; 132
    2e00:	d0 40       	sbci	r29, 0x00	; 0
    2e02:	cd 57       	subi	r28, 0x7D	; 125
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	38 81       	ld	r19, Y
    2e08:	c3 58       	subi	r28, 0x83	; 131
    2e0a:	d0 40       	sbci	r29, 0x00	; 0
    2e0c:	e3 96       	adiw	r28, 0x33	; 51
    2e0e:	4f ad       	ldd	r20, Y+63	; 0x3f
    2e10:	e3 97       	sbiw	r28, 0x33	; 51
    2e12:	34 17       	cp	r19, r20
    2e14:	28 f0       	brcs	.+10     	; 0x2e20 <Timer_vidAsychDelay+0x9a6>
    2e16:	cc 57       	subi	r28, 0x7C	; 124
    2e18:	df 4f       	sbci	r29, 0xFF	; 255
    2e1a:	18 82       	st	Y, r1
    2e1c:	c4 58       	subi	r28, 0x84	; 132
    2e1e:	d0 40       	sbci	r29, 0x00	; 0
    2e20:	ce 57       	subi	r28, 0x7E	; 126
    2e22:	df 4f       	sbci	r29, 0xFF	; 255
    2e24:	58 81       	ld	r21, Y
    2e26:	c2 58       	subi	r28, 0x82	; 130
    2e28:	d0 40       	sbci	r29, 0x00	; 0
    2e2a:	cc 57       	subi	r28, 0x7C	; 124
    2e2c:	df 4f       	sbci	r29, 0xFF	; 255
    2e2e:	68 81       	ld	r22, Y
    2e30:	c4 58       	subi	r28, 0x84	; 132
    2e32:	d0 40       	sbci	r29, 0x00	; 0
    2e34:	56 2b       	or	r21, r22
    2e36:	ce 57       	subi	r28, 0x7E	; 126
    2e38:	df 4f       	sbci	r29, 0xFF	; 255
    2e3a:	58 83       	st	Y, r21
    2e3c:	c2 58       	subi	r28, 0x82	; 130
    2e3e:	d0 40       	sbci	r29, 0x00	; 0
    2e40:	cd 57       	subi	r28, 0x7D	; 125
    2e42:	df 4f       	sbci	r29, 0xFF	; 255
    2e44:	78 81       	ld	r23, Y
    2e46:	c3 58       	subi	r28, 0x83	; 131
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	e3 96       	adiw	r28, 0x33	; 51
    2e4c:	7f af       	std	Y+63, r23	; 0x3f
    2e4e:	e3 97       	sbiw	r28, 0x33	; 51
    2e50:	a4 96       	adiw	r28, 0x24	; 36
    2e52:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e54:	a4 97       	sbiw	r28, 0x24	; 36
    2e56:	ac 96       	adiw	r28, 0x2c	; 44
    2e58:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e5a:	ac 97       	sbiw	r28, 0x2c	; 44
    2e5c:	89 0f       	add	r24, r25
    2e5e:	e4 96       	adiw	r28, 0x34	; 52
    2e60:	8f af       	std	Y+63, r24	; 0x3f
    2e62:	e4 97       	sbiw	r28, 0x34	; 52
    2e64:	01 e0       	ldi	r16, 0x01	; 1
    2e66:	cb 57       	subi	r28, 0x7B	; 123
    2e68:	df 4f       	sbci	r29, 0xFF	; 255
    2e6a:	08 83       	st	Y, r16
    2e6c:	c5 58       	subi	r28, 0x85	; 133
    2e6e:	d0 40       	sbci	r29, 0x00	; 0
    2e70:	e4 96       	adiw	r28, 0x34	; 52
    2e72:	1f ad       	ldd	r17, Y+63	; 0x3f
    2e74:	e4 97       	sbiw	r28, 0x34	; 52
    2e76:	a4 96       	adiw	r28, 0x24	; 36
    2e78:	2f ad       	ldd	r18, Y+63	; 0x3f
    2e7a:	a4 97       	sbiw	r28, 0x24	; 36
    2e7c:	12 17       	cp	r17, r18
    2e7e:	28 f0       	brcs	.+10     	; 0x2e8a <Timer_vidAsychDelay+0xa10>
    2e80:	cb 57       	subi	r28, 0x7B	; 123
    2e82:	df 4f       	sbci	r29, 0xFF	; 255
    2e84:	18 82       	st	Y, r1
    2e86:	c5 58       	subi	r28, 0x85	; 133
    2e88:	d0 40       	sbci	r29, 0x00	; 0
    2e8a:	ce 57       	subi	r28, 0x7E	; 126
    2e8c:	df 4f       	sbci	r29, 0xFF	; 255
    2e8e:	38 81       	ld	r19, Y
    2e90:	c2 58       	subi	r28, 0x82	; 130
    2e92:	d0 40       	sbci	r29, 0x00	; 0
    2e94:	e4 96       	adiw	r28, 0x34	; 52
    2e96:	4f ad       	ldd	r20, Y+63	; 0x3f
    2e98:	e4 97       	sbiw	r28, 0x34	; 52
    2e9a:	34 0f       	add	r19, r20
    2e9c:	ca 57       	subi	r28, 0x7A	; 122
    2e9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ea0:	38 83       	st	Y, r19
    2ea2:	c6 58       	subi	r28, 0x86	; 134
    2ea4:	d0 40       	sbci	r29, 0x00	; 0
    2ea6:	51 e0       	ldi	r21, 0x01	; 1
    2ea8:	c9 57       	subi	r28, 0x79	; 121
    2eaa:	df 4f       	sbci	r29, 0xFF	; 255
    2eac:	58 83       	st	Y, r21
    2eae:	c7 58       	subi	r28, 0x87	; 135
    2eb0:	d0 40       	sbci	r29, 0x00	; 0
    2eb2:	ca 57       	subi	r28, 0x7A	; 122
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	68 81       	ld	r22, Y
    2eb8:	c6 58       	subi	r28, 0x86	; 134
    2eba:	d0 40       	sbci	r29, 0x00	; 0
    2ebc:	e4 96       	adiw	r28, 0x34	; 52
    2ebe:	7f ad       	ldd	r23, Y+63	; 0x3f
    2ec0:	e4 97       	sbiw	r28, 0x34	; 52
    2ec2:	67 17       	cp	r22, r23
    2ec4:	28 f0       	brcs	.+10     	; 0x2ed0 <Timer_vidAsychDelay+0xa56>
    2ec6:	c9 57       	subi	r28, 0x79	; 121
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	18 82       	st	Y, r1
    2ecc:	c7 58       	subi	r28, 0x87	; 135
    2ece:	d0 40       	sbci	r29, 0x00	; 0
    2ed0:	cb 57       	subi	r28, 0x7B	; 123
    2ed2:	df 4f       	sbci	r29, 0xFF	; 255
    2ed4:	88 81       	ld	r24, Y
    2ed6:	c5 58       	subi	r28, 0x85	; 133
    2ed8:	d0 40       	sbci	r29, 0x00	; 0
    2eda:	c9 57       	subi	r28, 0x79	; 121
    2edc:	df 4f       	sbci	r29, 0xFF	; 255
    2ede:	98 81       	ld	r25, Y
    2ee0:	c7 58       	subi	r28, 0x87	; 135
    2ee2:	d0 40       	sbci	r29, 0x00	; 0
    2ee4:	89 2b       	or	r24, r25
    2ee6:	cb 57       	subi	r28, 0x7B	; 123
    2ee8:	df 4f       	sbci	r29, 0xFF	; 255
    2eea:	88 83       	st	Y, r24
    2eec:	c5 58       	subi	r28, 0x85	; 133
    2eee:	d0 40       	sbci	r29, 0x00	; 0
    2ef0:	ca 57       	subi	r28, 0x7A	; 122
    2ef2:	df 4f       	sbci	r29, 0xFF	; 255
    2ef4:	08 81       	ld	r16, Y
    2ef6:	c6 58       	subi	r28, 0x86	; 134
    2ef8:	d0 40       	sbci	r29, 0x00	; 0
    2efa:	e4 96       	adiw	r28, 0x34	; 52
    2efc:	0f af       	std	Y+63, r16	; 0x3f
    2efe:	e4 97       	sbiw	r28, 0x34	; 52
    2f00:	a5 96       	adiw	r28, 0x25	; 37
    2f02:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f04:	a5 97       	sbiw	r28, 0x25	; 37
    2f06:	ad 96       	adiw	r28, 0x2d	; 45
    2f08:	2f ad       	ldd	r18, Y+63	; 0x3f
    2f0a:	ad 97       	sbiw	r28, 0x2d	; 45
    2f0c:	12 0f       	add	r17, r18
    2f0e:	e5 96       	adiw	r28, 0x35	; 53
    2f10:	1f af       	std	Y+63, r17	; 0x3f
    2f12:	e5 97       	sbiw	r28, 0x35	; 53
    2f14:	cb 57       	subi	r28, 0x7B	; 123
    2f16:	df 4f       	sbci	r29, 0xFF	; 255
    2f18:	88 81       	ld	r24, Y
    2f1a:	c5 58       	subi	r28, 0x85	; 133
    2f1c:	d0 40       	sbci	r29, 0x00	; 0
    2f1e:	e5 96       	adiw	r28, 0x35	; 53
    2f20:	3f ad       	ldd	r19, Y+63	; 0x3f
    2f22:	e5 97       	sbiw	r28, 0x35	; 53
    2f24:	83 0f       	add	r24, r19
    2f26:	e5 96       	adiw	r28, 0x35	; 53
    2f28:	8f af       	std	Y+63, r24	; 0x3f
    2f2a:	e5 97       	sbiw	r28, 0x35	; 53
    2f2c:	ae 96       	adiw	r28, 0x2e	; 46
    2f2e:	af ac       	ldd	r10, Y+63	; 0x3f
    2f30:	ae 97       	sbiw	r28, 0x2e	; 46
    2f32:	af 96       	adiw	r28, 0x2f	; 47
    2f34:	bf ac       	ldd	r11, Y+63	; 0x3f
    2f36:	af 97       	sbiw	r28, 0x2f	; 47
    2f38:	e0 96       	adiw	r28, 0x30	; 48
    2f3a:	cf ac       	ldd	r12, Y+63	; 0x3f
    2f3c:	e0 97       	sbiw	r28, 0x30	; 48
    2f3e:	e1 96       	adiw	r28, 0x31	; 49
    2f40:	df ac       	ldd	r13, Y+63	; 0x3f
    2f42:	e1 97       	sbiw	r28, 0x31	; 49
    2f44:	e2 96       	adiw	r28, 0x32	; 50
    2f46:	ef ac       	ldd	r14, Y+63	; 0x3f
    2f48:	e2 97       	sbiw	r28, 0x32	; 50
    2f4a:	e3 96       	adiw	r28, 0x33	; 51
    2f4c:	ff ac       	ldd	r15, Y+63	; 0x3f
    2f4e:	e3 97       	sbiw	r28, 0x33	; 51
    2f50:	e4 96       	adiw	r28, 0x34	; 52
    2f52:	0f ad       	ldd	r16, Y+63	; 0x3f
    2f54:	e4 97       	sbiw	r28, 0x34	; 52
    2f56:	e5 96       	adiw	r28, 0x35	; 53
    2f58:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f5a:	e5 97       	sbiw	r28, 0x35	; 53
    2f5c:	2a 2d       	mov	r18, r10
    2f5e:	3b 2d       	mov	r19, r11
    2f60:	4c 2d       	mov	r20, r12
    2f62:	5d 2d       	mov	r21, r13
    2f64:	6e 2d       	mov	r22, r14
    2f66:	7f 2d       	mov	r23, r15
    2f68:	80 2f       	mov	r24, r16
    2f6a:	91 2f       	mov	r25, r17
    2f6c:	08 e0       	ldi	r16, 0x08	; 8
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    2f72:	a2 2e       	mov	r10, r18
    2f74:	b3 2e       	mov	r11, r19
    2f76:	c4 2e       	mov	r12, r20
    2f78:	d5 2e       	mov	r13, r21
    2f7a:	e6 2e       	mov	r14, r22
    2f7c:	f7 2e       	mov	r15, r23
    2f7e:	08 2f       	mov	r16, r24
    2f80:	19 2f       	mov	r17, r25
    2f82:	2a 2d       	mov	r18, r10
    2f84:	3b 2d       	mov	r19, r11
    2f86:	4c 2d       	mov	r20, r12
    2f88:	5d 2d       	mov	r21, r13
    2f8a:	6e 2d       	mov	r22, r14
    2f8c:	7f 2d       	mov	r23, r15
    2f8e:	80 2f       	mov	r24, r16
    2f90:	91 2f       	mov	r25, r17
    2f92:	da 01       	movw	r26, r20
    2f94:	c9 01       	movw	r24, r18
    2f96:	80 93 cb 01 	sts	0x01CB, r24
    2f9a:	90 93 cc 01 	sts	0x01CC, r25
    2f9e:	a0 93 cd 01 	sts	0x01CD, r26
    2fa2:	b0 93 ce 01 	sts	0x01CE, r27
        LOC_u8Preload = 256U - (u64Counts % 256LLU);
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	81 95       	neg	r24
    2faa:	80 93 d3 01 	sts	0x01D3, r24
        TCNT0 = LOC_u8Preload;
    2fae:	e2 e5       	ldi	r30, 0x52	; 82
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 91 d3 01 	lds	r24, 0x01D3
    2fb6:	80 83       	st	Z, r24
        LOC_pfunAsychAppFun = pfunAppFun;
    2fb8:	89 85       	ldd	r24, Y+9	; 0x09
    2fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbc:	90 93 d5 01 	sts	0x01D5, r25
    2fc0:	80 93 d4 01 	sts	0x01D4, r24
        LOC_u32Counter = LOC_u32OvfCounts;
    2fc4:	80 91 cb 01 	lds	r24, 0x01CB
    2fc8:	90 91 cc 01 	lds	r25, 0x01CC
    2fcc:	a0 91 cd 01 	lds	r26, 0x01CD
    2fd0:	b0 91 ce 01 	lds	r27, 0x01CE
    2fd4:	80 93 cf 01 	sts	0x01CF, r24
    2fd8:	90 93 d0 01 	sts	0x01D0, r25
    2fdc:	a0 93 d1 01 	sts	0x01D1, r26
    2fe0:	b0 93 d2 01 	sts	0x01D2, r27
    }
}
    2fe4:	c9 57       	subi	r28, 0x79	; 121
    2fe6:	df 4f       	sbci	r29, 0xFF	; 255
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	bf 90       	pop	r11
    3004:	af 90       	pop	r10
    3006:	9f 90       	pop	r9
    3008:	8f 90       	pop	r8
    300a:	7f 90       	pop	r7
    300c:	6f 90       	pop	r6
    300e:	5f 90       	pop	r5
    3010:	4f 90       	pop	r4
    3012:	3f 90       	pop	r3
    3014:	2f 90       	pop	r2
    3016:	08 95       	ret

00003018 <__vector_11>:



void __vector_11 (void)__attribute__((signal));
void __vector_11 (void)
{
    3018:	1f 92       	push	r1
    301a:	0f 92       	push	r0
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	0f 92       	push	r0
    3020:	11 24       	eor	r1, r1
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    if (LOC_pfunAsychAppFun != NULL)
    3042:	80 91 d4 01 	lds	r24, 0x01D4
    3046:	90 91 d5 01 	lds	r25, 0x01D5
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	c9 f1       	breq	.+114    	; 0x30c0 <__vector_11+0xa8>
    {
        LOC_u32Counter--;
    304e:	80 91 cf 01 	lds	r24, 0x01CF
    3052:	90 91 d0 01 	lds	r25, 0x01D0
    3056:	a0 91 d1 01 	lds	r26, 0x01D1
    305a:	b0 91 d2 01 	lds	r27, 0x01D2
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	a1 09       	sbc	r26, r1
    3062:	b1 09       	sbc	r27, r1
    3064:	80 93 cf 01 	sts	0x01CF, r24
    3068:	90 93 d0 01 	sts	0x01D0, r25
    306c:	a0 93 d1 01 	sts	0x01D1, r26
    3070:	b0 93 d2 01 	sts	0x01D2, r27
        if(! LOC_u32Counter)
    3074:	80 91 cf 01 	lds	r24, 0x01CF
    3078:	90 91 d0 01 	lds	r25, 0x01D0
    307c:	a0 91 d1 01 	lds	r26, 0x01D1
    3080:	b0 91 d2 01 	lds	r27, 0x01D2
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	a1 05       	cpc	r26, r1
    3088:	b1 05       	cpc	r27, r1
    308a:	d1 f4       	brne	.+52     	; 0x30c0 <__vector_11+0xa8>
        {
            LOC_pfunAsychAppFun();
    308c:	e0 91 d4 01 	lds	r30, 0x01D4
    3090:	f0 91 d5 01 	lds	r31, 0x01D5
    3094:	09 95       	icall
            LOC_u32Counter = LOC_u32OvfCounts;
    3096:	80 91 cb 01 	lds	r24, 0x01CB
    309a:	90 91 cc 01 	lds	r25, 0x01CC
    309e:	a0 91 cd 01 	lds	r26, 0x01CD
    30a2:	b0 91 ce 01 	lds	r27, 0x01CE
    30a6:	80 93 cf 01 	sts	0x01CF, r24
    30aa:	90 93 d0 01 	sts	0x01D0, r25
    30ae:	a0 93 d1 01 	sts	0x01D1, r26
    30b2:	b0 93 d2 01 	sts	0x01D2, r27
            TCNT0 = LOC_u8Preload;
    30b6:	e2 e5       	ldi	r30, 0x52	; 82
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 91 d3 01 	lds	r24, 0x01D3
    30be:	80 83       	st	Z, r24
        }
    }
}
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	ff 91       	pop	r31
    30c6:	ef 91       	pop	r30
    30c8:	bf 91       	pop	r27
    30ca:	af 91       	pop	r26
    30cc:	9f 91       	pop	r25
    30ce:	8f 91       	pop	r24
    30d0:	7f 91       	pop	r23
    30d2:	6f 91       	pop	r22
    30d4:	5f 91       	pop	r21
    30d6:	4f 91       	pop	r20
    30d8:	3f 91       	pop	r19
    30da:	2f 91       	pop	r18
    30dc:	0f 90       	pop	r0
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	0f 90       	pop	r0
    30e2:	1f 90       	pop	r1
    30e4:	18 95       	reti

000030e6 <PIN_vidSetMode>:
#include "PIN_config.h"
#include "PIN_int.h"


void PIN_vidSetMode(u8 u8PinNum , u8 u8Mode)
{
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	28 97       	sbiw	r28, 0x08	; 8
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	6e 83       	std	Y+6, r22	; 0x06
    if ((u8PinNum >= PA0) && (u8PinNum <= PD7) && 
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	80 32       	cpi	r24, 0x20	; 32
    3102:	08 f0       	brcs	.+2      	; 0x3106 <PIN_vidSetMode+0x20>
    3104:	71 c1       	rjmp	.+738    	; 0x33e8 <PIN_vidSetMode+0x302>
    3106:	8e 81       	ldd	r24, Y+6	; 0x06
    3108:	84 30       	cpi	r24, 0x04	; 4
    310a:	08 f0       	brcs	.+2      	; 0x310e <PIN_vidSetMode+0x28>
    310c:	6d c1       	rjmp	.+730    	; 0x33e8 <PIN_vidSetMode+0x302>
        (u8Mode >= INPUT_FLOAT) && (u8Mode <= OUTPUT_HIGH))
    {
        // A 0-7 , B 8-15 , C 16-23 , D 24-31
        u8 u8GroupID = u8PinNum / 8U;
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	86 95       	lsr	r24
    3112:	86 95       	lsr	r24
    3114:	86 95       	lsr	r24
    3116:	8c 83       	std	Y+4, r24	; 0x04
        u8 u8BitNum  = u8PinNum % 8U;
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	87 70       	andi	r24, 0x07	; 7
    311c:	8b 83       	std	Y+3, r24	; 0x03
        u8 u8Direction = ((u8Mode>>1) &1); //get //bit 0 for PORT , bit 1 for DDR
    311e:	8e 81       	ldd	r24, Y+6	; 0x06
    3120:	86 95       	lsr	r24
    3122:	81 70       	andi	r24, 0x01	; 1
    3124:	8a 83       	std	Y+2, r24	; 0x02
        u8 u8Value     = ((u8Mode>>0) &1); //get //bit 0 for PORT , bit 1 for DDR
    3126:	8e 81       	ldd	r24, Y+6	; 0x06
    3128:	81 70       	andi	r24, 0x01	; 1
    312a:	89 83       	std	Y+1, r24	; 0x01

        switch (u8GroupID)
    312c:	8c 81       	ldd	r24, Y+4	; 0x04
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	38 87       	std	Y+8, r19	; 0x08
    3134:	2f 83       	std	Y+7, r18	; 0x07
    3136:	6f 81       	ldd	r22, Y+7	; 0x07
    3138:	78 85       	ldd	r23, Y+8	; 0x08
    313a:	61 30       	cpi	r22, 0x01	; 1
    313c:	71 05       	cpc	r23, r1
    313e:	09 f4       	brne	.+2      	; 0x3142 <PIN_vidSetMode+0x5c>
    3140:	67 c0       	rjmp	.+206    	; 0x3210 <PIN_vidSetMode+0x12a>
    3142:	8f 81       	ldd	r24, Y+7	; 0x07
    3144:	98 85       	ldd	r25, Y+8	; 0x08
    3146:	82 30       	cpi	r24, 0x02	; 2
    3148:	91 05       	cpc	r25, r1
    314a:	34 f4       	brge	.+12     	; 0x3158 <PIN_vidSetMode+0x72>
    314c:	2f 81       	ldd	r18, Y+7	; 0x07
    314e:	38 85       	ldd	r19, Y+8	; 0x08
    3150:	21 15       	cp	r18, r1
    3152:	31 05       	cpc	r19, r1
    3154:	71 f0       	breq	.+28     	; 0x3172 <PIN_vidSetMode+0x8c>
    3156:	48 c1       	rjmp	.+656    	; 0x33e8 <PIN_vidSetMode+0x302>
    3158:	6f 81       	ldd	r22, Y+7	; 0x07
    315a:	78 85       	ldd	r23, Y+8	; 0x08
    315c:	62 30       	cpi	r22, 0x02	; 2
    315e:	71 05       	cpc	r23, r1
    3160:	09 f4       	brne	.+2      	; 0x3164 <PIN_vidSetMode+0x7e>
    3162:	a5 c0       	rjmp	.+330    	; 0x32ae <PIN_vidSetMode+0x1c8>
    3164:	8f 81       	ldd	r24, Y+7	; 0x07
    3166:	98 85       	ldd	r25, Y+8	; 0x08
    3168:	83 30       	cpi	r24, 0x03	; 3
    316a:	91 05       	cpc	r25, r1
    316c:	09 f4       	brne	.+2      	; 0x3170 <PIN_vidSetMode+0x8a>
    316e:	ee c0       	rjmp	.+476    	; 0x334c <PIN_vidSetMode+0x266>
    3170:	3b c1       	rjmp	.+630    	; 0x33e8 <PIN_vidSetMode+0x302>
        {
            case DIO_GROUP_A:
            {
                DDRA &=~(1U << u8BitNum);
    3172:	aa e3       	ldi	r26, 0x3A	; 58
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	ea e3       	ldi	r30, 0x3A	; 58
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	40 81       	ld	r20, Z
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	02 c0       	rjmp	.+4      	; 0x318c <PIN_vidSetMode+0xa6>
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	2a 95       	dec	r18
    318e:	e2 f7       	brpl	.-8      	; 0x3188 <PIN_vidSetMode+0xa2>
    3190:	80 95       	com	r24
    3192:	84 23       	and	r24, r20
    3194:	8c 93       	st	X, r24
                DDRA |= (u8Direction << u8BitNum);
    3196:	aa e3       	ldi	r26, 0x3A	; 58
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	ea e3       	ldi	r30, 0x3A	; 58
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	48 2f       	mov	r20, r24
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	b9 01       	movw	r22, r18
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <PIN_vidSetMode+0xd0>
    31b2:	66 0f       	add	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	8a 95       	dec	r24
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <PIN_vidSetMode+0xcc>
    31ba:	cb 01       	movw	r24, r22
    31bc:	84 2b       	or	r24, r20
    31be:	8c 93       	st	X, r24

                PORTA &=~(1U << u8BitNum);
    31c0:	ab e3       	ldi	r26, 0x3B	; 59
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	eb e3       	ldi	r30, 0x3B	; 59
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	40 81       	ld	r20, Z
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <PIN_vidSetMode+0xf4>
    31d6:	88 0f       	add	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	2a 95       	dec	r18
    31dc:	e2 f7       	brpl	.-8      	; 0x31d6 <PIN_vidSetMode+0xf0>
    31de:	80 95       	com	r24
    31e0:	84 23       	and	r24, r20
    31e2:	8c 93       	st	X, r24
                PORTA |= (u8Value << u8BitNum);
    31e4:	ab e3       	ldi	r26, 0x3B	; 59
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	eb e3       	ldi	r30, 0x3B	; 59
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	48 2f       	mov	r20, r24
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	88 2f       	mov	r24, r24
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	b9 01       	movw	r22, r18
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <PIN_vidSetMode+0x11e>
    3200:	66 0f       	add	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	8a 95       	dec	r24
    3206:	e2 f7       	brpl	.-8      	; 0x3200 <PIN_vidSetMode+0x11a>
    3208:	cb 01       	movw	r24, r22
    320a:	84 2b       	or	r24, r20
    320c:	8c 93       	st	X, r24
    320e:	ec c0       	rjmp	.+472    	; 0x33e8 <PIN_vidSetMode+0x302>
                break;
            }    
            case DIO_GROUP_B:
            {
                DDRB &=~(1U << u8BitNum);
    3210:	a7 e3       	ldi	r26, 0x37	; 55
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e7 e3       	ldi	r30, 0x37	; 55
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	40 81       	ld	r20, Z
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	02 c0       	rjmp	.+4      	; 0x322a <PIN_vidSetMode+0x144>
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	2a 95       	dec	r18
    322c:	e2 f7       	brpl	.-8      	; 0x3226 <PIN_vidSetMode+0x140>
    322e:	80 95       	com	r24
    3230:	84 23       	and	r24, r20
    3232:	8c 93       	st	X, r24
                DDRB |= (u8Direction << u8BitNum);
    3234:	a7 e3       	ldi	r26, 0x37	; 55
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e7 e3       	ldi	r30, 0x37	; 55
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	48 2f       	mov	r20, r24
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	88 2f       	mov	r24, r24
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	b9 01       	movw	r22, r18
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <PIN_vidSetMode+0x16e>
    3250:	66 0f       	add	r22, r22
    3252:	77 1f       	adc	r23, r23
    3254:	8a 95       	dec	r24
    3256:	e2 f7       	brpl	.-8      	; 0x3250 <PIN_vidSetMode+0x16a>
    3258:	cb 01       	movw	r24, r22
    325a:	84 2b       	or	r24, r20
    325c:	8c 93       	st	X, r24
        
                PORTB &=~(1U << u8BitNum);
    325e:	a8 e3       	ldi	r26, 0x38	; 56
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e8 e3       	ldi	r30, 0x38	; 56
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	40 81       	ld	r20, Z
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <PIN_vidSetMode+0x192>
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	2a 95       	dec	r18
    327a:	e2 f7       	brpl	.-8      	; 0x3274 <PIN_vidSetMode+0x18e>
    327c:	80 95       	com	r24
    327e:	84 23       	and	r24, r20
    3280:	8c 93       	st	X, r24
                PORTB |= (u8Value << u8BitNum);
    3282:	a8 e3       	ldi	r26, 0x38	; 56
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e8 e3       	ldi	r30, 0x38	; 56
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	48 2f       	mov	r20, r24
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	b9 01       	movw	r22, r18
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <PIN_vidSetMode+0x1bc>
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	8a 95       	dec	r24
    32a4:	e2 f7       	brpl	.-8      	; 0x329e <PIN_vidSetMode+0x1b8>
    32a6:	cb 01       	movw	r24, r22
    32a8:	84 2b       	or	r24, r20
    32aa:	8c 93       	st	X, r24
    32ac:	9d c0       	rjmp	.+314    	; 0x33e8 <PIN_vidSetMode+0x302>
                break;
            }    
            case DIO_GROUP_C:
            {
                DDRC &=~(1U << u8BitNum);
    32ae:	a4 e3       	ldi	r26, 0x34	; 52
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e4 e3       	ldi	r30, 0x34	; 52
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	40 81       	ld	r20, Z
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <PIN_vidSetMode+0x1e2>
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	2a 95       	dec	r18
    32ca:	e2 f7       	brpl	.-8      	; 0x32c4 <PIN_vidSetMode+0x1de>
    32cc:	80 95       	com	r24
    32ce:	84 23       	and	r24, r20
    32d0:	8c 93       	st	X, r24
                DDRC |= (u8Direction << u8BitNum);
    32d2:	a4 e3       	ldi	r26, 0x34	; 52
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e4 e3       	ldi	r30, 0x34	; 52
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	48 2f       	mov	r20, r24
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	88 2f       	mov	r24, r24
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	b9 01       	movw	r22, r18
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <PIN_vidSetMode+0x20c>
    32ee:	66 0f       	add	r22, r22
    32f0:	77 1f       	adc	r23, r23
    32f2:	8a 95       	dec	r24
    32f4:	e2 f7       	brpl	.-8      	; 0x32ee <PIN_vidSetMode+0x208>
    32f6:	cb 01       	movw	r24, r22
    32f8:	84 2b       	or	r24, r20
    32fa:	8c 93       	st	X, r24
        
                PORTC &=~(1U << u8BitNum);
    32fc:	a5 e3       	ldi	r26, 0x35	; 53
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e5 e3       	ldi	r30, 0x35	; 53
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	40 81       	ld	r20, Z
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	28 2f       	mov	r18, r24
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <PIN_vidSetMode+0x230>
    3312:	88 0f       	add	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	2a 95       	dec	r18
    3318:	e2 f7       	brpl	.-8      	; 0x3312 <PIN_vidSetMode+0x22c>
    331a:	80 95       	com	r24
    331c:	84 23       	and	r24, r20
    331e:	8c 93       	st	X, r24
                PORTC |= (u8Value << u8BitNum);
    3320:	a5 e3       	ldi	r26, 0x35	; 53
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e5 e3       	ldi	r30, 0x35	; 53
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	48 2f       	mov	r20, r24
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	88 2f       	mov	r24, r24
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	b9 01       	movw	r22, r18
    333a:	02 c0       	rjmp	.+4      	; 0x3340 <PIN_vidSetMode+0x25a>
    333c:	66 0f       	add	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	8a 95       	dec	r24
    3342:	e2 f7       	brpl	.-8      	; 0x333c <PIN_vidSetMode+0x256>
    3344:	cb 01       	movw	r24, r22
    3346:	84 2b       	or	r24, r20
    3348:	8c 93       	st	X, r24
    334a:	4e c0       	rjmp	.+156    	; 0x33e8 <PIN_vidSetMode+0x302>
                break;
            }    
            case DIO_GROUP_D:
            {
                DDRD &=~(1U << u8BitNum);
    334c:	a1 e3       	ldi	r26, 0x31	; 49
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e1 e3       	ldi	r30, 0x31	; 49
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	40 81       	ld	r20, Z
    3356:	8b 81       	ldd	r24, Y+3	; 0x03
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <PIN_vidSetMode+0x280>
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	2a 95       	dec	r18
    3368:	e2 f7       	brpl	.-8      	; 0x3362 <PIN_vidSetMode+0x27c>
    336a:	80 95       	com	r24
    336c:	84 23       	and	r24, r20
    336e:	8c 93       	st	X, r24
                DDRD |= (u8Direction << u8BitNum);
    3370:	a1 e3       	ldi	r26, 0x31	; 49
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e1 e3       	ldi	r30, 0x31	; 49
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	48 2f       	mov	r20, r24
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	88 2f       	mov	r24, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	b9 01       	movw	r22, r18
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <PIN_vidSetMode+0x2aa>
    338c:	66 0f       	add	r22, r22
    338e:	77 1f       	adc	r23, r23
    3390:	8a 95       	dec	r24
    3392:	e2 f7       	brpl	.-8      	; 0x338c <PIN_vidSetMode+0x2a6>
    3394:	cb 01       	movw	r24, r22
    3396:	84 2b       	or	r24, r20
    3398:	8c 93       	st	X, r24
        
                PORTD &=~(1U << u8BitNum);
    339a:	a2 e3       	ldi	r26, 0x32	; 50
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e2 e3       	ldi	r30, 0x32	; 50
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	40 81       	ld	r20, Z
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <PIN_vidSetMode+0x2ce>
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	2a 95       	dec	r18
    33b6:	e2 f7       	brpl	.-8      	; 0x33b0 <PIN_vidSetMode+0x2ca>
    33b8:	80 95       	com	r24
    33ba:	84 23       	and	r24, r20
    33bc:	8c 93       	st	X, r24
                PORTD |= (u8Value << u8BitNum);
    33be:	a2 e3       	ldi	r26, 0x32	; 50
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	e2 e3       	ldi	r30, 0x32	; 50
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	48 2f       	mov	r20, r24
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	b9 01       	movw	r22, r18
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <PIN_vidSetMode+0x2f8>
    33da:	66 0f       	add	r22, r22
    33dc:	77 1f       	adc	r23, r23
    33de:	8a 95       	dec	r24
    33e0:	e2 f7       	brpl	.-8      	; 0x33da <PIN_vidSetMode+0x2f4>
    33e2:	cb 01       	movw	r24, r22
    33e4:	84 2b       	or	r24, r20
    33e6:	8c 93       	st	X, r24
            }    
            default:
                break;
        }
    }
}
    33e8:	28 96       	adiw	r28, 0x08	; 8
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <PIN_vidSetValue>:

void PIN_vidSetValue(u8 u8PinNum , u8 u8Value)
{
    33fa:	df 93       	push	r29
    33fc:	cf 93       	push	r28
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	62 97       	sbiw	r28, 0x12	; 18
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	8b 83       	std	Y+3, r24	; 0x03
    3410:	6c 83       	std	Y+4, r22	; 0x04
    if ((u8PinNum >= PA0) && (u8PinNum <= PD7) && 
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	80 32       	cpi	r24, 0x20	; 32
    3416:	08 f0       	brcs	.+2      	; 0x341a <PIN_vidSetValue+0x20>
    3418:	ea c0       	rjmp	.+468    	; 0x35ee <PIN_vidSetValue+0x1f4>
    341a:	8c 81       	ldd	r24, Y+4	; 0x04
    341c:	82 30       	cpi	r24, 0x02	; 2
    341e:	08 f0       	brcs	.+2      	; 0x3422 <PIN_vidSetValue+0x28>
    3420:	e6 c0       	rjmp	.+460    	; 0x35ee <PIN_vidSetValue+0x1f4>
    (u8Value >= LOW) && (u8Value <= HIGH))
    {
        // A 0-7 , B 8-15 , C 16-23 , D 24-31
        u8 u8GroupID = u8PinNum / 8U;
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	86 95       	lsr	r24
    3426:	86 95       	lsr	r24
    3428:	86 95       	lsr	r24
    342a:	8a 83       	std	Y+2, r24	; 0x02
        u8 u8BitNum  = u8PinNum % 8U;
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	87 70       	andi	r24, 0x07	; 7
    3430:	89 83       	std	Y+1, r24	; 0x01
        switch (u8GroupID)
    3432:	8a 81       	ldd	r24, Y+2	; 0x02
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	3a 8b       	std	Y+18, r19	; 0x12
    343a:	29 8b       	std	Y+17, r18	; 0x11
    343c:	89 89       	ldd	r24, Y+17	; 0x11
    343e:	9a 89       	ldd	r25, Y+18	; 0x12
    3440:	81 30       	cpi	r24, 0x01	; 1
    3442:	91 05       	cpc	r25, r1
    3444:	09 f4       	brne	.+2      	; 0x3448 <PIN_vidSetValue+0x4e>
    3446:	47 c0       	rjmp	.+142    	; 0x34d6 <PIN_vidSetValue+0xdc>
    3448:	e9 89       	ldd	r30, Y+17	; 0x11
    344a:	fa 89       	ldd	r31, Y+18	; 0x12
    344c:	e2 30       	cpi	r30, 0x02	; 2
    344e:	f1 05       	cpc	r31, r1
    3450:	34 f4       	brge	.+12     	; 0x345e <PIN_vidSetValue+0x64>
    3452:	29 89       	ldd	r18, Y+17	; 0x11
    3454:	3a 89       	ldd	r19, Y+18	; 0x12
    3456:	21 15       	cp	r18, r1
    3458:	31 05       	cpc	r19, r1
    345a:	71 f0       	breq	.+28     	; 0x3478 <PIN_vidSetValue+0x7e>
    345c:	c8 c0       	rjmp	.+400    	; 0x35ee <PIN_vidSetValue+0x1f4>
    345e:	89 89       	ldd	r24, Y+17	; 0x11
    3460:	9a 89       	ldd	r25, Y+18	; 0x12
    3462:	82 30       	cpi	r24, 0x02	; 2
    3464:	91 05       	cpc	r25, r1
    3466:	09 f4       	brne	.+2      	; 0x346a <PIN_vidSetValue+0x70>
    3468:	65 c0       	rjmp	.+202    	; 0x3534 <PIN_vidSetValue+0x13a>
    346a:	e9 89       	ldd	r30, Y+17	; 0x11
    346c:	fa 89       	ldd	r31, Y+18	; 0x12
    346e:	e3 30       	cpi	r30, 0x03	; 3
    3470:	f1 05       	cpc	r31, r1
    3472:	09 f4       	brne	.+2      	; 0x3476 <PIN_vidSetValue+0x7c>
    3474:	8e c0       	rjmp	.+284    	; 0x3592 <PIN_vidSetValue+0x198>
    3476:	bb c0       	rjmp	.+374    	; 0x35ee <PIN_vidSetValue+0x1f4>
                // if (u8Value == LOW)
                //     PORTA &=~(1<< u8BitNum);
                // else
                //     PORTA |= (1<< u8BitNum);
                
                PORTA = (u8Value == LOW)? (PORTA &(~(1<<u8BitNum))) : (PORTA | (1<<u8BitNum));
    3478:	2b e3       	ldi	r18, 0x3B	; 59
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	38 8b       	std	Y+16, r19	; 0x10
    347e:	2f 87       	std	Y+15, r18	; 0x0f
    3480:	8c 81       	ldd	r24, Y+4	; 0x04
    3482:	88 23       	and	r24, r24
    3484:	99 f4       	brne	.+38     	; 0x34ac <PIN_vidSetValue+0xb2>
    3486:	eb e3       	ldi	r30, 0x3B	; 59
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	48 2f       	mov	r20, r24
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	02 2e       	mov	r0, r18
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <PIN_vidSetValue+0xa6>
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	0a 94       	dec	r0
    34a2:	e2 f7       	brpl	.-8      	; 0x349c <PIN_vidSetValue+0xa2>
    34a4:	80 95       	com	r24
    34a6:	84 23       	and	r24, r20
    34a8:	8e 87       	std	Y+14, r24	; 0x0e
    34aa:	10 c0       	rjmp	.+32     	; 0x34cc <PIN_vidSetValue+0xd2>
    34ac:	eb e3       	ldi	r30, 0x3B	; 59
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	48 2f       	mov	r20, r24
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <PIN_vidSetValue+0xca>
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	2a 95       	dec	r18
    34c6:	e2 f7       	brpl	.-8      	; 0x34c0 <PIN_vidSetValue+0xc6>
    34c8:	84 2b       	or	r24, r20
    34ca:	8e 87       	std	Y+14, r24	; 0x0e
    34cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    34ce:	ef 85       	ldd	r30, Y+15	; 0x0f
    34d0:	f8 89       	ldd	r31, Y+16	; 0x10
    34d2:	20 83       	st	Z, r18
    34d4:	8c c0       	rjmp	.+280    	; 0x35ee <PIN_vidSetValue+0x1f4>
                break;
            }    
            case DIO_GROUP_B:
            {
                PORTB = (u8Value == LOW)? (PORTB &(~(1<<u8BitNum))) : (PORTB | (1<<u8BitNum));
    34d6:	88 e3       	ldi	r24, 0x38	; 56
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9d 87       	std	Y+13, r25	; 0x0d
    34dc:	8c 87       	std	Y+12, r24	; 0x0c
    34de:	8c 81       	ldd	r24, Y+4	; 0x04
    34e0:	88 23       	and	r24, r24
    34e2:	99 f4       	brne	.+38     	; 0x350a <PIN_vidSetValue+0x110>
    34e4:	e8 e3       	ldi	r30, 0x38	; 56
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	48 2f       	mov	r20, r24
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	28 2f       	mov	r18, r24
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	02 2e       	mov	r0, r18
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <PIN_vidSetValue+0x104>
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	0a 94       	dec	r0
    3500:	e2 f7       	brpl	.-8      	; 0x34fa <PIN_vidSetValue+0x100>
    3502:	80 95       	com	r24
    3504:	84 23       	and	r24, r20
    3506:	8b 87       	std	Y+11, r24	; 0x0b
    3508:	10 c0       	rjmp	.+32     	; 0x352a <PIN_vidSetValue+0x130>
    350a:	e8 e3       	ldi	r30, 0x38	; 56
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	48 2f       	mov	r20, r24
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <PIN_vidSetValue+0x128>
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	2a 95       	dec	r18
    3524:	e2 f7       	brpl	.-8      	; 0x351e <PIN_vidSetValue+0x124>
    3526:	84 2b       	or	r24, r20
    3528:	8b 87       	std	Y+11, r24	; 0x0b
    352a:	2b 85       	ldd	r18, Y+11	; 0x0b
    352c:	ec 85       	ldd	r30, Y+12	; 0x0c
    352e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3530:	20 83       	st	Z, r18
    3532:	5d c0       	rjmp	.+186    	; 0x35ee <PIN_vidSetValue+0x1f4>
                break;
            }    
            case DIO_GROUP_C:
            {
                PORTC = (u8Value == LOW)? (PORTC &(~(1<<u8BitNum))) : (PORTC | (1<<u8BitNum));
    3534:	85 e3       	ldi	r24, 0x35	; 53
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9a 87       	std	Y+10, r25	; 0x0a
    353a:	89 87       	std	Y+9, r24	; 0x09
    353c:	8c 81       	ldd	r24, Y+4	; 0x04
    353e:	88 23       	and	r24, r24
    3540:	99 f4       	brne	.+38     	; 0x3568 <PIN_vidSetValue+0x16e>
    3542:	e5 e3       	ldi	r30, 0x35	; 53
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	48 2f       	mov	r20, r24
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	02 2e       	mov	r0, r18
    3556:	02 c0       	rjmp	.+4      	; 0x355c <PIN_vidSetValue+0x162>
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	0a 94       	dec	r0
    355e:	e2 f7       	brpl	.-8      	; 0x3558 <PIN_vidSetValue+0x15e>
    3560:	80 95       	com	r24
    3562:	84 23       	and	r24, r20
    3564:	88 87       	std	Y+8, r24	; 0x08
    3566:	10 c0       	rjmp	.+32     	; 0x3588 <PIN_vidSetValue+0x18e>
    3568:	e5 e3       	ldi	r30, 0x35	; 53
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	48 2f       	mov	r20, r24
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	28 2f       	mov	r18, r24
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <PIN_vidSetValue+0x186>
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	2a 95       	dec	r18
    3582:	e2 f7       	brpl	.-8      	; 0x357c <PIN_vidSetValue+0x182>
    3584:	84 2b       	or	r24, r20
    3586:	88 87       	std	Y+8, r24	; 0x08
    3588:	28 85       	ldd	r18, Y+8	; 0x08
    358a:	e9 85       	ldd	r30, Y+9	; 0x09
    358c:	fa 85       	ldd	r31, Y+10	; 0x0a
    358e:	20 83       	st	Z, r18
    3590:	2e c0       	rjmp	.+92     	; 0x35ee <PIN_vidSetValue+0x1f4>
                break;
            }    
            case DIO_GROUP_D:
            {
                PORTD = (u8Value == LOW)? (PORTD &(~(1<<u8BitNum))) : (PORTD | (1<<u8BitNum));
    3592:	82 e3       	ldi	r24, 0x32	; 50
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	9f 83       	std	Y+7, r25	; 0x07
    3598:	8e 83       	std	Y+6, r24	; 0x06
    359a:	8c 81       	ldd	r24, Y+4	; 0x04
    359c:	88 23       	and	r24, r24
    359e:	99 f4       	brne	.+38     	; 0x35c6 <PIN_vidSetValue+0x1cc>
    35a0:	e2 e3       	ldi	r30, 0x32	; 50
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	48 2f       	mov	r20, r24
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	02 2e       	mov	r0, r18
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <PIN_vidSetValue+0x1c0>
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	0a 94       	dec	r0
    35bc:	e2 f7       	brpl	.-8      	; 0x35b6 <PIN_vidSetValue+0x1bc>
    35be:	80 95       	com	r24
    35c0:	84 23       	and	r24, r20
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	10 c0       	rjmp	.+32     	; 0x35e6 <PIN_vidSetValue+0x1ec>
    35c6:	e2 e3       	ldi	r30, 0x32	; 50
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	48 2f       	mov	r20, r24
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <PIN_vidSetValue+0x1e4>
    35da:	88 0f       	add	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	2a 95       	dec	r18
    35e0:	e2 f7       	brpl	.-8      	; 0x35da <PIN_vidSetValue+0x1e0>
    35e2:	84 2b       	or	r24, r20
    35e4:	8d 83       	std	Y+5, r24	; 0x05
    35e6:	2d 81       	ldd	r18, Y+5	; 0x05
    35e8:	ee 81       	ldd	r30, Y+6	; 0x06
    35ea:	ff 81       	ldd	r31, Y+7	; 0x07
    35ec:	20 83       	st	Z, r18
            }    
            default:
            break;
        }
    }
}
    35ee:	62 96       	adiw	r28, 0x12	; 18
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <PIN_vidTogValue>:

void PIN_vidTogValue(u8 u8PinNum)
{
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	00 d0       	rcall	.+0      	; 0x3606 <PIN_vidTogValue+0x6>
    3606:	00 d0       	rcall	.+0      	; 0x3608 <PIN_vidTogValue+0x8>
    3608:	0f 92       	push	r0
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	8b 83       	std	Y+3, r24	; 0x03
    if ((u8PinNum >= PA0) && (u8PinNum <= PD7))
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	80 32       	cpi	r24, 0x20	; 32
    3614:	08 f0       	brcs	.+2      	; 0x3618 <PIN_vidTogValue+0x18>
    3616:	76 c0       	rjmp	.+236    	; 0x3704 <PIN_vidTogValue+0x104>
    {
        // A 0-7 , B 8-15 , C 16-23 , D 24-31
        u8 u8GroupID = u8PinNum / 8U;
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	86 95       	lsr	r24
    361c:	86 95       	lsr	r24
    361e:	86 95       	lsr	r24
    3620:	8a 83       	std	Y+2, r24	; 0x02
        u8 u8BitNum  = u8PinNum % 8U;
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	87 70       	andi	r24, 0x07	; 7
    3626:	89 83       	std	Y+1, r24	; 0x01
        switch (u8GroupID)
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	3d 83       	std	Y+5, r19	; 0x05
    3630:	2c 83       	std	Y+4, r18	; 0x04
    3632:	8c 81       	ldd	r24, Y+4	; 0x04
    3634:	9d 81       	ldd	r25, Y+5	; 0x05
    3636:	81 30       	cpi	r24, 0x01	; 1
    3638:	91 05       	cpc	r25, r1
    363a:	49 f1       	breq	.+82     	; 0x368e <PIN_vidTogValue+0x8e>
    363c:	2c 81       	ldd	r18, Y+4	; 0x04
    363e:	3d 81       	ldd	r19, Y+5	; 0x05
    3640:	22 30       	cpi	r18, 0x02	; 2
    3642:	31 05       	cpc	r19, r1
    3644:	2c f4       	brge	.+10     	; 0x3650 <PIN_vidTogValue+0x50>
    3646:	8c 81       	ldd	r24, Y+4	; 0x04
    3648:	9d 81       	ldd	r25, Y+5	; 0x05
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	61 f0       	breq	.+24     	; 0x3666 <PIN_vidTogValue+0x66>
    364e:	5a c0       	rjmp	.+180    	; 0x3704 <PIN_vidTogValue+0x104>
    3650:	2c 81       	ldd	r18, Y+4	; 0x04
    3652:	3d 81       	ldd	r19, Y+5	; 0x05
    3654:	22 30       	cpi	r18, 0x02	; 2
    3656:	31 05       	cpc	r19, r1
    3658:	71 f1       	breq	.+92     	; 0x36b6 <PIN_vidTogValue+0xb6>
    365a:	8c 81       	ldd	r24, Y+4	; 0x04
    365c:	9d 81       	ldd	r25, Y+5	; 0x05
    365e:	83 30       	cpi	r24, 0x03	; 3
    3660:	91 05       	cpc	r25, r1
    3662:	e9 f1       	breq	.+122    	; 0x36de <PIN_vidTogValue+0xde>
    3664:	4f c0       	rjmp	.+158    	; 0x3704 <PIN_vidTogValue+0x104>
        {
            case DIO_GROUP_A:
            {
                PORTA ^= (1<<u8BitNum);
    3666:	ab e3       	ldi	r26, 0x3B	; 59
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	eb e3       	ldi	r30, 0x3B	; 59
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	48 2f       	mov	r20, r24
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	02 2e       	mov	r0, r18
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <PIN_vidTogValue+0x84>
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	0a 94       	dec	r0
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <PIN_vidTogValue+0x80>
    3688:	84 27       	eor	r24, r20
    368a:	8c 93       	st	X, r24
    368c:	3b c0       	rjmp	.+118    	; 0x3704 <PIN_vidTogValue+0x104>
                break;
            }    
            case DIO_GROUP_B:
            {
                PORTB ^= (1<<u8BitNum);
    368e:	a8 e3       	ldi	r26, 0x38	; 56
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e8 e3       	ldi	r30, 0x38	; 56
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	48 2f       	mov	r20, r24
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	02 2e       	mov	r0, r18
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <PIN_vidTogValue+0xac>
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	0a 94       	dec	r0
    36ae:	e2 f7       	brpl	.-8      	; 0x36a8 <PIN_vidTogValue+0xa8>
    36b0:	84 27       	eor	r24, r20
    36b2:	8c 93       	st	X, r24
    36b4:	27 c0       	rjmp	.+78     	; 0x3704 <PIN_vidTogValue+0x104>
                break;
            }    
            case DIO_GROUP_C:
            {
                PORTC ^= (1<<u8BitNum);
    36b6:	a5 e3       	ldi	r26, 0x35	; 53
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	e5 e3       	ldi	r30, 0x35	; 53
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	48 2f       	mov	r20, r24
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	28 2f       	mov	r18, r24
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	02 2e       	mov	r0, r18
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <PIN_vidTogValue+0xd4>
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	0a 94       	dec	r0
    36d6:	e2 f7       	brpl	.-8      	; 0x36d0 <PIN_vidTogValue+0xd0>
    36d8:	84 27       	eor	r24, r20
    36da:	8c 93       	st	X, r24
    36dc:	13 c0       	rjmp	.+38     	; 0x3704 <PIN_vidTogValue+0x104>
                break;
            }    
            case DIO_GROUP_D:
            {
                PORTD ^= (1<<u8BitNum);
    36de:	a2 e3       	ldi	r26, 0x32	; 50
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	e2 e3       	ldi	r30, 0x32	; 50
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	48 2f       	mov	r20, r24
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	28 2f       	mov	r18, r24
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	02 2e       	mov	r0, r18
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <PIN_vidTogValue+0xfc>
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	0a 94       	dec	r0
    36fe:	e2 f7       	brpl	.-8      	; 0x36f8 <PIN_vidTogValue+0xf8>
    3700:	84 27       	eor	r24, r20
    3702:	8c 93       	st	X, r24
            default:
            break;
        }

    }
}
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <PIN_bGetValue>:

BOOL PIN_bGetValue(u8 u8PinNum)
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	00 d0       	rcall	.+0      	; 0x371a <PIN_bGetValue+0x6>
    371a:	00 d0       	rcall	.+0      	; 0x371c <PIN_bGetValue+0x8>
    371c:	00 d0       	rcall	.+0      	; 0x371e <PIN_bGetValue+0xa>
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	8c 83       	std	Y+4, r24	; 0x04
    BOOL bPinValue = 0xFFU;
    3724:	8f ef       	ldi	r24, 0xFF	; 255
    3726:	8b 83       	std	Y+3, r24	; 0x03
    if ((u8PinNum >= PA0) && (u8PinNum <= PD7))
    3728:	8c 81       	ldd	r24, Y+4	; 0x04
    372a:	80 32       	cpi	r24, 0x20	; 32
    372c:	08 f0       	brcs	.+2      	; 0x3730 <PIN_bGetValue+0x1c>
    372e:	6f c0       	rjmp	.+222    	; 0x380e <PIN_bGetValue+0xfa>
    {
        // A 0-7 , B 8-15 , C 16-23 , D 24-31
        u8 u8GroupID = u8PinNum / 8U;
    3730:	8c 81       	ldd	r24, Y+4	; 0x04
    3732:	86 95       	lsr	r24
    3734:	86 95       	lsr	r24
    3736:	86 95       	lsr	r24
    3738:	8a 83       	std	Y+2, r24	; 0x02
        u8 u8BitNum  = u8PinNum % 8U;
    373a:	8c 81       	ldd	r24, Y+4	; 0x04
    373c:	87 70       	andi	r24, 0x07	; 7
    373e:	89 83       	std	Y+1, r24	; 0x01
        switch (u8GroupID)
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	28 2f       	mov	r18, r24
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	3e 83       	std	Y+6, r19	; 0x06
    3748:	2d 83       	std	Y+5, r18	; 0x05
    374a:	4d 81       	ldd	r20, Y+5	; 0x05
    374c:	5e 81       	ldd	r21, Y+6	; 0x06
    374e:	41 30       	cpi	r20, 0x01	; 1
    3750:	51 05       	cpc	r21, r1
    3752:	41 f1       	breq	.+80     	; 0x37a4 <PIN_bGetValue+0x90>
    3754:	8d 81       	ldd	r24, Y+5	; 0x05
    3756:	9e 81       	ldd	r25, Y+6	; 0x06
    3758:	82 30       	cpi	r24, 0x02	; 2
    375a:	91 05       	cpc	r25, r1
    375c:	34 f4       	brge	.+12     	; 0x376a <PIN_bGetValue+0x56>
    375e:	2d 81       	ldd	r18, Y+5	; 0x05
    3760:	3e 81       	ldd	r19, Y+6	; 0x06
    3762:	21 15       	cp	r18, r1
    3764:	31 05       	cpc	r19, r1
    3766:	61 f0       	breq	.+24     	; 0x3780 <PIN_bGetValue+0x6c>
    3768:	52 c0       	rjmp	.+164    	; 0x380e <PIN_bGetValue+0xfa>
    376a:	4d 81       	ldd	r20, Y+5	; 0x05
    376c:	5e 81       	ldd	r21, Y+6	; 0x06
    376e:	42 30       	cpi	r20, 0x02	; 2
    3770:	51 05       	cpc	r21, r1
    3772:	51 f1       	breq	.+84     	; 0x37c8 <PIN_bGetValue+0xb4>
    3774:	8d 81       	ldd	r24, Y+5	; 0x05
    3776:	9e 81       	ldd	r25, Y+6	; 0x06
    3778:	83 30       	cpi	r24, 0x03	; 3
    377a:	91 05       	cpc	r25, r1
    377c:	b9 f1       	breq	.+110    	; 0x37ec <PIN_bGetValue+0xd8>
    377e:	47 c0       	rjmp	.+142    	; 0x380e <PIN_bGetValue+0xfa>
        {
            case DIO_GROUP_A:
            {
                bPinValue = ((PINA>>u8BitNum) & 1);
    3780:	e9 e3       	ldi	r30, 0x39	; 57
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	28 2f       	mov	r18, r24
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	a9 01       	movw	r20, r18
    3792:	02 c0       	rjmp	.+4      	; 0x3798 <PIN_bGetValue+0x84>
    3794:	55 95       	asr	r21
    3796:	47 95       	ror	r20
    3798:	8a 95       	dec	r24
    379a:	e2 f7       	brpl	.-8      	; 0x3794 <PIN_bGetValue+0x80>
    379c:	ca 01       	movw	r24, r20
    379e:	81 70       	andi	r24, 0x01	; 1
    37a0:	8b 83       	std	Y+3, r24	; 0x03
    37a2:	35 c0       	rjmp	.+106    	; 0x380e <PIN_bGetValue+0xfa>
                break;
            }    
            case DIO_GROUP_B:
            {
                bPinValue = ((PINB>>u8BitNum) & 1);
    37a4:	e6 e3       	ldi	r30, 0x36	; 54
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a9 01       	movw	r20, r18
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <PIN_bGetValue+0xa8>
    37b8:	55 95       	asr	r21
    37ba:	47 95       	ror	r20
    37bc:	8a 95       	dec	r24
    37be:	e2 f7       	brpl	.-8      	; 0x37b8 <PIN_bGetValue+0xa4>
    37c0:	ca 01       	movw	r24, r20
    37c2:	81 70       	andi	r24, 0x01	; 1
    37c4:	8b 83       	std	Y+3, r24	; 0x03
    37c6:	23 c0       	rjmp	.+70     	; 0x380e <PIN_bGetValue+0xfa>
                break;
            }    
            case DIO_GROUP_C:
            {
                bPinValue = ((PINC>>u8BitNum) & 1);
    37c8:	e3 e3       	ldi	r30, 0x33	; 51
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	28 2f       	mov	r18, r24
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	88 2f       	mov	r24, r24
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a9 01       	movw	r20, r18
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <PIN_bGetValue+0xcc>
    37dc:	55 95       	asr	r21
    37de:	47 95       	ror	r20
    37e0:	8a 95       	dec	r24
    37e2:	e2 f7       	brpl	.-8      	; 0x37dc <PIN_bGetValue+0xc8>
    37e4:	ca 01       	movw	r24, r20
    37e6:	81 70       	andi	r24, 0x01	; 1
    37e8:	8b 83       	std	Y+3, r24	; 0x03
    37ea:	11 c0       	rjmp	.+34     	; 0x380e <PIN_bGetValue+0xfa>
                break;
            }    
            case DIO_GROUP_D:
            {
                bPinValue = ((PIND>>u8BitNum) & 1);
    37ec:	e0 e3       	ldi	r30, 0x30	; 48
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	28 2f       	mov	r18, r24
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	88 2f       	mov	r24, r24
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	a9 01       	movw	r20, r18
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <PIN_bGetValue+0xf0>
    3800:	55 95       	asr	r21
    3802:	47 95       	ror	r20
    3804:	8a 95       	dec	r24
    3806:	e2 f7       	brpl	.-8      	; 0x3800 <PIN_bGetValue+0xec>
    3808:	ca 01       	movw	r24, r20
    380a:	81 70       	andi	r24, 0x01	; 1
    380c:	8b 83       	std	Y+3, r24	; 0x03
            }    
            default:
            break;
        }
    }
    return bPinValue;
    380e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3810:	26 96       	adiw	r28, 0x06	; 6
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <I2C_Init>:
#include <avr/io.h>
#include <util/twi.h>

void I2C_Init(unsigned long scl_freq) {
    3822:	0f 93       	push	r16
    3824:	1f 93       	push	r17
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	00 d0       	rcall	.+0      	; 0x382c <I2C_Init+0xa>
    382c:	00 d0       	rcall	.+0      	; 0x382e <I2C_Init+0xc>
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	69 83       	std	Y+1, r22	; 0x01
    3834:	7a 83       	std	Y+2, r23	; 0x02
    3836:	8b 83       	std	Y+3, r24	; 0x03
    3838:	9c 83       	std	Y+4, r25	; 0x04
    TWSR = 0x00;
    383a:	e1 e2       	ldi	r30, 0x21	; 33
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	10 82       	st	Z, r1
    TWBR = ((F_CPU/scl_freq)-16)/2;
    3840:	00 e2       	ldi	r16, 0x20	; 32
    3842:	10 e0       	ldi	r17, 0x00	; 0
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	94 e2       	ldi	r25, 0x24	; 36
    3848:	a4 ef       	ldi	r26, 0xF4	; 244
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	29 81       	ldd	r18, Y+1	; 0x01
    384e:	3a 81       	ldd	r19, Y+2	; 0x02
    3850:	4b 81       	ldd	r20, Y+3	; 0x03
    3852:	5c 81       	ldd	r21, Y+4	; 0x04
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__udivmodsi4>
    385c:	da 01       	movw	r26, r20
    385e:	c9 01       	movw	r24, r18
    3860:	40 97       	sbiw	r24, 0x10	; 16
    3862:	a1 09       	sbc	r26, r1
    3864:	b1 09       	sbc	r27, r1
    3866:	b6 95       	lsr	r27
    3868:	a7 95       	ror	r26
    386a:	97 95       	ror	r25
    386c:	87 95       	ror	r24
    386e:	f8 01       	movw	r30, r16
    3870:	80 83       	st	Z, r24
}
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	08 95       	ret

00003884 <I2C_Start>:

void I2C_Start(void) {
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
    388c:	e6 e5       	ldi	r30, 0x56	; 86
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	84 ea       	ldi	r24, 0xA4	; 164
    3892:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
    3894:	e6 e5       	ldi	r30, 0x56	; 86
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	88 23       	and	r24, r24
    389c:	dc f7       	brge	.-10     	; 0x3894 <I2C_Start+0x10>
}
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <I2C_Stop>:

void I2C_Stop(void) {
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
    38ac:	e6 e5       	ldi	r30, 0x56	; 86
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	84 e9       	ldi	r24, 0x94	; 148
    38b2:	80 83       	st	Z, r24
}
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <I2C_Write>:

void I2C_Write(uint8_t data) {
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	0f 92       	push	r0
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
    38c6:	e3 e2       	ldi	r30, 0x23	; 35
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	80 83       	st	Z, r24
    TWCR = (1<<TWEN)|(1<<TWINT);
    38ce:	e6 e5       	ldi	r30, 0x56	; 86
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	84 e8       	ldi	r24, 0x84	; 132
    38d4:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
    38d6:	e6 e5       	ldi	r30, 0x56	; 86
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
    38dc:	88 23       	and	r24, r24
    38de:	dc f7       	brge	.-10     	; 0x38d6 <I2C_Write+0x1c>
}
    38e0:	0f 90       	pop	r0
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	08 95       	ret

000038e8 <I2C_Read>:

uint8_t I2C_Read(uint8_t ack) {
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	0f 92       	push	r0
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	89 83       	std	Y+1, r24	; 0x01
    TWCR = (1<<TWEN)|(1<<TWINT)|(ack<<TWEA);
    38f4:	e6 e5       	ldi	r30, 0x56	; 86
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	00 24       	eor	r0, r0
    3900:	96 95       	lsr	r25
    3902:	87 95       	ror	r24
    3904:	07 94       	ror	r0
    3906:	96 95       	lsr	r25
    3908:	87 95       	ror	r24
    390a:	07 94       	ror	r0
    390c:	98 2f       	mov	r25, r24
    390e:	80 2d       	mov	r24, r0
    3910:	84 68       	ori	r24, 0x84	; 132
    3912:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
    3914:	e6 e5       	ldi	r30, 0x56	; 86
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	88 23       	and	r24, r24
    391c:	dc f7       	brge	.-10     	; 0x3914 <I2C_Read+0x2c>
    return TWDR;
    391e:	e3 e2       	ldi	r30, 0x23	; 35
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
}
    3924:	0f 90       	pop	r0
    3926:	cf 91       	pop	r28
    3928:	df 91       	pop	r29
    392a:	08 95       	ret

0000392c <GIE_vidEnable>:


// #define SREG    *((volatile u8*)0x5F)

void GIE_vidEnable(void)
{
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    // SREG|=(1<<7);
    __asm__("sei");
    3934:	78 94       	sei
}
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <GIE_vidDisable>:

void GIE_vidDisable(void)
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    __asm__("cli");
    3944:	f8 94       	cli
    // SREG&=~(1<<7);
}
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <ADC_vidInit>:
static BOOL LOC_bOneTimeAccess = FALSE;
static u16 LOC_u16ADCValue = 0U;


void ADC_vidInit(void)
{
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    ADMUX &=~(0b11 << 6);
    3954:	a7 e2       	ldi	r26, 0x27	; 39
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e7 e2       	ldi	r30, 0x27	; 39
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	8f 73       	andi	r24, 0x3F	; 63
    3960:	8c 93       	st	X, r24
    #if ADC_VREF == ADC_AVCC
        ADMUX |= (ADC_AVCC <<6);
    3962:	a7 e2       	ldi	r26, 0x27	; 39
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	e7 e2       	ldi	r30, 0x27	; 39
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
    396c:	80 64       	ori	r24, 0x40	; 64
    396e:	8c 93       	st	X, r24
    #endif

    ADCSRA &=~ (0b111 << 0);
    3970:	a6 e2       	ldi	r26, 0x26	; 38
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	e6 e2       	ldi	r30, 0x26	; 38
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	88 7f       	andi	r24, 0xF8	; 248
    397c:	8c 93       	st	X, r24
    #if ADC_PRESCALER == PRES_16
        ADCSRA |= (ADC_PRESCALER << 0);
    397e:	a6 e2       	ldi	r26, 0x26	; 38
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	e6 e2       	ldi	r30, 0x26	; 38
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	84 60       	ori	r24, 0x04	; 4
    398a:	8c 93       	st	X, r24
    #endif

    ADMUX &=~(1<<5); // right
    398c:	a7 e2       	ldi	r26, 0x27	; 39
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	e7 e2       	ldi	r30, 0x27	; 39
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	8f 7d       	andi	r24, 0xDF	; 223
    3998:	8c 93       	st	X, r24
    ADCSRA &=~(1<<3); // polling
    399a:	a6 e2       	ldi	r26, 0x26	; 38
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	e6 e2       	ldi	r30, 0x26	; 38
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	87 7f       	andi	r24, 0xF7	; 247
    39a6:	8c 93       	st	X, r24
    ADCSRA &=~(1<<5); // single
    39a8:	a6 e2       	ldi	r26, 0x26	; 38
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	e6 e2       	ldi	r30, 0x26	; 38
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	80 81       	ld	r24, Z
    39b2:	8f 7d       	andi	r24, 0xDF	; 223
    39b4:	8c 93       	st	X, r24

    ADCSRA |= (1<<7);
    39b6:	a6 e2       	ldi	r26, 0x26	; 38
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	e6 e2       	ldi	r30, 0x26	; 38
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	80 68       	ori	r24, 0x80	; 128
    39c2:	8c 93       	st	X, r24
}
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <ADC_u16GetRead>:

u16 ADC_u16GetRead(u8 u8ADCChannel)
{
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <ADC_u16GetRead+0x6>
    39d0:	0f 92       	push	r0
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	8b 83       	std	Y+3, r24	; 0x03
    u16 u16ADCReading = 0xFFFFU;
    39d8:	8f ef       	ldi	r24, 0xFF	; 255
    39da:	9f ef       	ldi	r25, 0xFF	; 255
    39dc:	9a 83       	std	Y+2, r25	; 0x02
    39de:	89 83       	std	Y+1, r24	; 0x01
    if (u8ADCChannel <= 31)
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	80 32       	cpi	r24, 0x20	; 32
    39e4:	e0 f5       	brcc	.+120    	; 0x3a5e <ADC_u16GetRead+0x94>
    {
        // select channel
        ADMUX &= ~(0b11111 << 0);
    39e6:	a7 e2       	ldi	r26, 0x27	; 39
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e7 e2       	ldi	r30, 0x27	; 39
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 7e       	andi	r24, 0xE0	; 224
    39f2:	8c 93       	st	X, r24
        ADMUX |= (u8ADCChannel <<0);
    39f4:	a7 e2       	ldi	r26, 0x27	; 39
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	e7 e2       	ldi	r30, 0x27	; 39
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	90 81       	ld	r25, Z
    39fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3a00:	89 2b       	or	r24, r25
    3a02:	8c 93       	st	X, r24
        //start conversion
        ADCSRA |= (1<<6);
    3a04:	a6 e2       	ldi	r26, 0x26	; 38
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	e6 e2       	ldi	r30, 0x26	; 38
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	80 81       	ld	r24, Z
    3a0e:	80 64       	ori	r24, 0x40	; 64
    3a10:	8c 93       	st	X, r24
        //wait for flag rising
        while(((ADCSRA>>4)&1) == 0);
    3a12:	e6 e2       	ldi	r30, 0x26	; 38
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	82 95       	swap	r24
    3a1a:	8f 70       	andi	r24, 0x0F	; 15
    3a1c:	88 2f       	mov	r24, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	81 70       	andi	r24, 0x01	; 1
    3a22:	90 70       	andi	r25, 0x00	; 0
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	a9 f3       	breq	.-22     	; 0x3a12 <ADC_u16GetRead+0x48>
        // reading DATA registers low&high
        u16ADCReading = ADCL;
    3a28:	e4 e2       	ldi	r30, 0x24	; 36
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	80 81       	ld	r24, Z
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9a 83       	std	Y+2, r25	; 0x02
    3a34:	89 83       	std	Y+1, r24	; 0x01
        u16ADCReading |= (((u16)ADCH)  << 8);
    3a36:	e5 e2       	ldi	r30, 0x25	; 37
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	38 2f       	mov	r19, r24
    3a42:	22 27       	eor	r18, r18
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	82 2b       	or	r24, r18
    3a4a:	93 2b       	or	r25, r19
    3a4c:	9a 83       	std	Y+2, r25	; 0x02
    3a4e:	89 83       	std	Y+1, r24	; 0x01
        // clear flag
        ADCSRA |= (1<<4);
    3a50:	a6 e2       	ldi	r26, 0x26	; 38
    3a52:	b0 e0       	ldi	r27, 0x00	; 0
    3a54:	e6 e2       	ldi	r30, 0x26	; 38
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	80 81       	ld	r24, Z
    3a5a:	80 61       	ori	r24, 0x10	; 16
    3a5c:	8c 93       	st	X, r24
    }
    return u16ADCReading;
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
    3a60:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	cf 91       	pop	r28
    3a6a:	df 91       	pop	r29
    3a6c:	08 95       	ret

00003a6e <ADC_bGetInterruptRead>:

BOOL ADC_bGetInterruptRead(u8 u8ADCChannel, u16 * pu16ADCRead)
{
    3a6e:	df 93       	push	r29
    3a70:	cf 93       	push	r28
    3a72:	00 d0       	rcall	.+0      	; 0x3a74 <ADC_bGetInterruptRead+0x6>
    3a74:	0f 92       	push	r0
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	89 83       	std	Y+1, r24	; 0x01
    3a7c:	7b 83       	std	Y+3, r23	; 0x03
    3a7e:	6a 83       	std	Y+2, r22	; 0x02
    if ((u8ADCChannel <= 31) && (LOC_bOneTimeAccess == FALSE))
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	80 32       	cpi	r24, 0x20	; 32
    3a84:	38 f5       	brcc	.+78     	; 0x3ad4 <ADC_bGetInterruptRead+0x66>
    3a86:	80 91 d9 01 	lds	r24, 0x01D9
    3a8a:	88 23       	and	r24, r24
    3a8c:	19 f5       	brne	.+70     	; 0x3ad4 <ADC_bGetInterruptRead+0x66>
    {
        LOC_bOneTimeAccess = TRUE;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	80 93 d9 01 	sts	0x01D9, r24
        LOC_bIsInteruptOccured = FALSE;
    3a94:	10 92 d8 01 	sts	0x01D8, r1
        ADMUX &=~(0x1f<<0);
    3a98:	a7 e2       	ldi	r26, 0x27	; 39
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	e7 e2       	ldi	r30, 0x27	; 39
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 81       	ld	r24, Z
    3aa2:	80 7e       	andi	r24, 0xE0	; 224
    3aa4:	8c 93       	st	X, r24
        ADMUX |= (u8ADCChannel<<0);
    3aa6:	a7 e2       	ldi	r26, 0x27	; 39
    3aa8:	b0 e0       	ldi	r27, 0x00	; 0
    3aaa:	e7 e2       	ldi	r30, 0x27	; 39
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	90 81       	ld	r25, Z
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	89 2b       	or	r24, r25
    3ab4:	8c 93       	st	X, r24

        ADCSRA |= (1<<3);
    3ab6:	a6 e2       	ldi	r26, 0x26	; 38
    3ab8:	b0 e0       	ldi	r27, 0x00	; 0
    3aba:	e6 e2       	ldi	r30, 0x26	; 38
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	80 81       	ld	r24, Z
    3ac0:	88 60       	ori	r24, 0x08	; 8
    3ac2:	8c 93       	st	X, r24
        ADCSRA |= (1<<6);
    3ac4:	a6 e2       	ldi	r26, 0x26	; 38
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	e6 e2       	ldi	r30, 0x26	; 38
    3aca:	f0 e0       	ldi	r31, 0x00	; 0
    3acc:	80 81       	ld	r24, Z
    3ace:	80 64       	ori	r24, 0x40	; 64
    3ad0:	8c 93       	st	X, r24
    3ad2:	0e c0       	rjmp	.+28     	; 0x3af0 <ADC_bGetInterruptRead+0x82>
    }
    else
    {
        if (LOC_bIsInteruptOccured == TRUE)
    3ad4:	80 91 d8 01 	lds	r24, 0x01D8
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	51 f4       	brne	.+20     	; 0x3af0 <ADC_bGetInterruptRead+0x82>
        {
            LOC_bOneTimeAccess = FALSE;
    3adc:	10 92 d9 01 	sts	0x01D9, r1
            *pu16ADCRead=LOC_u16ADCValue;
    3ae0:	80 91 da 01 	lds	r24, 0x01DA
    3ae4:	90 91 db 01 	lds	r25, 0x01DB
    3ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    3aea:	fb 81       	ldd	r31, Y+3	; 0x03
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	80 83       	st	Z, r24
        }
    }
    return  LOC_bIsInteruptOccured;
    3af0:	80 91 d8 01 	lds	r24, 0x01D8
}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <ADC_vidCallback>:

void ADC_vidCallback(void(*pfunAppFun)(void))
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <ADC_vidCallback+0x6>
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    if (pfunAppFun != NULL)
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	9a 81       	ldd	r25, Y+2	; 0x02
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	31 f0       	breq	.+12     	; 0x3b22 <ADC_vidCallback+0x22>
    {
        LOC_pfunIsrFun = pfunAppFun;
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	90 93 d7 01 	sts	0x01D7, r25
    3b1e:	80 93 d6 01 	sts	0x01D6, r24
    }
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <__vector_16>:



void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    3b2c:	1f 92       	push	r1
    3b2e:	0f 92       	push	r0
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	0f 92       	push	r0
    3b34:	11 24       	eor	r1, r1
    3b36:	2f 93       	push	r18
    3b38:	3f 93       	push	r19
    3b3a:	4f 93       	push	r20
    3b3c:	5f 93       	push	r21
    3b3e:	6f 93       	push	r22
    3b40:	7f 93       	push	r23
    3b42:	8f 93       	push	r24
    3b44:	9f 93       	push	r25
    3b46:	af 93       	push	r26
    3b48:	bf 93       	push	r27
    3b4a:	ef 93       	push	r30
    3b4c:	ff 93       	push	r31
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    LOC_bIsInteruptOccured = TRUE;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	80 93 d8 01 	sts	0x01D8, r24
    LOC_u16ADCValue = ADCL;
    3b5c:	e4 e2       	ldi	r30, 0x24	; 36
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	88 2f       	mov	r24, r24
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	90 93 db 01 	sts	0x01DB, r25
    3b6a:	80 93 da 01 	sts	0x01DA, r24
    LOC_u16ADCValue |= (((u16)ADCH) << 8);
    3b6e:	e5 e2       	ldi	r30, 0x25	; 37
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	80 81       	ld	r24, Z
    3b74:	88 2f       	mov	r24, r24
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	38 2f       	mov	r19, r24
    3b7a:	22 27       	eor	r18, r18
    3b7c:	80 91 da 01 	lds	r24, 0x01DA
    3b80:	90 91 db 01 	lds	r25, 0x01DB
    3b84:	82 2b       	or	r24, r18
    3b86:	93 2b       	or	r25, r19
    3b88:	90 93 db 01 	sts	0x01DB, r25
    3b8c:	80 93 da 01 	sts	0x01DA, r24

    if (LOC_pfunIsrFun != NULL)
    3b90:	80 91 d6 01 	lds	r24, 0x01D6
    3b94:	90 91 d7 01 	lds	r25, 0x01D7
    3b98:	00 97       	sbiw	r24, 0x00	; 0
    3b9a:	29 f0       	breq	.+10     	; 0x3ba6 <__vector_16+0x7a>
    {
        LOC_pfunIsrFun();
    3b9c:	e0 91 d6 01 	lds	r30, 0x01D6
    3ba0:	f0 91 d7 01 	lds	r31, 0x01D7
    3ba4:	09 95       	icall
    }
}
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	ff 91       	pop	r31
    3bac:	ef 91       	pop	r30
    3bae:	bf 91       	pop	r27
    3bb0:	af 91       	pop	r26
    3bb2:	9f 91       	pop	r25
    3bb4:	8f 91       	pop	r24
    3bb6:	7f 91       	pop	r23
    3bb8:	6f 91       	pop	r22
    3bba:	5f 91       	pop	r21
    3bbc:	4f 91       	pop	r20
    3bbe:	3f 91       	pop	r19
    3bc0:	2f 91       	pop	r18
    3bc2:	0f 90       	pop	r0
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	0f 90       	pop	r0
    3bc8:	1f 90       	pop	r1
    3bca:	18 95       	reti

00003bcc <SENSORS_vidInit>:
#include "../../LIB/PrimitiveTypes.h"
#include "../DataKeeper/DataKeeper.h"
#include "../../MCAL/PIN/PIN_int.h"
#include "../../MCAL/ADC/ADC_int.h"

void SENSORS_vidInit(void){
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
	PIN_vidSetMode(MULTI_SENSORS_EN,OUTPUT_HIGH);
    3bd4:	8b e1       	ldi	r24, 0x1B	; 27
    3bd6:	63 e0       	ldi	r22, 0x03	; 3
    3bd8:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(MULTI_TEMP_EN,OUTPUT_HIGH);
    3bdc:	8f e1       	ldi	r24, 0x1F	; 31
    3bde:	63 e0       	ldi	r22, 0x03	; 3
    3be0:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
}
    3be4:	cf 91       	pop	r28
    3be6:	df 91       	pop	r29
    3be8:	08 95       	ret

00003bea <SENSORS_vidUpdateTemp>:
void SENSORS_vidUpdateTemp(u8 Room){
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	df 93       	push	r29
    3bf0:	cf 93       	push	r28
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	27 97       	sbiw	r28, 0x07	; 7
    3bf8:	0f b6       	in	r0, 0x3f	; 63
    3bfa:	f8 94       	cli
    3bfc:	de bf       	out	0x3e, r29	; 62
    3bfe:	0f be       	out	0x3f, r0	; 63
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	8f 83       	std	Y+7, r24	; 0x07
	PIN_vidSetValue(MULTI_TEMP_EN,LOW);
    3c04:	8f e1       	ldi	r24, 0x1F	; 31
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_A ,(Room>>0) & 1);
    3c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c0e:	98 2f       	mov	r25, r24
    3c10:	91 70       	andi	r25, 0x01	; 1
    3c12:	88 e0       	ldi	r24, 0x08	; 8
    3c14:	69 2f       	mov	r22, r25
    3c16:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_B ,(Room>>1) & 1);
    3c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c1c:	86 95       	lsr	r24
    3c1e:	98 2f       	mov	r25, r24
    3c20:	91 70       	andi	r25, 0x01	; 1
    3c22:	89 e0       	ldi	r24, 0x09	; 9
    3c24:	69 2f       	mov	r22, r25
    3c26:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_C ,(Room>>2) & 1);
    3c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c2c:	86 95       	lsr	r24
    3c2e:	86 95       	lsr	r24
    3c30:	98 2f       	mov	r25, r24
    3c32:	91 70       	andi	r25, 0x01	; 1
    3c34:	8a e0       	ldi	r24, 0x0A	; 10
    3c36:	69 2f       	mov	r22, r25
    3c38:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_D ,(Room>>3) & 1);
    3c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c3e:	86 95       	lsr	r24
    3c40:	86 95       	lsr	r24
    3c42:	86 95       	lsr	r24
    3c44:	98 2f       	mov	r25, r24
    3c46:	91 70       	andi	r25, 0x01	; 1
    3c48:	8b e0       	ldi	r24, 0x0B	; 11
    3c4a:	69 2f       	mov	r22, r25
    3c4c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	u16 u16ADCRead = ADC_u16GetRead(MULTI_TEMP);
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <ADC_u16GetRead>
    3c56:	9e 83       	std	Y+6, r25	; 0x06
    3c58:	8d 83       	std	Y+5, r24	; 0x05
	float tempC = ((float)u16ADCRead / 1023.0f) * 5.0f * 100.0f;
    3c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5e:	cc 01       	movw	r24, r24
    3c60:	a0 e0       	ldi	r26, 0x00	; 0
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	0e 94 05 06 	call	0xc0a	; 0xc0a <__floatunsisf>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 ec       	ldi	r19, 0xC0	; 192
    3c78:	4f e7       	ldi	r20, 0x7F	; 127
    3c7a:	54 e4       	ldi	r21, 0x44	; 68
    3c7c:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 ea       	ldi	r20, 0xA0	; 160
    3c8e:	50 e4       	ldi	r21, 0x40	; 64
    3c90:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	bc 01       	movw	r22, r24
    3c9a:	cd 01       	movw	r24, r26
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	48 ec       	ldi	r20, 0xC8	; 200
    3ca2:	52 e4       	ldi	r21, 0x42	; 66
    3ca4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	9a 83       	std	Y+2, r25	; 0x02
    3cb0:	ab 83       	std	Y+3, r26	; 0x03
    3cb2:	bc 83       	std	Y+4, r27	; 0x04
	if(tempC < TEMP_NO_SENSOR_THRESHOLD) tempC = 0;  	//THRESHOLD FOR NO POWER
    3cb4:	69 81       	ldd	r22, Y+1	; 0x01
    3cb6:	7a 81       	ldd	r23, Y+2	; 0x02
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 ee       	ldi	r20, 0xE0	; 224
    3cc2:	50 e4       	ldi	r21, 0x40	; 64
    3cc4:	0e 94 23 05 	call	0xa46	; 0xa46 <__ltsf2>
    3cc8:	88 23       	and	r24, r24
    3cca:	44 f4       	brge	.+16     	; 0x3cdc <SENSORS_vidUpdateTemp+0xf2>
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	a0 e0       	ldi	r26, 0x00	; 0
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	ab 83       	std	Y+3, r26	; 0x03
    3cda:	bc 83       	std	Y+4, r27	; 0x04
	DataKeeper[Room].sensors[0] = (u8)tempC;
    3cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cde:	08 2f       	mov	r16, r24
    3ce0:	10 e0       	ldi	r17, 0x00	; 0
    3ce2:	69 81       	ldd	r22, Y+1	; 0x01
    3ce4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cea:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	28 2f       	mov	r18, r24
    3cf4:	c8 01       	movw	r24, r16
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	80 0f       	add	r24, r16
    3cfc:	91 1f       	adc	r25, r17
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	80 0f       	add	r24, r16
    3d08:	91 1f       	adc	r25, r17
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	e5 50       	subi	r30, 0x05	; 5
    3d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d10:	20 83       	st	Z, r18
	PIN_vidSetValue(MULTI_TEMP_EN,HIGH);
    3d12:	8f e1       	ldi	r24, 0x1F	; 31
    3d14:	61 e0       	ldi	r22, 0x01	; 1
    3d16:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
}
    3d1a:	27 96       	adiw	r28, 0x07	; 7
    3d1c:	0f b6       	in	r0, 0x3f	; 63
    3d1e:	f8 94       	cli
    3d20:	de bf       	out	0x3e, r29	; 62
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	cd bf       	out	0x3d, r28	; 61
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret

00003d30 <SENSORS_vidUpdateFlame>:

void SENSORS_vidUpdateFlame(u8 Room){
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <SENSORS_vidUpdateFlame+0x6>
    3d36:	0f 92       	push	r0
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	8b 83       	std	Y+3, r24	; 0x03
	PIN_vidSetValue(MULTI_SENSORS_EN,LOW);
    3d3e:	8b e1       	ldi	r24, 0x1B	; 27
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_A ,(Room>>0) & 1);
    3d46:	8b 81       	ldd	r24, Y+3	; 0x03
    3d48:	98 2f       	mov	r25, r24
    3d4a:	91 70       	andi	r25, 0x01	; 1
    3d4c:	88 e0       	ldi	r24, 0x08	; 8
    3d4e:	69 2f       	mov	r22, r25
    3d50:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_B ,(Room>>1) & 1);
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	86 95       	lsr	r24
    3d58:	98 2f       	mov	r25, r24
    3d5a:	91 70       	andi	r25, 0x01	; 1
    3d5c:	89 e0       	ldi	r24, 0x09	; 9
    3d5e:	69 2f       	mov	r22, r25
    3d60:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_C ,(Room>>2) & 1);
    3d64:	8b 81       	ldd	r24, Y+3	; 0x03
    3d66:	86 95       	lsr	r24
    3d68:	86 95       	lsr	r24
    3d6a:	98 2f       	mov	r25, r24
    3d6c:	91 70       	andi	r25, 0x01	; 1
    3d6e:	8a e0       	ldi	r24, 0x0A	; 10
    3d70:	69 2f       	mov	r22, r25
    3d72:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_D ,(Room>>3) & 1);
    3d76:	8b 81       	ldd	r24, Y+3	; 0x03
    3d78:	86 95       	lsr	r24
    3d7a:	86 95       	lsr	r24
    3d7c:	86 95       	lsr	r24
    3d7e:	98 2f       	mov	r25, r24
    3d80:	91 70       	andi	r25, 0x01	; 1
    3d82:	8b e0       	ldi	r24, 0x0B	; 11
    3d84:	69 2f       	mov	r22, r25
    3d86:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_A , (FLAME_CHANNEL>>0) & 1 );
    3d8a:	8c e0       	ldi	r24, 0x0C	; 12
    3d8c:	61 e0       	ldi	r22, 0x01	; 1
    3d8e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_B , (FLAME_CHANNEL>>1) & 1 );
    3d92:	8d e0       	ldi	r24, 0x0D	; 13
    3d94:	60 e0       	ldi	r22, 0x00	; 0
    3d96:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_C , (FLAME_CHANNEL>>2) & 1 );
    3d9a:	8e e0       	ldi	r24, 0x0E	; 14
    3d9c:	60 e0       	ldi	r22, 0x00	; 0
    3d9e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	u16 u16ADCRead = ADC_u16GetRead(2);
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <ADC_u16GetRead>
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	89 83       	std	Y+1, r24	; 0x01
	if(u16ADCRead > ONOFF_SENSOR_THRESHOLD ){
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	89 3c       	cpi	r24, 0xC9	; 201
    3db2:	91 05       	cpc	r25, r1
    3db4:	a0 f0       	brcs	.+40     	; 0x3dde <SENSORS_vidUpdateFlame+0xae>
		DataKeeper[Room].sensors[1] = 1;
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	28 2f       	mov	r18, r24
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	c9 01       	movw	r24, r18
    3dbe:	88 0f       	add	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	82 0f       	add	r24, r18
    3dc4:	93 1f       	adc	r25, r19
    3dc6:	88 0f       	add	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	88 0f       	add	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	82 0f       	add	r24, r18
    3dd0:	93 1f       	adc	r25, r19
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	e4 50       	subi	r30, 0x04	; 4
    3dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	80 83       	st	Z, r24
    3ddc:	12 c0       	rjmp	.+36     	; 0x3e02 <SENSORS_vidUpdateFlame+0xd2>
	}else{
		DataKeeper[Room].sensors[1] = 0;
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	c9 01       	movw	r24, r18
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	82 0f       	add	r24, r18
    3dec:	93 1f       	adc	r25, r19
    3dee:	88 0f       	add	r24, r24
    3df0:	99 1f       	adc	r25, r25
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	82 0f       	add	r24, r18
    3df8:	93 1f       	adc	r25, r19
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	e4 50       	subi	r30, 0x04	; 4
    3dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    3e00:	10 82       	st	Z, r1
	}
	PIN_vidSetValue(MULTI_SENSORS_EN,HIGH);
    3e02:	8b e1       	ldi	r24, 0x1B	; 27
    3e04:	61 e0       	ldi	r22, 0x01	; 1
    3e06:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
}
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <SENSORS_vidUpdateGas>:

void SENSORS_vidUpdateGas(u8 Room){
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	00 d0       	rcall	.+0      	; 0x3e1c <SENSORS_vidUpdateGas+0x6>
    3e1c:	0f 92       	push	r0
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	8b 83       	std	Y+3, r24	; 0x03
	PIN_vidSetValue(MULTI_SENSORS_EN,LOW);
    3e24:	8b e1       	ldi	r24, 0x1B	; 27
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_A ,(Room>>0) & 1);
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	98 2f       	mov	r25, r24
    3e30:	91 70       	andi	r25, 0x01	; 1
    3e32:	88 e0       	ldi	r24, 0x08	; 8
    3e34:	69 2f       	mov	r22, r25
    3e36:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_B ,(Room>>1) & 1);
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	86 95       	lsr	r24
    3e3e:	98 2f       	mov	r25, r24
    3e40:	91 70       	andi	r25, 0x01	; 1
    3e42:	89 e0       	ldi	r24, 0x09	; 9
    3e44:	69 2f       	mov	r22, r25
    3e46:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_C ,(Room>>2) & 1);
    3e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4c:	86 95       	lsr	r24
    3e4e:	86 95       	lsr	r24
    3e50:	98 2f       	mov	r25, r24
    3e52:	91 70       	andi	r25, 0x01	; 1
    3e54:	8a e0       	ldi	r24, 0x0A	; 10
    3e56:	69 2f       	mov	r22, r25
    3e58:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_D ,(Room>>3) & 1);
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	86 95       	lsr	r24
    3e60:	86 95       	lsr	r24
    3e62:	86 95       	lsr	r24
    3e64:	98 2f       	mov	r25, r24
    3e66:	91 70       	andi	r25, 0x01	; 1
    3e68:	8b e0       	ldi	r24, 0x0B	; 11
    3e6a:	69 2f       	mov	r22, r25
    3e6c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_A , (GAS_CHANNEL>>0) & 1 );
    3e70:	8c e0       	ldi	r24, 0x0C	; 12
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_B , (GAS_CHANNEL>>1) & 1 );
    3e78:	8d e0       	ldi	r24, 0x0D	; 13
    3e7a:	61 e0       	ldi	r22, 0x01	; 1
    3e7c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_C , (GAS_CHANNEL>>2) & 1 );
    3e80:	8e e0       	ldi	r24, 0x0E	; 14
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	u16 u16ADCRead = ADC_u16GetRead(MULTI_SENSORS);
    3e88:	82 e0       	ldi	r24, 0x02	; 2
    3e8a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <ADC_u16GetRead>
    3e8e:	9a 83       	std	Y+2, r25	; 0x02
    3e90:	89 83       	std	Y+1, r24	; 0x01
	if(u16ADCRead > ONOFF_SENSOR_THRESHOLD ){
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	9a 81       	ldd	r25, Y+2	; 0x02
    3e96:	89 3c       	cpi	r24, 0xC9	; 201
    3e98:	91 05       	cpc	r25, r1
    3e9a:	a0 f0       	brcs	.+40     	; 0x3ec4 <SENSORS_vidUpdateGas+0xae>
		DataKeeper[Room].sensors[2] = 1;
    3e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9e:	28 2f       	mov	r18, r24
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	c9 01       	movw	r24, r18
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	82 0f       	add	r24, r18
    3eaa:	93 1f       	adc	r25, r19
    3eac:	88 0f       	add	r24, r24
    3eae:	99 1f       	adc	r25, r25
    3eb0:	88 0f       	add	r24, r24
    3eb2:	99 1f       	adc	r25, r25
    3eb4:	82 0f       	add	r24, r18
    3eb6:	93 1f       	adc	r25, r19
    3eb8:	fc 01       	movw	r30, r24
    3eba:	e3 50       	subi	r30, 0x03	; 3
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	80 83       	st	Z, r24
    3ec2:	12 c0       	rjmp	.+36     	; 0x3ee8 <SENSORS_vidUpdateGas+0xd2>
	}else{
		DataKeeper[Room].sensors[2] = 0;
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec6:	28 2f       	mov	r18, r24
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	c9 01       	movw	r24, r18
    3ecc:	88 0f       	add	r24, r24
    3ece:	99 1f       	adc	r25, r25
    3ed0:	82 0f       	add	r24, r18
    3ed2:	93 1f       	adc	r25, r19
    3ed4:	88 0f       	add	r24, r24
    3ed6:	99 1f       	adc	r25, r25
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	82 0f       	add	r24, r18
    3ede:	93 1f       	adc	r25, r19
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	e3 50       	subi	r30, 0x03	; 3
    3ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee6:	10 82       	st	Z, r1
	}
	PIN_vidSetValue(MULTI_SENSORS_EN,HIGH);
    3ee8:	8b e1       	ldi	r24, 0x1B	; 27
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
}
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <SENSORS_vidUpdatePir>:
void SENSORS_vidUpdatePir(u8 Room){
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <SENSORS_vidUpdatePir+0x6>
    3f02:	0f 92       	push	r0
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62
    3f08:	8b 83       	std	Y+3, r24	; 0x03
	PIN_vidSetValue(MULTI_SENSORS_EN,LOW);
    3f0a:	8b e1       	ldi	r24, 0x1B	; 27
    3f0c:	60 e0       	ldi	r22, 0x00	; 0
    3f0e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_A ,(Room>>0) & 1);
    3f12:	8b 81       	ldd	r24, Y+3	; 0x03
    3f14:	98 2f       	mov	r25, r24
    3f16:	91 70       	andi	r25, 0x01	; 1
    3f18:	88 e0       	ldi	r24, 0x08	; 8
    3f1a:	69 2f       	mov	r22, r25
    3f1c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_B ,(Room>>1) & 1);
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	86 95       	lsr	r24
    3f24:	98 2f       	mov	r25, r24
    3f26:	91 70       	andi	r25, 0x01	; 1
    3f28:	89 e0       	ldi	r24, 0x09	; 9
    3f2a:	69 2f       	mov	r22, r25
    3f2c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_C ,(Room>>2) & 1);
    3f30:	8b 81       	ldd	r24, Y+3	; 0x03
    3f32:	86 95       	lsr	r24
    3f34:	86 95       	lsr	r24
    3f36:	98 2f       	mov	r25, r24
    3f38:	91 70       	andi	r25, 0x01	; 1
    3f3a:	8a e0       	ldi	r24, 0x0A	; 10
    3f3c:	69 2f       	mov	r22, r25
    3f3e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_D ,(Room>>3) & 1);
    3f42:	8b 81       	ldd	r24, Y+3	; 0x03
    3f44:	86 95       	lsr	r24
    3f46:	86 95       	lsr	r24
    3f48:	86 95       	lsr	r24
    3f4a:	98 2f       	mov	r25, r24
    3f4c:	91 70       	andi	r25, 0x01	; 1
    3f4e:	8b e0       	ldi	r24, 0x0B	; 11
    3f50:	69 2f       	mov	r22, r25
    3f52:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_A , (PIR_CHANNEL>>0) & 1 );
    3f56:	8c e0       	ldi	r24, 0x0C	; 12
    3f58:	61 e0       	ldi	r22, 0x01	; 1
    3f5a:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_B , (PIR_CHANNEL>>1) & 1 );
    3f5e:	8d e0       	ldi	r24, 0x0D	; 13
    3f60:	61 e0       	ldi	r22, 0x01	; 1
    3f62:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_C , (PIR_CHANNEL>>2) & 1 );
    3f66:	8e e0       	ldi	r24, 0x0E	; 14
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	u16 u16ADCRead = ADC_u16GetRead(MULTI_SENSORS);
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <ADC_u16GetRead>
    3f74:	9a 83       	std	Y+2, r25	; 0x02
    3f76:	89 83       	std	Y+1, r24	; 0x01
	if(u16ADCRead > ONOFF_SENSOR_THRESHOLD ){
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7c:	89 3c       	cpi	r24, 0xC9	; 201
    3f7e:	91 05       	cpc	r25, r1
    3f80:	a0 f0       	brcs	.+40     	; 0x3faa <SENSORS_vidUpdatePir+0xae>
		DataKeeper[Room].sensors[3] = 1;
    3f82:	8b 81       	ldd	r24, Y+3	; 0x03
    3f84:	28 2f       	mov	r18, r24
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	c9 01       	movw	r24, r18
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	82 0f       	add	r24, r18
    3f90:	93 1f       	adc	r25, r19
    3f92:	88 0f       	add	r24, r24
    3f94:	99 1f       	adc	r25, r25
    3f96:	88 0f       	add	r24, r24
    3f98:	99 1f       	adc	r25, r25
    3f9a:	82 0f       	add	r24, r18
    3f9c:	93 1f       	adc	r25, r19
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	e2 50       	subi	r30, 0x02	; 2
    3fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	80 83       	st	Z, r24
    3fa8:	12 c0       	rjmp	.+36     	; 0x3fce <SENSORS_vidUpdatePir+0xd2>
	}else{
		DataKeeper[Room].sensors[3] = 0;
    3faa:	8b 81       	ldd	r24, Y+3	; 0x03
    3fac:	28 2f       	mov	r18, r24
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	c9 01       	movw	r24, r18
    3fb2:	88 0f       	add	r24, r24
    3fb4:	99 1f       	adc	r25, r25
    3fb6:	82 0f       	add	r24, r18
    3fb8:	93 1f       	adc	r25, r19
    3fba:	88 0f       	add	r24, r24
    3fbc:	99 1f       	adc	r25, r25
    3fbe:	88 0f       	add	r24, r24
    3fc0:	99 1f       	adc	r25, r25
    3fc2:	82 0f       	add	r24, r18
    3fc4:	93 1f       	adc	r25, r19
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e2 50       	subi	r30, 0x02	; 2
    3fca:	fe 4f       	sbci	r31, 0xFE	; 254
    3fcc:	10 82       	st	Z, r1
	}
	PIN_vidSetValue(MULTI_SENSORS_EN,HIGH);
    3fce:	8b e1       	ldi	r24, 0x1B	; 27
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
}
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	08 95       	ret

00003fe2 <PCA9685_Init>:
#include "../../MCAL/I2C/i2c.h"
#include "pca9685.h"
#include "../DataKeeper/DataKeeper.h"
void PCA9685_Init(uint8_t addr) {
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	0f 92       	push	r0
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
    3fec:	89 83       	std	Y+1, r24	; 0x01
    I2C_Start();
    3fee:	0e 94 42 1c 	call	0x3884	; 0x3884 <I2C_Start>
    I2C_Write(addr<<1);
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	88 0f       	add	r24, r24
    3ff6:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x00); // MODE1
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x20); // Auto-increment enabled
    4000:	80 e2       	ldi	r24, 0x20	; 32
    4002:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Stop();
    4006:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <I2C_Stop>
}
    400a:	0f 90       	pop	r0
    400c:	cf 91       	pop	r28
    400e:	df 91       	pop	r29
    4010:	08 95       	ret

00004012 <PCA9685_SetPWMFreq>:

void PCA9685_SetPWMFreq(uint8_t addr, float freq) {
    4012:	df 93       	push	r29
    4014:	cf 93       	push	r28
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	2a 97       	sbiw	r28, 0x0a	; 10
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	f8 94       	cli
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	cd bf       	out	0x3d, r28	; 61
    4026:	8e 83       	std	Y+6, r24	; 0x06
    4028:	4f 83       	std	Y+7, r20	; 0x07
    402a:	58 87       	std	Y+8, r21	; 0x08
    402c:	69 87       	std	Y+9, r22	; 0x09
    402e:	7a 87       	std	Y+10, r23	; 0x0a
    float prescaleval = 25000000.0;
    4030:	80 e2       	ldi	r24, 0x20	; 32
    4032:	9c eb       	ldi	r25, 0xBC	; 188
    4034:	ae eb       	ldi	r26, 0xBE	; 190
    4036:	bb e4       	ldi	r27, 0x4B	; 75
    4038:	8a 83       	std	Y+2, r24	; 0x02
    403a:	9b 83       	std	Y+3, r25	; 0x03
    403c:	ac 83       	std	Y+4, r26	; 0x04
    403e:	bd 83       	std	Y+5, r27	; 0x05
    prescaleval /= 4096.0;
    4040:	6a 81       	ldd	r22, Y+2	; 0x02
    4042:	7b 81       	ldd	r23, Y+3	; 0x03
    4044:	8c 81       	ldd	r24, Y+4	; 0x04
    4046:	9d 81       	ldd	r25, Y+5	; 0x05
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e8       	ldi	r20, 0x80	; 128
    404e:	55 e4       	ldi	r21, 0x45	; 69
    4050:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	8a 83       	std	Y+2, r24	; 0x02
    405a:	9b 83       	std	Y+3, r25	; 0x03
    405c:	ac 83       	std	Y+4, r26	; 0x04
    405e:	bd 83       	std	Y+5, r27	; 0x05
    prescaleval /= freq;
    4060:	6a 81       	ldd	r22, Y+2	; 0x02
    4062:	7b 81       	ldd	r23, Y+3	; 0x03
    4064:	8c 81       	ldd	r24, Y+4	; 0x04
    4066:	9d 81       	ldd	r25, Y+5	; 0x05
    4068:	2f 81       	ldd	r18, Y+7	; 0x07
    406a:	38 85       	ldd	r19, Y+8	; 0x08
    406c:	49 85       	ldd	r20, Y+9	; 0x09
    406e:	5a 85       	ldd	r21, Y+10	; 0x0a
    4070:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	8a 83       	std	Y+2, r24	; 0x02
    407a:	9b 83       	std	Y+3, r25	; 0x03
    407c:	ac 83       	std	Y+4, r26	; 0x04
    407e:	bd 83       	std	Y+5, r27	; 0x05
    prescaleval -= 1.0;
    4080:	6a 81       	ldd	r22, Y+2	; 0x02
    4082:	7b 81       	ldd	r23, Y+3	; 0x03
    4084:	8c 81       	ldd	r24, Y+4	; 0x04
    4086:	9d 81       	ldd	r25, Y+5	; 0x05
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e8       	ldi	r20, 0x80	; 128
    408e:	5f e3       	ldi	r21, 0x3F	; 63
    4090:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	8a 83       	std	Y+2, r24	; 0x02
    409a:	9b 83       	std	Y+3, r25	; 0x03
    409c:	ac 83       	std	Y+4, r26	; 0x04
    409e:	bd 83       	std	Y+5, r27	; 0x05
    uint8_t prescale = (uint8_t)(prescaleval + 0.5);
    40a0:	6a 81       	ldd	r22, Y+2	; 0x02
    40a2:	7b 81       	ldd	r23, Y+3	; 0x03
    40a4:	8c 81       	ldd	r24, Y+4	; 0x04
    40a6:	9d 81       	ldd	r25, Y+5	; 0x05
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	5f e3       	ldi	r21, 0x3F	; 63
    40b0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	89 83       	std	Y+1, r24	; 0x01

    I2C_Start();
    40c6:	0e 94 42 1c 	call	0x3884	; 0x3884 <I2C_Start>
    I2C_Write(addr<<1);
    40ca:	8e 81       	ldd	r24, Y+6	; 0x06
    40cc:	88 0f       	add	r24, r24
    40ce:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x00);
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x10); // sleep
    40d8:	80 e1       	ldi	r24, 0x10	; 16
    40da:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Stop();
    40de:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <I2C_Stop>

    I2C_Start();
    40e2:	0e 94 42 1c 	call	0x3884	; 0x3884 <I2C_Start>
    I2C_Write(addr<<1);
    40e6:	8e 81       	ldd	r24, Y+6	; 0x06
    40e8:	88 0f       	add	r24, r24
    40ea:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0xFE); // prescale register
    40ee:	8e ef       	ldi	r24, 0xFE	; 254
    40f0:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(prescale);
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Stop();
    40fa:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <I2C_Stop>

    I2C_Start();
    40fe:	0e 94 42 1c 	call	0x3884	; 0x3884 <I2C_Start>
    I2C_Write(addr<<1);
    4102:	8e 81       	ldd	r24, Y+6	; 0x06
    4104:	88 0f       	add	r24, r24
    4106:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x00);
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x20); // restart
    4110:	80 e2       	ldi	r24, 0x20	; 32
    4112:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Stop();
    4116:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <I2C_Stop>
}
    411a:	2a 96       	adiw	r28, 0x0a	; 10
    411c:	0f b6       	in	r0, 0x3f	; 63
    411e:	f8 94       	cli
    4120:	de bf       	out	0x3e, r29	; 62
    4122:	0f be       	out	0x3f, r0	; 63
    4124:	cd bf       	out	0x3d, r28	; 61
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	08 95       	ret

0000412c <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t addr, uint8_t channel, uint16_t on, uint16_t off) {
    412c:	df 93       	push	r29
    412e:	cf 93       	push	r28
    4130:	00 d0       	rcall	.+0      	; 0x4132 <PCA9685_SetPWM+0x6>
    4132:	00 d0       	rcall	.+0      	; 0x4134 <PCA9685_SetPWM+0x8>
    4134:	00 d0       	rcall	.+0      	; 0x4136 <PCA9685_SetPWM+0xa>
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	89 83       	std	Y+1, r24	; 0x01
    413c:	6a 83       	std	Y+2, r22	; 0x02
    413e:	5c 83       	std	Y+4, r21	; 0x04
    4140:	4b 83       	std	Y+3, r20	; 0x03
    4142:	3e 83       	std	Y+6, r19	; 0x06
    4144:	2d 83       	std	Y+5, r18	; 0x05
    I2C_Start();
    4146:	0e 94 42 1c 	call	0x3884	; 0x3884 <I2C_Start>
    I2C_Write(addr<<1);
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	88 0f       	add	r24, r24
    414e:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(0x06 + 4*channel);
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	88 2f       	mov	r24, r24
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	88 0f       	add	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	8a 5f       	subi	r24, 0xFA	; 250
    4162:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(on & 0xFF);
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(on >> 8);
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	89 2f       	mov	r24, r25
    4172:	99 27       	eor	r25, r25
    4174:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(off & 0xFF);
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Write(off >> 8);
    417e:	8d 81       	ldd	r24, Y+5	; 0x05
    4180:	9e 81       	ldd	r25, Y+6	; 0x06
    4182:	89 2f       	mov	r24, r25
    4184:	99 27       	eor	r25, r25
    4186:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <I2C_Write>
    I2C_Stop();
    418a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <I2C_Stop>
}
    418e:	26 96       	adiw	r28, 0x06	; 6
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	08 95       	ret

000041a0 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t addr, uint8_t channel, float angle) {
    41a0:	df 93       	push	r29
    41a2:	cf 93       	push	r28
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	2c 97       	sbiw	r28, 0x0c	; 12
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
    41b4:	8f 83       	std	Y+7, r24	; 0x07
    41b6:	68 87       	std	Y+8, r22	; 0x08
    41b8:	29 87       	std	Y+9, r18	; 0x09
    41ba:	3a 87       	std	Y+10, r19	; 0x0a
    41bc:	4b 87       	std	Y+11, r20	; 0x0b
    41be:	5c 87       	std	Y+12, r21	; 0x0c
	channel--;
    41c0:	88 85       	ldd	r24, Y+8	; 0x08
    41c2:	81 50       	subi	r24, 0x01	; 1
    41c4:	88 87       	std	Y+8, r24	; 0x08
    if (angle < -90.0f) angle = -90.0f;
    41c6:	69 85       	ldd	r22, Y+9	; 0x09
    41c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    41ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    41cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	44 eb       	ldi	r20, 0xB4	; 180
    41d4:	52 ec       	ldi	r21, 0xC2	; 194
    41d6:	0e 94 23 05 	call	0xa46	; 0xa46 <__ltsf2>
    41da:	88 23       	and	r24, r24
    41dc:	44 f4       	brge	.+16     	; 0x41ee <PCA9685_SetServoAngle+0x4e>
    41de:	80 e0       	ldi	r24, 0x00	; 0
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	a4 eb       	ldi	r26, 0xB4	; 180
    41e4:	b2 ec       	ldi	r27, 0xC2	; 194
    41e6:	89 87       	std	Y+9, r24	; 0x09
    41e8:	9a 87       	std	Y+10, r25	; 0x0a
    41ea:	ab 87       	std	Y+11, r26	; 0x0b
    41ec:	bc 87       	std	Y+12, r27	; 0x0c
    if (angle > 90.0f)  angle = 90.0f;
    41ee:	69 85       	ldd	r22, Y+9	; 0x09
    41f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    41f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    41f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	44 eb       	ldi	r20, 0xB4	; 180
    41fc:	52 e4       	ldi	r21, 0x42	; 66
    41fe:	0e 94 c3 04 	call	0x986	; 0x986 <__gtsf2>
    4202:	18 16       	cp	r1, r24
    4204:	44 f4       	brge	.+16     	; 0x4216 <PCA9685_SetServoAngle+0x76>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	a4 eb       	ldi	r26, 0xB4	; 180
    420c:	b2 e4       	ldi	r27, 0x42	; 66
    420e:	89 87       	std	Y+9, r24	; 0x09
    4210:	9a 87       	std	Y+10, r25	; 0x0a
    4212:	ab 87       	std	Y+11, r26	; 0x0b
    4214:	bc 87       	std	Y+12, r27	; 0x0c

    float scale = (SERVO_MAX - SERVO_MIN) / 180.0f;
    4216:	88 e2       	ldi	r24, 0x28	; 40
    4218:	9d e7       	ldi	r25, 0x7D	; 125
    421a:	a2 e9       	ldi	r26, 0x92	; 146
    421c:	bf e3       	ldi	r27, 0x3F	; 63
    421e:	8b 83       	std	Y+3, r24	; 0x03
    4220:	9c 83       	std	Y+4, r25	; 0x04
    4222:	ad 83       	std	Y+5, r26	; 0x05
    4224:	be 83       	std	Y+6, r27	; 0x06
    uint16_t pulse = (uint16_t)(SERVO_MIN + (angle + 90.0f) * scale + 0.5f); // +0.5 للتقريب
    4226:	69 85       	ldd	r22, Y+9	; 0x09
    4228:	7a 85       	ldd	r23, Y+10	; 0x0a
    422a:	8b 85       	ldd	r24, Y+11	; 0x0b
    422c:	9c 85       	ldd	r25, Y+12	; 0x0c
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	44 eb       	ldi	r20, 0xB4	; 180
    4234:	52 e4       	ldi	r21, 0x42	; 66
    4236:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	bc 01       	movw	r22, r24
    4240:	cd 01       	movw	r24, r26
    4242:	2b 81       	ldd	r18, Y+3	; 0x03
    4244:	3c 81       	ldd	r19, Y+4	; 0x04
    4246:	4d 81       	ldd	r20, Y+5	; 0x05
    4248:	5e 81       	ldd	r21, Y+6	; 0x06
    424a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	bc 01       	movw	r22, r24
    4254:	cd 01       	movw	r24, r26
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	4c e4       	ldi	r20, 0x4C	; 76
    425c:	53 e4       	ldi	r21, 0x43	; 67
    425e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	bc 01       	movw	r22, r24
    4268:	cd 01       	movw	r24, r26
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	5f e3       	ldi	r21, 0x3F	; 63
    4272:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	bc 01       	movw	r22, r24
    427c:	cd 01       	movw	r24, r26
    427e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4282:	dc 01       	movw	r26, r24
    4284:	cb 01       	movw	r24, r22
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
    PCA9685_SetPWM(addr, channel, 0, pulse);
    428a:	29 81       	ldd	r18, Y+1	; 0x01
    428c:	3a 81       	ldd	r19, Y+2	; 0x02
    428e:	8f 81       	ldd	r24, Y+7	; 0x07
    4290:	68 85       	ldd	r22, Y+8	; 0x08
    4292:	40 e0       	ldi	r20, 0x00	; 0
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	0e 94 96 20 	call	0x412c	; 0x412c <PCA9685_SetPWM>
    if(addr == 0x40){DataKeeper[channel].servoAngleA = angle;}
    429a:	8f 81       	ldd	r24, Y+7	; 0x07
    429c:	80 34       	cpi	r24, 0x40	; 64
    429e:	d1 f4       	brne	.+52     	; 0x42d4 <PCA9685_SetServoAngle+0x134>
    42a0:	88 85       	ldd	r24, Y+8	; 0x08
    42a2:	28 2f       	mov	r18, r24
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	c9 01       	movw	r24, r18
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	82 0f       	add	r24, r18
    42ae:	93 1f       	adc	r25, r19
    42b0:	88 0f       	add	r24, r24
    42b2:	99 1f       	adc	r25, r25
    42b4:	88 0f       	add	r24, r24
    42b6:	99 1f       	adc	r25, r25
    42b8:	82 0f       	add	r24, r18
    42ba:	93 1f       	adc	r25, r19
    42bc:	fc 01       	movw	r30, r24
    42be:	e1 50       	subi	r30, 0x01	; 1
    42c0:	fe 4f       	sbci	r31, 0xFE	; 254
    42c2:	89 85       	ldd	r24, Y+9	; 0x09
    42c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c6:	ab 85       	ldd	r26, Y+11	; 0x0b
    42c8:	bc 85       	ldd	r27, Y+12	; 0x0c
    42ca:	80 83       	st	Z, r24
    42cc:	91 83       	std	Z+1, r25	; 0x01
    42ce:	a2 83       	std	Z+2, r26	; 0x02
    42d0:	b3 83       	std	Z+3, r27	; 0x03
    42d2:	1c c0       	rjmp	.+56     	; 0x430c <PCA9685_SetServoAngle+0x16c>
    else if(addr == 0x41)  {DataKeeper[channel].servoAngleB =angle;}
    42d4:	8f 81       	ldd	r24, Y+7	; 0x07
    42d6:	81 34       	cpi	r24, 0x41	; 65
    42d8:	c9 f4       	brne	.+50     	; 0x430c <PCA9685_SetServoAngle+0x16c>
    42da:	88 85       	ldd	r24, Y+8	; 0x08
    42dc:	28 2f       	mov	r18, r24
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	c9 01       	movw	r24, r18
    42e2:	88 0f       	add	r24, r24
    42e4:	99 1f       	adc	r25, r25
    42e6:	82 0f       	add	r24, r18
    42e8:	93 1f       	adc	r25, r19
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	82 0f       	add	r24, r18
    42f4:	93 1f       	adc	r25, r19
    42f6:	fc 01       	movw	r30, r24
    42f8:	ed 5f       	subi	r30, 0xFD	; 253
    42fa:	fd 4f       	sbci	r31, 0xFD	; 253
    42fc:	89 85       	ldd	r24, Y+9	; 0x09
    42fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4300:	ab 85       	ldd	r26, Y+11	; 0x0b
    4302:	bc 85       	ldd	r27, Y+12	; 0x0c
    4304:	80 83       	st	Z, r24
    4306:	91 83       	std	Z+1, r25	; 0x01
    4308:	a2 83       	std	Z+2, r26	; 0x02
    430a:	b3 83       	std	Z+3, r27	; 0x03
}
    430c:	2c 96       	adiw	r28, 0x0c	; 12
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	cf 91       	pop	r28
    431a:	df 91       	pop	r29
    431c:	08 95       	ret

0000431e <vidChannelInit>:
#include "onoffch.h"
#include "../DataKeeper/DataKeeper.h"



void vidChannelInit(void){
    431e:	df 93       	push	r29
    4320:	cf 93       	push	r28
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	2e 97       	sbiw	r28, 0x0e	; 14
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
	Rooms_Init(DataKeeper , 16);
    4332:	8a ef       	ldi	r24, 0xFA	; 250
    4334:	91 e0       	ldi	r25, 0x01	; 1
    4336:	60 e1       	ldi	r22, 0x10	; 16
    4338:	0e 94 b7 23 	call	0x476e	; 0x476e <Rooms_Init>
	PIN_vidSetMode(ROOM_SELECT_A , OUTPUT_LOW);
    433c:	88 e0       	ldi	r24, 0x08	; 8
    433e:	62 e0       	ldi	r22, 0x02	; 2
    4340:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(ROOM_SELECT_B , OUTPUT_LOW);
    4344:	89 e0       	ldi	r24, 0x09	; 9
    4346:	62 e0       	ldi	r22, 0x02	; 2
    4348:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(ROOM_SELECT_C , OUTPUT_LOW);
    434c:	8a e0       	ldi	r24, 0x0A	; 10
    434e:	62 e0       	ldi	r22, 0x02	; 2
    4350:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(ROOM_SELECT_D , OUTPUT_LOW);
    4354:	8b e0       	ldi	r24, 0x0B	; 11
    4356:	62 e0       	ldi	r22, 0x02	; 2
    4358:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(CHANNEL_SELECT_A , OUTPUT_LOW);
    435c:	8c e0       	ldi	r24, 0x0C	; 12
    435e:	62 e0       	ldi	r22, 0x02	; 2
    4360:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(CHANNEL_SELECT_B , OUTPUT_LOW);
    4364:	8d e0       	ldi	r24, 0x0D	; 13
    4366:	62 e0       	ldi	r22, 0x02	; 2
    4368:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(CHANNEL_SELECT_C , OUTPUT_LOW);
    436c:	8e e0       	ldi	r24, 0x0E	; 14
    436e:	62 e0       	ldi	r22, 0x02	; 2
    4370:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(MULTI_CONTROL , OUTPUT_HIGH);
    4374:	8a e1       	ldi	r24, 0x1A	; 26
    4376:	63 e0       	ldi	r22, 0x03	; 3
    4378:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(MULTI_CONTROL_EN , OUTPUT_HIGH);
    437c:	8c e1       	ldi	r24, 0x1C	; 28
    437e:	63 e0       	ldi	r22, 0x03	; 3
    4380:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(LE , OUTPUT_HIGH);
    4384:	8e e1       	ldi	r24, 0x1E	; 30
    4386:	63 e0       	ldi	r22, 0x03	; 3
    4388:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
	PIN_vidSetMode(MR , OUTPUT_HIGH);
    438c:	8f e0       	ldi	r24, 0x0F	; 15
    438e:	63 e0       	ldi	r22, 0x03	; 3
    4390:	0e 94 73 18 	call	0x30e6	; 0x30e6 <PIN_vidSetMode>
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	a0 e8       	ldi	r26, 0x80	; 128
    439a:	bf e3       	ldi	r27, 0x3F	; 63
    439c:	8b 87       	std	Y+11, r24	; 0x0b
    439e:	9c 87       	std	Y+12, r25	; 0x0c
    43a0:	ad 87       	std	Y+13, r26	; 0x0d
    43a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	4a e7       	ldi	r20, 0x7A	; 122
    43b2:	55 e4       	ldi	r21, 0x45	; 69
    43b4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	8f 83       	std	Y+7, r24	; 0x07
    43be:	98 87       	std	Y+8, r25	; 0x08
    43c0:	a9 87       	std	Y+9, r26	; 0x09
    43c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43c4:	6f 81       	ldd	r22, Y+7	; 0x07
    43c6:	78 85       	ldd	r23, Y+8	; 0x08
    43c8:	89 85       	ldd	r24, Y+9	; 0x09
    43ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	40 e8       	ldi	r20, 0x80	; 128
    43d2:	5f e3       	ldi	r21, 0x3F	; 63
    43d4:	0e 94 23 05 	call	0xa46	; 0xa46 <__ltsf2>
    43d8:	88 23       	and	r24, r24
    43da:	2c f4       	brge	.+10     	; 0x43e6 <vidChannelInit+0xc8>
		__ticks = 1;
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	9e 83       	std	Y+6, r25	; 0x06
    43e2:	8d 83       	std	Y+5, r24	; 0x05
    43e4:	3f c0       	rjmp	.+126    	; 0x4464 <vidChannelInit+0x146>
	else if (__tmp > 65535)
    43e6:	6f 81       	ldd	r22, Y+7	; 0x07
    43e8:	78 85       	ldd	r23, Y+8	; 0x08
    43ea:	89 85       	ldd	r24, Y+9	; 0x09
    43ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	3f ef       	ldi	r19, 0xFF	; 255
    43f2:	4f e7       	ldi	r20, 0x7F	; 127
    43f4:	57 e4       	ldi	r21, 0x47	; 71
    43f6:	0e 94 c3 04 	call	0x986	; 0x986 <__gtsf2>
    43fa:	18 16       	cp	r1, r24
    43fc:	4c f5       	brge	.+82     	; 0x4450 <vidChannelInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4400:	7c 85       	ldd	r23, Y+12	; 0x0c
    4402:	8d 85       	ldd	r24, Y+13	; 0x0d
    4404:	9e 85       	ldd	r25, Y+14	; 0x0e
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e2       	ldi	r20, 0x20	; 32
    440c:	51 e4       	ldi	r21, 0x41	; 65
    440e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	bc 01       	movw	r22, r24
    4418:	cd 01       	movw	r24, r26
    441a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	9e 83       	std	Y+6, r25	; 0x06
    4424:	8d 83       	std	Y+5, r24	; 0x05
    4426:	0f c0       	rjmp	.+30     	; 0x4446 <vidChannelInit+0x128>
    4428:	80 e9       	ldi	r24, 0x90	; 144
    442a:	91 e0       	ldi	r25, 0x01	; 1
    442c:	9c 83       	std	Y+4, r25	; 0x04
    442e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4430:	8b 81       	ldd	r24, Y+3	; 0x03
    4432:	9c 81       	ldd	r25, Y+4	; 0x04
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <vidChannelInit+0x116>
    4438:	9c 83       	std	Y+4, r25	; 0x04
    443a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443c:	8d 81       	ldd	r24, Y+5	; 0x05
    443e:	9e 81       	ldd	r25, Y+6	; 0x06
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	9e 83       	std	Y+6, r25	; 0x06
    4444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4446:	8d 81       	ldd	r24, Y+5	; 0x05
    4448:	9e 81       	ldd	r25, Y+6	; 0x06
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	69 f7       	brne	.-38     	; 0x4428 <vidChannelInit+0x10a>
    444e:	14 c0       	rjmp	.+40     	; 0x4478 <vidChannelInit+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4450:	6f 81       	ldd	r22, Y+7	; 0x07
    4452:	78 85       	ldd	r23, Y+8	; 0x08
    4454:	89 85       	ldd	r24, Y+9	; 0x09
    4456:	9a 85       	ldd	r25, Y+10	; 0x0a
    4458:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	9e 83       	std	Y+6, r25	; 0x06
    4462:	8d 83       	std	Y+5, r24	; 0x05
    4464:	8d 81       	ldd	r24, Y+5	; 0x05
    4466:	9e 81       	ldd	r25, Y+6	; 0x06
    4468:	9a 83       	std	Y+2, r25	; 0x02
    446a:	89 83       	std	Y+1, r24	; 0x01
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	9a 81       	ldd	r25, Y+2	; 0x02
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	f1 f7       	brne	.-4      	; 0x4470 <vidChannelInit+0x152>
    4474:	9a 83       	std	Y+2, r25	; 0x02
    4476:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    4478:	2e 96       	adiw	r28, 0x0e	; 14
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	08 95       	ret

0000448a <vidChannelOn>:
void vidChannelOn(u8 u8RoomNum ,u8 u8ChannelNum){
    448a:	df 93       	push	r29
    448c:	cf 93       	push	r28
    448e:	00 d0       	rcall	.+0      	; 0x4490 <vidChannelOn+0x6>
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	89 83       	std	Y+1, r24	; 0x01
    4496:	6a 83       	std	Y+2, r22	; 0x02
	u8RoomNum--;
    4498:	89 81       	ldd	r24, Y+1	; 0x01
    449a:	81 50       	subi	r24, 0x01	; 1
    449c:	89 83       	std	Y+1, r24	; 0x01
	u8ChannelNum--;
    449e:	8a 81       	ldd	r24, Y+2	; 0x02
    44a0:	81 50       	subi	r24, 0x01	; 1
    44a2:	8a 83       	std	Y+2, r24	; 0x02
	PIN_vidSetValue(ROOM_SELECT_A ,(u8RoomNum>>0) & 1);
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	98 2f       	mov	r25, r24
    44a8:	91 70       	andi	r25, 0x01	; 1
    44aa:	88 e0       	ldi	r24, 0x08	; 8
    44ac:	69 2f       	mov	r22, r25
    44ae:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_B ,(u8RoomNum>>1) & 1);
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
    44b4:	86 95       	lsr	r24
    44b6:	98 2f       	mov	r25, r24
    44b8:	91 70       	andi	r25, 0x01	; 1
    44ba:	89 e0       	ldi	r24, 0x09	; 9
    44bc:	69 2f       	mov	r22, r25
    44be:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_C ,(u8RoomNum>>2) & 1);
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	86 95       	lsr	r24
    44c6:	86 95       	lsr	r24
    44c8:	98 2f       	mov	r25, r24
    44ca:	91 70       	andi	r25, 0x01	; 1
    44cc:	8a e0       	ldi	r24, 0x0A	; 10
    44ce:	69 2f       	mov	r22, r25
    44d0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_D ,(u8RoomNum>>3) & 1);
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	86 95       	lsr	r24
    44d8:	86 95       	lsr	r24
    44da:	86 95       	lsr	r24
    44dc:	98 2f       	mov	r25, r24
    44de:	91 70       	andi	r25, 0x01	; 1
    44e0:	8b e0       	ldi	r24, 0x0B	; 11
    44e2:	69 2f       	mov	r22, r25
    44e4:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_A , (u8ChannelNum>>0) & 1 );
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	98 2f       	mov	r25, r24
    44ec:	91 70       	andi	r25, 0x01	; 1
    44ee:	8c e0       	ldi	r24, 0x0C	; 12
    44f0:	69 2f       	mov	r22, r25
    44f2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_B , (u8ChannelNum>>1) & 1 );
    44f6:	8a 81       	ldd	r24, Y+2	; 0x02
    44f8:	86 95       	lsr	r24
    44fa:	98 2f       	mov	r25, r24
    44fc:	91 70       	andi	r25, 0x01	; 1
    44fe:	8d e0       	ldi	r24, 0x0D	; 13
    4500:	69 2f       	mov	r22, r25
    4502:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_C , (u8ChannelNum>>2) & 1 );
    4506:	8a 81       	ldd	r24, Y+2	; 0x02
    4508:	86 95       	lsr	r24
    450a:	86 95       	lsr	r24
    450c:	98 2f       	mov	r25, r24
    450e:	91 70       	andi	r25, 0x01	; 1
    4510:	8e e0       	ldi	r24, 0x0E	; 14
    4512:	69 2f       	mov	r22, r25
    4514:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(MULTI_CONTROL , HIGH);
    4518:	8a e1       	ldi	r24, 0x1A	; 26
    451a:	61 e0       	ldi	r22, 0x01	; 1
    451c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(MULTI_CONTROL_EN , LOW);
    4520:	8c e1       	ldi	r24, 0x1C	; 28
    4522:	60 e0       	ldi	r22, 0x00	; 0
    4524:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(LE , LOW);
    4528:	8e e1       	ldi	r24, 0x1E	; 30
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(LE , HIGH);
    4530:	8e e1       	ldi	r24, 0x1E	; 30
    4532:	61 e0       	ldi	r22, 0x01	; 1
    4534:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(MULTI_CONTROL_EN , HIGH);
    4538:	8c e1       	ldi	r24, 0x1C	; 28
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	DataKeeper[u8RoomNum].channelBits |= (1 << u8ChannelNum); // Setting Bit
    4540:	89 81       	ldd	r24, Y+1	; 0x01
    4542:	48 2f       	mov	r20, r24
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	89 81       	ldd	r24, Y+1	; 0x01
    4548:	28 2f       	mov	r18, r24
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	c9 01       	movw	r24, r18
    454e:	88 0f       	add	r24, r24
    4550:	99 1f       	adc	r25, r25
    4552:	82 0f       	add	r24, r18
    4554:	93 1f       	adc	r25, r19
    4556:	88 0f       	add	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	82 0f       	add	r24, r18
    4560:	93 1f       	adc	r25, r19
    4562:	fc 01       	movw	r30, r24
    4564:	e6 50       	subi	r30, 0x06	; 6
    4566:	fe 4f       	sbci	r31, 0xFE	; 254
    4568:	80 81       	ld	r24, Z
    456a:	68 2f       	mov	r22, r24
    456c:	8a 81       	ldd	r24, Y+2	; 0x02
    456e:	28 2f       	mov	r18, r24
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	02 c0       	rjmp	.+4      	; 0x457c <vidChannelOn+0xf2>
    4578:	88 0f       	add	r24, r24
    457a:	99 1f       	adc	r25, r25
    457c:	2a 95       	dec	r18
    457e:	e2 f7       	brpl	.-8      	; 0x4578 <vidChannelOn+0xee>
    4580:	86 2b       	or	r24, r22
    4582:	28 2f       	mov	r18, r24
    4584:	ca 01       	movw	r24, r20
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	84 0f       	add	r24, r20
    458c:	95 1f       	adc	r25, r21
    458e:	88 0f       	add	r24, r24
    4590:	99 1f       	adc	r25, r25
    4592:	88 0f       	add	r24, r24
    4594:	99 1f       	adc	r25, r25
    4596:	84 0f       	add	r24, r20
    4598:	95 1f       	adc	r25, r21
    459a:	fc 01       	movw	r30, r24
    459c:	e6 50       	subi	r30, 0x06	; 6
    459e:	fe 4f       	sbci	r31, 0xFE	; 254
    45a0:	20 83       	st	Z, r18
}
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	cf 91       	pop	r28
    45a8:	df 91       	pop	r29
    45aa:	08 95       	ret

000045ac <vidChannelOff>:
void vidChannelOff(u8 u8RoomNum ,u8 u8ChannelNum){
    45ac:	df 93       	push	r29
    45ae:	cf 93       	push	r28
    45b0:	00 d0       	rcall	.+0      	; 0x45b2 <vidChannelOff+0x6>
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
    45b6:	89 83       	std	Y+1, r24	; 0x01
    45b8:	6a 83       	std	Y+2, r22	; 0x02
	u8RoomNum--;
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	81 50       	subi	r24, 0x01	; 1
    45be:	89 83       	std	Y+1, r24	; 0x01
	u8ChannelNum--;
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	81 50       	subi	r24, 0x01	; 1
    45c4:	8a 83       	std	Y+2, r24	; 0x02
	PIN_vidSetValue(ROOM_SELECT_A ,(u8RoomNum>>0) & 1);
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	98 2f       	mov	r25, r24
    45ca:	91 70       	andi	r25, 0x01	; 1
    45cc:	88 e0       	ldi	r24, 0x08	; 8
    45ce:	69 2f       	mov	r22, r25
    45d0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_B ,(u8RoomNum>>1) & 1);
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	86 95       	lsr	r24
    45d8:	98 2f       	mov	r25, r24
    45da:	91 70       	andi	r25, 0x01	; 1
    45dc:	89 e0       	ldi	r24, 0x09	; 9
    45de:	69 2f       	mov	r22, r25
    45e0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_C ,(u8RoomNum>>2) & 1);
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	86 95       	lsr	r24
    45e8:	86 95       	lsr	r24
    45ea:	98 2f       	mov	r25, r24
    45ec:	91 70       	andi	r25, 0x01	; 1
    45ee:	8a e0       	ldi	r24, 0x0A	; 10
    45f0:	69 2f       	mov	r22, r25
    45f2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(ROOM_SELECT_D ,(u8RoomNum>>3) & 1);
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	86 95       	lsr	r24
    45fa:	86 95       	lsr	r24
    45fc:	86 95       	lsr	r24
    45fe:	98 2f       	mov	r25, r24
    4600:	91 70       	andi	r25, 0x01	; 1
    4602:	8b e0       	ldi	r24, 0x0B	; 11
    4604:	69 2f       	mov	r22, r25
    4606:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_A , (u8ChannelNum>>0) & 1 );
    460a:	8a 81       	ldd	r24, Y+2	; 0x02
    460c:	98 2f       	mov	r25, r24
    460e:	91 70       	andi	r25, 0x01	; 1
    4610:	8c e0       	ldi	r24, 0x0C	; 12
    4612:	69 2f       	mov	r22, r25
    4614:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_B , (u8ChannelNum>>1) & 1 );
    4618:	8a 81       	ldd	r24, Y+2	; 0x02
    461a:	86 95       	lsr	r24
    461c:	98 2f       	mov	r25, r24
    461e:	91 70       	andi	r25, 0x01	; 1
    4620:	8d e0       	ldi	r24, 0x0D	; 13
    4622:	69 2f       	mov	r22, r25
    4624:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(CHANNEL_SELECT_C , (u8ChannelNum>>2) & 1 );
    4628:	8a 81       	ldd	r24, Y+2	; 0x02
    462a:	86 95       	lsr	r24
    462c:	86 95       	lsr	r24
    462e:	98 2f       	mov	r25, r24
    4630:	91 70       	andi	r25, 0x01	; 1
    4632:	8e e0       	ldi	r24, 0x0E	; 14
    4634:	69 2f       	mov	r22, r25
    4636:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(MULTI_CONTROL , LOW);
    463a:	8a e1       	ldi	r24, 0x1A	; 26
    463c:	60 e0       	ldi	r22, 0x00	; 0
    463e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(MULTI_CONTROL_EN , LOW);
    4642:	8c e1       	ldi	r24, 0x1C	; 28
    4644:	60 e0       	ldi	r22, 0x00	; 0
    4646:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(LE , LOW);
    464a:	8e e1       	ldi	r24, 0x1E	; 30
    464c:	60 e0       	ldi	r22, 0x00	; 0
    464e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(LE , HIGH);
    4652:	8e e1       	ldi	r24, 0x1E	; 30
    4654:	61 e0       	ldi	r22, 0x01	; 1
    4656:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	PIN_vidSetValue(MULTI_CONTROL_EN , HIGH);
    465a:	8c e1       	ldi	r24, 0x1C	; 28
    465c:	61 e0       	ldi	r22, 0x01	; 1
    465e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
	DataKeeper[u8RoomNum].channelBits &= ~(1 << u8ChannelNum); // Clearing Bit
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	48 2f       	mov	r20, r24
    4666:	50 e0       	ldi	r21, 0x00	; 0
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	28 2f       	mov	r18, r24
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	c9 01       	movw	r24, r18
    4670:	88 0f       	add	r24, r24
    4672:	99 1f       	adc	r25, r25
    4674:	82 0f       	add	r24, r18
    4676:	93 1f       	adc	r25, r19
    4678:	88 0f       	add	r24, r24
    467a:	99 1f       	adc	r25, r25
    467c:	88 0f       	add	r24, r24
    467e:	99 1f       	adc	r25, r25
    4680:	82 0f       	add	r24, r18
    4682:	93 1f       	adc	r25, r19
    4684:	fc 01       	movw	r30, r24
    4686:	e6 50       	subi	r30, 0x06	; 6
    4688:	fe 4f       	sbci	r31, 0xFE	; 254
    468a:	80 81       	ld	r24, Z
    468c:	68 2f       	mov	r22, r24
    468e:	8a 81       	ldd	r24, Y+2	; 0x02
    4690:	28 2f       	mov	r18, r24
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	02 c0       	rjmp	.+4      	; 0x469e <vidChannelOff+0xf2>
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	2a 95       	dec	r18
    46a0:	e2 f7       	brpl	.-8      	; 0x469a <vidChannelOff+0xee>
    46a2:	80 95       	com	r24
    46a4:	86 23       	and	r24, r22
    46a6:	28 2f       	mov	r18, r24
    46a8:	ca 01       	movw	r24, r20
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	84 0f       	add	r24, r20
    46b0:	95 1f       	adc	r25, r21
    46b2:	88 0f       	add	r24, r24
    46b4:	99 1f       	adc	r25, r25
    46b6:	88 0f       	add	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	84 0f       	add	r24, r20
    46bc:	95 1f       	adc	r25, r21
    46be:	fc 01       	movw	r30, r24
    46c0:	e6 50       	subi	r30, 0x06	; 6
    46c2:	fe 4f       	sbci	r31, 0xFE	; 254
    46c4:	20 83       	st	Z, r18
}
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	cf 91       	pop	r28
    46cc:	df 91       	pop	r29
    46ce:	08 95       	ret

000046d0 <vidChannelToggle>:
void vidChannelToggle(u8 u8RoomNum ,u8 u8ChannelNum){
    46d0:	df 93       	push	r29
    46d2:	cf 93       	push	r28
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <vidChannelToggle+0x6>
    46d6:	0f 92       	push	r0
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	8a 83       	std	Y+2, r24	; 0x02
    46de:	6b 83       	std	Y+3, r22	; 0x03
	u8RoomNum--;
    46e0:	8a 81       	ldd	r24, Y+2	; 0x02
    46e2:	81 50       	subi	r24, 0x01	; 1
    46e4:	8a 83       	std	Y+2, r24	; 0x02
	u8ChannelNum--;
    46e6:	8b 81       	ldd	r24, Y+3	; 0x03
    46e8:	81 50       	subi	r24, 0x01	; 1
    46ea:	8b 83       	std	Y+3, r24	; 0x03
	u8 bitVal = (DataKeeper[u8RoomNum].channelBits >> u8ChannelNum) & 1;
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	28 2f       	mov	r18, r24
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	c9 01       	movw	r24, r18
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	82 0f       	add	r24, r18
    46fa:	93 1f       	adc	r25, r19
    46fc:	88 0f       	add	r24, r24
    46fe:	99 1f       	adc	r25, r25
    4700:	88 0f       	add	r24, r24
    4702:	99 1f       	adc	r25, r25
    4704:	82 0f       	add	r24, r18
    4706:	93 1f       	adc	r25, r19
    4708:	fc 01       	movw	r30, r24
    470a:	e6 50       	subi	r30, 0x06	; 6
    470c:	fe 4f       	sbci	r31, 0xFE	; 254
    470e:	80 81       	ld	r24, Z
    4710:	28 2f       	mov	r18, r24
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	8b 81       	ldd	r24, Y+3	; 0x03
    4716:	88 2f       	mov	r24, r24
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	a9 01       	movw	r20, r18
    471c:	02 c0       	rjmp	.+4      	; 0x4722 <vidChannelToggle+0x52>
    471e:	55 95       	asr	r21
    4720:	47 95       	ror	r20
    4722:	8a 95       	dec	r24
    4724:	e2 f7       	brpl	.-8      	; 0x471e <vidChannelToggle+0x4e>
    4726:	ca 01       	movw	r24, r20
    4728:	81 70       	andi	r24, 0x01	; 1
    472a:	89 83       	std	Y+1, r24	; 0x01
	if(bitVal == ON){
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	81 30       	cpi	r24, 0x01	; 1
    4730:	59 f4       	brne	.+22     	; 0x4748 <vidChannelToggle+0x78>
		vidChannelOff(u8RoomNum+1 ,u8ChannelNum+1);
    4732:	8a 81       	ldd	r24, Y+2	; 0x02
    4734:	28 2f       	mov	r18, r24
    4736:	2f 5f       	subi	r18, 0xFF	; 255
    4738:	8b 81       	ldd	r24, Y+3	; 0x03
    473a:	98 2f       	mov	r25, r24
    473c:	9f 5f       	subi	r25, 0xFF	; 255
    473e:	82 2f       	mov	r24, r18
    4740:	69 2f       	mov	r22, r25
    4742:	0e 94 d6 22 	call	0x45ac	; 0x45ac <vidChannelOff>
    4746:	0d c0       	rjmp	.+26     	; 0x4762 <vidChannelToggle+0x92>
	}else if(bitVal== OFF){
    4748:	89 81       	ldd	r24, Y+1	; 0x01
    474a:	88 23       	and	r24, r24
    474c:	51 f4       	brne	.+20     	; 0x4762 <vidChannelToggle+0x92>
		vidChannelOn(u8RoomNum+1 ,u8ChannelNum+1);
    474e:	8a 81       	ldd	r24, Y+2	; 0x02
    4750:	28 2f       	mov	r18, r24
    4752:	2f 5f       	subi	r18, 0xFF	; 255
    4754:	8b 81       	ldd	r24, Y+3	; 0x03
    4756:	98 2f       	mov	r25, r24
    4758:	9f 5f       	subi	r25, 0xFF	; 255
    475a:	82 2f       	mov	r24, r18
    475c:	69 2f       	mov	r22, r25
    475e:	0e 94 45 22 	call	0x448a	; 0x448a <vidChannelOn>
	}

}
    4762:	0f 90       	pop	r0
    4764:	0f 90       	pop	r0
    4766:	0f 90       	pop	r0
    4768:	cf 91       	pop	r28
    476a:	df 91       	pop	r29
    476c:	08 95       	ret

0000476e <Rooms_Init>:
#include "../../LIB/PrimitiveTypes.h"
#include "DataKeeper.h"

RoomData DataKeeper[16];

void Rooms_Init(RoomData *data, u8 size){
    476e:	df 93       	push	r29
    4770:	cf 93       	push	r28
    4772:	00 d0       	rcall	.+0      	; 0x4774 <Rooms_Init+0x6>
    4774:	00 d0       	rcall	.+0      	; 0x4776 <Rooms_Init+0x8>
    4776:	0f 92       	push	r0
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	9c 83       	std	Y+4, r25	; 0x04
    477e:	8b 83       	std	Y+3, r24	; 0x03
    4780:	6d 83       	std	Y+5, r22	; 0x05
    for(u8 i=0; i<size; i++){
    4782:	1a 82       	std	Y+2, r1	; 0x02
    4784:	6f c0       	rjmp	.+222    	; 0x4864 <Rooms_Init+0xf6>
        data[i].channelBits = 0;
    4786:	8a 81       	ldd	r24, Y+2	; 0x02
    4788:	28 2f       	mov	r18, r24
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	c9 01       	movw	r24, r18
    478e:	88 0f       	add	r24, r24
    4790:	99 1f       	adc	r25, r25
    4792:	82 0f       	add	r24, r18
    4794:	93 1f       	adc	r25, r19
    4796:	88 0f       	add	r24, r24
    4798:	99 1f       	adc	r25, r25
    479a:	88 0f       	add	r24, r24
    479c:	99 1f       	adc	r25, r25
    479e:	28 0f       	add	r18, r24
    47a0:	39 1f       	adc	r19, r25
    47a2:	8b 81       	ldd	r24, Y+3	; 0x03
    47a4:	9c 81       	ldd	r25, Y+4	; 0x04
    47a6:	fc 01       	movw	r30, r24
    47a8:	e2 0f       	add	r30, r18
    47aa:	f3 1f       	adc	r31, r19
    47ac:	10 82       	st	Z, r1
        for(u8 j=0; j<4; j++){
    47ae:	19 82       	std	Y+1, r1	; 0x01
    47b0:	1d c0       	rjmp	.+58     	; 0x47ec <Rooms_Init+0x7e>
            data[i].sensors[j] = 0;  // مثلاً -1 يعني "غير مستخدم"
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	28 2f       	mov	r18, r24
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	c9 01       	movw	r24, r18
    47ba:	88 0f       	add	r24, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	82 0f       	add	r24, r18
    47c0:	93 1f       	adc	r25, r19
    47c2:	88 0f       	add	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	28 0f       	add	r18, r24
    47cc:	39 1f       	adc	r19, r25
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	28 0f       	add	r18, r24
    47d4:	39 1f       	adc	r19, r25
    47d6:	89 81       	ldd	r24, Y+1	; 0x01
    47d8:	88 2f       	mov	r24, r24
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	82 0f       	add	r24, r18
    47de:	93 1f       	adc	r25, r19
    47e0:	fc 01       	movw	r30, r24
    47e2:	31 96       	adiw	r30, 0x01	; 1
    47e4:	10 82       	st	Z, r1
RoomData DataKeeper[16];

void Rooms_Init(RoomData *data, u8 size){
    for(u8 i=0; i<size; i++){
        data[i].channelBits = 0;
        for(u8 j=0; j<4; j++){
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	8f 5f       	subi	r24, 0xFF	; 255
    47ea:	89 83       	std	Y+1, r24	; 0x01
    47ec:	89 81       	ldd	r24, Y+1	; 0x01
    47ee:	84 30       	cpi	r24, 0x04	; 4
    47f0:	00 f3       	brcs	.-64     	; 0x47b2 <Rooms_Init+0x44>
            data[i].sensors[j] = 0;  // مثلاً -1 يعني "غير مستخدم"
        }
        data[i].servoAngleA = 0;
    47f2:	8a 81       	ldd	r24, Y+2	; 0x02
    47f4:	28 2f       	mov	r18, r24
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	c9 01       	movw	r24, r18
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	82 0f       	add	r24, r18
    4800:	93 1f       	adc	r25, r19
    4802:	88 0f       	add	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	88 0f       	add	r24, r24
    4808:	99 1f       	adc	r25, r25
    480a:	28 0f       	add	r18, r24
    480c:	39 1f       	adc	r19, r25
    480e:	8b 81       	ldd	r24, Y+3	; 0x03
    4810:	9c 81       	ldd	r25, Y+4	; 0x04
    4812:	fc 01       	movw	r30, r24
    4814:	e2 0f       	add	r30, r18
    4816:	f3 1f       	adc	r31, r19
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	a0 e0       	ldi	r26, 0x00	; 0
    481e:	b0 e0       	ldi	r27, 0x00	; 0
    4820:	85 83       	std	Z+5, r24	; 0x05
    4822:	96 83       	std	Z+6, r25	; 0x06
    4824:	a7 83       	std	Z+7, r26	; 0x07
    4826:	b0 87       	std	Z+8, r27	; 0x08
        data[i].servoAngleB = 0;
    4828:	8a 81       	ldd	r24, Y+2	; 0x02
    482a:	28 2f       	mov	r18, r24
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	c9 01       	movw	r24, r18
    4830:	88 0f       	add	r24, r24
    4832:	99 1f       	adc	r25, r25
    4834:	82 0f       	add	r24, r18
    4836:	93 1f       	adc	r25, r19
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	88 0f       	add	r24, r24
    483e:	99 1f       	adc	r25, r25
    4840:	28 0f       	add	r18, r24
    4842:	39 1f       	adc	r19, r25
    4844:	8b 81       	ldd	r24, Y+3	; 0x03
    4846:	9c 81       	ldd	r25, Y+4	; 0x04
    4848:	fc 01       	movw	r30, r24
    484a:	e2 0f       	add	r30, r18
    484c:	f3 1f       	adc	r31, r19
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	a0 e0       	ldi	r26, 0x00	; 0
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	81 87       	std	Z+9, r24	; 0x09
    4858:	92 87       	std	Z+10, r25	; 0x0a
    485a:	a3 87       	std	Z+11, r26	; 0x0b
    485c:	b4 87       	std	Z+12, r27	; 0x0c
#include "DataKeeper.h"

RoomData DataKeeper[16];

void Rooms_Init(RoomData *data, u8 size){
    for(u8 i=0; i<size; i++){
    485e:	8a 81       	ldd	r24, Y+2	; 0x02
    4860:	8f 5f       	subi	r24, 0xFF	; 255
    4862:	8a 83       	std	Y+2, r24	; 0x02
    4864:	9a 81       	ldd	r25, Y+2	; 0x02
    4866:	8d 81       	ldd	r24, Y+5	; 0x05
    4868:	98 17       	cp	r25, r24
    486a:	08 f4       	brcc	.+2      	; 0x486e <Rooms_Init+0x100>
    486c:	8c cf       	rjmp	.-232    	; 0x4786 <Rooms_Init+0x18>
            data[i].sensors[j] = 0;  // مثلاً -1 يعني "غير مستخدم"
        }
        data[i].servoAngleA = 0;
        data[i].servoAngleB = 0;
    }
}
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	0f 90       	pop	r0
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	cf 91       	pop	r28
    487a:	df 91       	pop	r29
    487c:	08 95       	ret

0000487e <byteToBinaryStr>:

char ReceiveBuffer[15];
int roomIndex=0;
char Response[30];

void byteToBinaryStr(uint8_t val, char *str) {
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	28 97       	sbiw	r28, 0x08	; 8
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	f8 94       	cli
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	cd bf       	out	0x3d, r28	; 61
    4892:	8b 83       	std	Y+3, r24	; 0x03
    4894:	7d 83       	std	Y+5, r23	; 0x05
    4896:	6c 83       	std	Y+4, r22	; 0x04
    for (int i = 7; i >= 0; i--) {
    4898:	87 e0       	ldi	r24, 0x07	; 7
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	9a 83       	std	Y+2, r25	; 0x02
    489e:	89 83       	std	Y+1, r24	; 0x01
    48a0:	2b c0       	rjmp	.+86     	; 0x48f8 <byteToBinaryStr+0x7a>
        str[7 - i] = (val & (1 << i)) ? '1' : '0';
    48a2:	27 e0       	ldi	r18, 0x07	; 7
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	89 81       	ldd	r24, Y+1	; 0x01
    48a8:	9a 81       	ldd	r25, Y+2	; 0x02
    48aa:	a9 01       	movw	r20, r18
    48ac:	48 1b       	sub	r20, r24
    48ae:	59 0b       	sbc	r21, r25
    48b0:	ca 01       	movw	r24, r20
    48b2:	9c 01       	movw	r18, r24
    48b4:	8c 81       	ldd	r24, Y+4	; 0x04
    48b6:	9d 81       	ldd	r25, Y+5	; 0x05
    48b8:	fc 01       	movw	r30, r24
    48ba:	e2 0f       	add	r30, r18
    48bc:	f3 1f       	adc	r31, r19
    48be:	f8 87       	std	Y+8, r31	; 0x08
    48c0:	ef 83       	std	Y+7, r30	; 0x07
    48c2:	8b 81       	ldd	r24, Y+3	; 0x03
    48c4:	88 2f       	mov	r24, r24
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	09 80       	ldd	r0, Y+1	; 0x01
    48ca:	02 c0       	rjmp	.+4      	; 0x48d0 <byteToBinaryStr+0x52>
    48cc:	95 95       	asr	r25
    48ce:	87 95       	ror	r24
    48d0:	0a 94       	dec	r0
    48d2:	e2 f7       	brpl	.-8      	; 0x48cc <byteToBinaryStr+0x4e>
    48d4:	81 70       	andi	r24, 0x01	; 1
    48d6:	90 70       	andi	r25, 0x00	; 0
    48d8:	88 23       	and	r24, r24
    48da:	19 f0       	breq	.+6      	; 0x48e2 <byteToBinaryStr+0x64>
    48dc:	f1 e3       	ldi	r31, 0x31	; 49
    48de:	fe 83       	std	Y+6, r31	; 0x06
    48e0:	02 c0       	rjmp	.+4      	; 0x48e6 <byteToBinaryStr+0x68>
    48e2:	40 e3       	ldi	r20, 0x30	; 48
    48e4:	4e 83       	std	Y+6, r20	; 0x06
    48e6:	4e 81       	ldd	r20, Y+6	; 0x06
    48e8:	ef 81       	ldd	r30, Y+7	; 0x07
    48ea:	f8 85       	ldd	r31, Y+8	; 0x08
    48ec:	40 83       	st	Z, r20
char ReceiveBuffer[15];
int roomIndex=0;
char Response[30];

void byteToBinaryStr(uint8_t val, char *str) {
    for (int i = 7; i >= 0; i--) {
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	9a 81       	ldd	r25, Y+2	; 0x02
    48f2:	01 97       	sbiw	r24, 0x01	; 1
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	89 83       	std	Y+1, r24	; 0x01
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	99 23       	and	r25, r25
    48fe:	8c f6       	brge	.-94     	; 0x48a2 <byteToBinaryStr+0x24>
        str[7 - i] = (val & (1 << i)) ? '1' : '0';
    }
    str[8] = '\0';
    4900:	8c 81       	ldd	r24, Y+4	; 0x04
    4902:	9d 81       	ldd	r25, Y+5	; 0x05
    4904:	fc 01       	movw	r30, r24
    4906:	38 96       	adiw	r30, 0x08	; 8
    4908:	10 82       	st	Z, r1
}
    490a:	28 96       	adiw	r28, 0x08	; 8
    490c:	0f b6       	in	r0, 0x3f	; 63
    490e:	f8 94       	cli
    4910:	de bf       	out	0x3e, r29	; 62
    4912:	0f be       	out	0x3f, r0	; 63
    4914:	cd bf       	out	0x3d, r28	; 61
    4916:	cf 91       	pop	r28
    4918:	df 91       	pop	r29
    491a:	08 95       	ret

0000491c <parseUPT>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// parseUPT Function ////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

int parseUPT(const char *str) {
    491c:	df 93       	push	r29
    491e:	cf 93       	push	r28
    4920:	00 d0       	rcall	.+0      	; 0x4922 <parseUPT+0x6>
    4922:	00 d0       	rcall	.+0      	; 0x4924 <parseUPT+0x8>
    4924:	00 d0       	rcall	.+0      	; 0x4926 <parseUPT+0xa>
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	9c 83       	std	Y+4, r25	; 0x04
    492c:	8b 83       	std	Y+3, r24	; 0x03
    if (str == NULL) return -1;
    492e:	8b 81       	ldd	r24, Y+3	; 0x03
    4930:	9c 81       	ldd	r25, Y+4	; 0x04
    4932:	00 97       	sbiw	r24, 0x00	; 0
    4934:	29 f4       	brne	.+10     	; 0x4940 <parseUPT+0x24>
    4936:	8f ef       	ldi	r24, 0xFF	; 255
    4938:	9f ef       	ldi	r25, 0xFF	; 255
    493a:	9e 83       	std	Y+6, r25	; 0x06
    493c:	8d 83       	std	Y+5, r24	; 0x05
    493e:	2a c0       	rjmp	.+84     	; 0x4994 <parseUPT+0x78>
    if (strncmp(str, "UPT", 3) != 0) return -1;
    4940:	8b 81       	ldd	r24, Y+3	; 0x03
    4942:	9c 81       	ldd	r25, Y+4	; 0x04
    4944:	20 e6       	ldi	r18, 0x60	; 96
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	b9 01       	movw	r22, r18
    494a:	43 e0       	ldi	r20, 0x03	; 3
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	29 f0       	breq	.+10     	; 0x4960 <parseUPT+0x44>
    4956:	8f ef       	ldi	r24, 0xFF	; 255
    4958:	9f ef       	ldi	r25, 0xFF	; 255
    495a:	9e 83       	std	Y+6, r25	; 0x06
    495c:	8d 83       	std	Y+5, r24	; 0x05
    495e:	1a c0       	rjmp	.+52     	; 0x4994 <parseUPT+0x78>

    int room = atoi(str + 3);
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	03 96       	adiw	r24, 0x03	; 3
    4966:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    496a:	9a 83       	std	Y+2, r25	; 0x02
    496c:	89 83       	std	Y+1, r24	; 0x01
    if (room < 1 || room > 16) return -1;
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	9a 81       	ldd	r25, Y+2	; 0x02
    4972:	18 16       	cp	r1, r24
    4974:	19 06       	cpc	r1, r25
    4976:	2c f4       	brge	.+10     	; 0x4982 <parseUPT+0x66>
    4978:	89 81       	ldd	r24, Y+1	; 0x01
    497a:	9a 81       	ldd	r25, Y+2	; 0x02
    497c:	81 31       	cpi	r24, 0x11	; 17
    497e:	91 05       	cpc	r25, r1
    4980:	2c f0       	brlt	.+10     	; 0x498c <parseUPT+0x70>
    4982:	8f ef       	ldi	r24, 0xFF	; 255
    4984:	9f ef       	ldi	r25, 0xFF	; 255
    4986:	9e 83       	std	Y+6, r25	; 0x06
    4988:	8d 83       	std	Y+5, r24	; 0x05
    498a:	04 c0       	rjmp	.+8      	; 0x4994 <parseUPT+0x78>

    return room;
    498c:	89 81       	ldd	r24, Y+1	; 0x01
    498e:	9a 81       	ldd	r25, Y+2	; 0x02
    4990:	9e 83       	std	Y+6, r25	; 0x06
    4992:	8d 83       	std	Y+5, r24	; 0x05
    4994:	8d 81       	ldd	r24, Y+5	; 0x05
    4996:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4998:	26 96       	adiw	r28, 0x06	; 6
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	f8 94       	cli
    499e:	de bf       	out	0x3e, r29	; 62
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	cd bf       	out	0x3d, r28	; 61
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	08 95       	ret

000049aa <parseSEN>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// parseSEN Function ////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

int parseSEN(const char *str) {
    49aa:	df 93       	push	r29
    49ac:	cf 93       	push	r28
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <parseSEN+0x6>
    49b0:	00 d0       	rcall	.+0      	; 0x49b2 <parseSEN+0x8>
    49b2:	00 d0       	rcall	.+0      	; 0x49b4 <parseSEN+0xa>
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	9c 83       	std	Y+4, r25	; 0x04
    49ba:	8b 83       	std	Y+3, r24	; 0x03
    if (str == NULL) return -1;
    49bc:	8b 81       	ldd	r24, Y+3	; 0x03
    49be:	9c 81       	ldd	r25, Y+4	; 0x04
    49c0:	00 97       	sbiw	r24, 0x00	; 0
    49c2:	29 f4       	brne	.+10     	; 0x49ce <parseSEN+0x24>
    49c4:	8f ef       	ldi	r24, 0xFF	; 255
    49c6:	9f ef       	ldi	r25, 0xFF	; 255
    49c8:	9e 83       	std	Y+6, r25	; 0x06
    49ca:	8d 83       	std	Y+5, r24	; 0x05
    49cc:	2a c0       	rjmp	.+84     	; 0x4a22 <parseSEN+0x78>
    if (strncmp(str, "SEN", 3) != 0) return -1;
    49ce:	8b 81       	ldd	r24, Y+3	; 0x03
    49d0:	9c 81       	ldd	r25, Y+4	; 0x04
    49d2:	24 e6       	ldi	r18, 0x64	; 100
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	b9 01       	movw	r22, r18
    49d8:	43 e0       	ldi	r20, 0x03	; 3
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	29 f0       	breq	.+10     	; 0x49ee <parseSEN+0x44>
    49e4:	8f ef       	ldi	r24, 0xFF	; 255
    49e6:	9f ef       	ldi	r25, 0xFF	; 255
    49e8:	9e 83       	std	Y+6, r25	; 0x06
    49ea:	8d 83       	std	Y+5, r24	; 0x05
    49ec:	1a c0       	rjmp	.+52     	; 0x4a22 <parseSEN+0x78>

    int room = atoi(str + 3);
    49ee:	8b 81       	ldd	r24, Y+3	; 0x03
    49f0:	9c 81       	ldd	r25, Y+4	; 0x04
    49f2:	03 96       	adiw	r24, 0x03	; 3
    49f4:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    49f8:	9a 83       	std	Y+2, r25	; 0x02
    49fa:	89 83       	std	Y+1, r24	; 0x01
    if (room < 1 || room > 16) return -1;
    49fc:	89 81       	ldd	r24, Y+1	; 0x01
    49fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4a00:	18 16       	cp	r1, r24
    4a02:	19 06       	cpc	r1, r25
    4a04:	2c f4       	brge	.+10     	; 0x4a10 <parseSEN+0x66>
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	9a 81       	ldd	r25, Y+2	; 0x02
    4a0a:	81 31       	cpi	r24, 0x11	; 17
    4a0c:	91 05       	cpc	r25, r1
    4a0e:	2c f0       	brlt	.+10     	; 0x4a1a <parseSEN+0x70>
    4a10:	8f ef       	ldi	r24, 0xFF	; 255
    4a12:	9f ef       	ldi	r25, 0xFF	; 255
    4a14:	9e 83       	std	Y+6, r25	; 0x06
    4a16:	8d 83       	std	Y+5, r24	; 0x05
    4a18:	04 c0       	rjmp	.+8      	; 0x4a22 <parseSEN+0x78>

    return room;
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
    4a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a1e:	9e 83       	std	Y+6, r25	; 0x06
    4a20:	8d 83       	std	Y+5, r24	; 0x05
    4a22:	8d 81       	ldd	r24, Y+5	; 0x05
    4a24:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4a26:	26 96       	adiw	r28, 0x06	; 6
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	de bf       	out	0x3e, r29	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	cd bf       	out	0x3d, r28	; 61
    4a32:	cf 91       	pop	r28
    4a34:	df 91       	pop	r29
    4a36:	08 95       	ret

00004a38 <parseTOG>:
typedef struct {
    int room;
    int channel;
} TOG_Info;

TOG_Info parseTOG(const char *str) {
    4a38:	df 93       	push	r29
    4a3a:	cf 93       	push	r28
    4a3c:	cd b7       	in	r28, 0x3d	; 61
    4a3e:	de b7       	in	r29, 0x3e	; 62
    4a40:	2f 97       	sbiw	r28, 0x0f	; 15
    4a42:	0f b6       	in	r0, 0x3f	; 63
    4a44:	f8 94       	cli
    4a46:	de bf       	out	0x3e, r29	; 62
    4a48:	0f be       	out	0x3f, r0	; 63
    4a4a:	cd bf       	out	0x3d, r28	; 61
    4a4c:	9b 87       	std	Y+11, r25	; 0x0b
    4a4e:	8a 87       	std	Y+10, r24	; 0x0a
    TOG_Info info;
    char roomStr[3];
    char chStr[2];

    if (strncmp(str, "TOG", 3) != 0) {
    4a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a52:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a54:	28 e6       	ldi	r18, 0x68	; 104
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	b9 01       	movw	r22, r18
    4a5a:	43 e0       	ldi	r20, 0x03	; 3
    4a5c:	50 e0       	ldi	r21, 0x00	; 0
    4a5e:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    4a62:	00 97       	sbiw	r24, 0x00	; 0
    4a64:	89 f0       	breq	.+34     	; 0x4a88 <parseTOG+0x50>

        info.room = -1;
    4a66:	8f ef       	ldi	r24, 0xFF	; 255
    4a68:	9f ef       	ldi	r25, 0xFF	; 255
    4a6a:	9a 83       	std	Y+2, r25	; 0x02
    4a6c:	89 83       	std	Y+1, r24	; 0x01
        info.channel = -1;
    4a6e:	8f ef       	ldi	r24, 0xFF	; 255
    4a70:	9f ef       	ldi	r25, 0xFF	; 255
    4a72:	9c 83       	std	Y+4, r25	; 0x04
    4a74:	8b 83       	std	Y+3, r24	; 0x03
        return info;
    4a76:	89 81       	ldd	r24, Y+1	; 0x01
    4a78:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    4a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    4a7e:	8c 87       	std	Y+12, r24	; 0x0c
    4a80:	9d 87       	std	Y+13, r25	; 0x0d
    4a82:	ae 87       	std	Y+14, r26	; 0x0e
    4a84:	bf 87       	std	Y+15, r27	; 0x0f
    4a86:	2e c0       	rjmp	.+92     	; 0x4ae4 <parseTOG+0xac>
    }

    strncpy(roomStr, str + 3, 2);
    4a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a8c:	9c 01       	movw	r18, r24
    4a8e:	2d 5f       	subi	r18, 0xFD	; 253
    4a90:	3f 4f       	sbci	r19, 0xFF	; 255
    4a92:	ce 01       	movw	r24, r28
    4a94:	05 96       	adiw	r24, 0x05	; 5
    4a96:	b9 01       	movw	r22, r18
    4a98:	42 e0       	ldi	r20, 0x02	; 2
    4a9a:	50 e0       	ldi	r21, 0x00	; 0
    4a9c:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <strncpy>
    roomStr[2] = '\0';
    4aa0:	1f 82       	std	Y+7, r1	; 0x07

    strncpy(chStr, str + 5, 1);
    4aa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aa4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4aa6:	9c 01       	movw	r18, r24
    4aa8:	2b 5f       	subi	r18, 0xFB	; 251
    4aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4aac:	ce 01       	movw	r24, r28
    4aae:	08 96       	adiw	r24, 0x08	; 8
    4ab0:	b9 01       	movw	r22, r18
    4ab2:	41 e0       	ldi	r20, 0x01	; 1
    4ab4:	50 e0       	ldi	r21, 0x00	; 0
    4ab6:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <strncpy>
    chStr[1] = '\0';
    4aba:	19 86       	std	Y+9, r1	; 0x09

    info.room = atoi(roomStr);
    4abc:	ce 01       	movw	r24, r28
    4abe:	05 96       	adiw	r24, 0x05	; 5
    4ac0:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    4ac4:	9a 83       	std	Y+2, r25	; 0x02
    4ac6:	89 83       	std	Y+1, r24	; 0x01
    info.channel = atoi(chStr);
    4ac8:	ce 01       	movw	r24, r28
    4aca:	08 96       	adiw	r24, 0x08	; 8
    4acc:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    4ad0:	9c 83       	std	Y+4, r25	; 0x04
    4ad2:	8b 83       	std	Y+3, r24	; 0x03

    return info;
    4ad4:	89 81       	ldd	r24, Y+1	; 0x01
    4ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad8:	ab 81       	ldd	r26, Y+3	; 0x03
    4ada:	bc 81       	ldd	r27, Y+4	; 0x04
    4adc:	8c 87       	std	Y+12, r24	; 0x0c
    4ade:	9d 87       	std	Y+13, r25	; 0x0d
    4ae0:	ae 87       	std	Y+14, r26	; 0x0e
    4ae2:	bf 87       	std	Y+15, r27	; 0x0f
    4ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ae8:	ae 85       	ldd	r26, Y+14	; 0x0e
    4aea:	bf 85       	ldd	r27, Y+15	; 0x0f
}
    4aec:	bc 01       	movw	r22, r24
    4aee:	cd 01       	movw	r24, r26
    4af0:	2f 96       	adiw	r28, 0x0f	; 15
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
    4afc:	cf 91       	pop	r28
    4afe:	df 91       	pop	r29
    4b00:	08 95       	ret

00004b02 <parseSER>:
    int room;
    int channel;
    int value;
} SER_Info;

SER_Info parseSER(const char *str) {
    4b02:	af 92       	push	r10
    4b04:	bf 92       	push	r11
    4b06:	cf 92       	push	r12
    4b08:	df 92       	push	r13
    4b0a:	ef 92       	push	r14
    4b0c:	ff 92       	push	r15
    4b0e:	0f 93       	push	r16
    4b10:	1f 93       	push	r17
    4b12:	df 93       	push	r29
    4b14:	cf 93       	push	r28
    4b16:	cd b7       	in	r28, 0x3d	; 61
    4b18:	de b7       	in	r29, 0x3e	; 62
    4b1a:	aa 97       	sbiw	r28, 0x2a	; 42
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	98 8f       	std	Y+24, r25	; 0x18
    4b28:	8f 8b       	std	Y+23, r24	; 0x17
    char roomStr[3];
    char chStr[2];
    char signStr[2];
    char valStr[3];

    if (strncmp(str, "SER", 3) != 0) {
    4b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b2e:	2c e6       	ldi	r18, 0x6C	; 108
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	b9 01       	movw	r22, r18
    4b34:	43 e0       	ldi	r20, 0x03	; 3
    4b36:	50 e0       	ldi	r21, 0x00	; 0
    4b38:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    4b3c:	00 97       	sbiw	r24, 0x00	; 0
    4b3e:	59 f1       	breq	.+86     	; 0x4b96 <parseSER+0x94>
        info.room = -1;
    4b40:	8f ef       	ldi	r24, 0xFF	; 255
    4b42:	9f ef       	ldi	r25, 0xFF	; 255
    4b44:	98 87       	std	Y+8, r25	; 0x08
    4b46:	8f 83       	std	Y+7, r24	; 0x07
        info.channel = -1;
    4b48:	8f ef       	ldi	r24, 0xFF	; 255
    4b4a:	9f ef       	ldi	r25, 0xFF	; 255
    4b4c:	9a 87       	std	Y+10, r25	; 0x0a
    4b4e:	89 87       	std	Y+9, r24	; 0x09
        info.value = 0;
    4b50:	1c 86       	std	Y+12, r1	; 0x0c
    4b52:	1b 86       	std	Y+11, r1	; 0x0b
        return info;
    4b54:	ce 01       	movw	r24, r28
    4b56:	01 96       	adiw	r24, 0x01	; 1
    4b58:	9a 8f       	std	Y+26, r25	; 0x1a
    4b5a:	89 8f       	std	Y+25, r24	; 0x19
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	37 96       	adiw	r30, 0x07	; 7
    4b60:	fc 8f       	std	Y+28, r31	; 0x1c
    4b62:	eb 8f       	std	Y+27, r30	; 0x1b
    4b64:	f6 e0       	ldi	r31, 0x06	; 6
    4b66:	fd 8f       	std	Y+29, r31	; 0x1d
    4b68:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4b6a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    4b6c:	00 80       	ld	r0, Z
    4b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b72:	01 96       	adiw	r24, 0x01	; 1
    4b74:	9c 8f       	std	Y+28, r25	; 0x1c
    4b76:	8b 8f       	std	Y+27, r24	; 0x1b
    4b78:	e9 8d       	ldd	r30, Y+25	; 0x19
    4b7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4b7c:	00 82       	st	Z, r0
    4b7e:	89 8d       	ldd	r24, Y+25	; 0x19
    4b80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b82:	01 96       	adiw	r24, 0x01	; 1
    4b84:	9a 8f       	std	Y+26, r25	; 0x1a
    4b86:	89 8f       	std	Y+25, r24	; 0x19
    4b88:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b8a:	91 50       	subi	r25, 0x01	; 1
    4b8c:	9d 8f       	std	Y+29, r25	; 0x1d
    4b8e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4b90:	ee 23       	and	r30, r30
    4b92:	51 f7       	brne	.-44     	; 0x4b68 <parseSER+0x66>
    4b94:	74 c0       	rjmp	.+232    	; 0x4c7e <parseSER+0x17c>
    }

    // Room → اول رقمين بعد "SER"
    strncpy(roomStr, str + 3, 2);
    4b96:	8f 89       	ldd	r24, Y+23	; 0x17
    4b98:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9a:	9c 01       	movw	r18, r24
    4b9c:	2d 5f       	subi	r18, 0xFD	; 253
    4b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba0:	ce 01       	movw	r24, r28
    4ba2:	0d 96       	adiw	r24, 0x0d	; 13
    4ba4:	b9 01       	movw	r22, r18
    4ba6:	42 e0       	ldi	r20, 0x02	; 2
    4ba8:	50 e0       	ldi	r21, 0x00	; 0
    4baa:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <strncpy>
    roomStr[2] = '\0';
    4bae:	1f 86       	std	Y+15, r1	; 0x0f

    // Channel → الرقم التالت بعد "SER"
    strncpy(chStr, str + 5, 1);
    4bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    4bb4:	9c 01       	movw	r18, r24
    4bb6:	2b 5f       	subi	r18, 0xFB	; 251
    4bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bba:	ce 01       	movw	r24, r28
    4bbc:	40 96       	adiw	r24, 0x10	; 16
    4bbe:	b9 01       	movw	r22, r18
    4bc0:	41 e0       	ldi	r20, 0x01	; 1
    4bc2:	50 e0       	ldi	r21, 0x00	; 0
    4bc4:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <strncpy>
    chStr[1] = '\0';
    4bc8:	19 8a       	std	Y+17, r1	; 0x11

    // Sign → الرقم الرابع بعد "SER" (0=positive, 1=negative)
    strncpy(signStr, str + 6, 1);
    4bca:	8f 89       	ldd	r24, Y+23	; 0x17
    4bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bce:	9c 01       	movw	r18, r24
    4bd0:	2a 5f       	subi	r18, 0xFA	; 250
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	ce 01       	movw	r24, r28
    4bd6:	42 96       	adiw	r24, 0x12	; 18
    4bd8:	b9 01       	movw	r22, r18
    4bda:	41 e0       	ldi	r20, 0x01	; 1
    4bdc:	50 e0       	ldi	r21, 0x00	; 0
    4bde:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <strncpy>
    signStr[1] = '\0';
    4be2:	1b 8a       	std	Y+19, r1	; 0x13

    // آخر رقمين → القيمة
    strncpy(valStr, str + 7, 2);
    4be4:	8f 89       	ldd	r24, Y+23	; 0x17
    4be6:	98 8d       	ldd	r25, Y+24	; 0x18
    4be8:	9c 01       	movw	r18, r24
    4bea:	29 5f       	subi	r18, 0xF9	; 249
    4bec:	3f 4f       	sbci	r19, 0xFF	; 255
    4bee:	ce 01       	movw	r24, r28
    4bf0:	44 96       	adiw	r24, 0x14	; 20
    4bf2:	b9 01       	movw	r22, r18
    4bf4:	42 e0       	ldi	r20, 0x02	; 2
    4bf6:	50 e0       	ldi	r21, 0x00	; 0
    4bf8:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <strncpy>
    valStr[2] = '\0';
    4bfc:	1e 8a       	std	Y+22, r1	; 0x16

    info.room = atoi(roomStr);
    4bfe:	ce 01       	movw	r24, r28
    4c00:	0d 96       	adiw	r24, 0x0d	; 13
    4c02:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    4c06:	98 87       	std	Y+8, r25	; 0x08
    4c08:	8f 83       	std	Y+7, r24	; 0x07
    info.channel = atoi(chStr);
    4c0a:	ce 01       	movw	r24, r28
    4c0c:	40 96       	adiw	r24, 0x10	; 16
    4c0e:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    4c12:	9a 87       	std	Y+10, r25	; 0x0a
    4c14:	89 87       	std	Y+9, r24	; 0x09
    info.value = atoi(valStr);
    4c16:	ce 01       	movw	r24, r28
    4c18:	44 96       	adiw	r24, 0x14	; 20
    4c1a:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    4c1e:	9c 87       	std	Y+12, r25	; 0x0c
    4c20:	8b 87       	std	Y+11, r24	; 0x0b

    // طبق الإشارة (sign)
    if (atoi(signStr) == 1) {
    4c22:	ce 01       	movw	r24, r28
    4c24:	42 96       	adiw	r24, 0x12	; 18
    4c26:	0e 94 3f 29 	call	0x527e	; 0x527e <atoi>
    4c2a:	81 30       	cpi	r24, 0x01	; 1
    4c2c:	91 05       	cpc	r25, r1
    4c2e:	39 f4       	brne	.+14     	; 0x4c3e <parseSER+0x13c>
        info.value = -info.value;
    4c30:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c32:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c34:	90 95       	com	r25
    4c36:	81 95       	neg	r24
    4c38:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3a:	9c 87       	std	Y+12, r25	; 0x0c
    4c3c:	8b 87       	std	Y+11, r24	; 0x0b
    }

    return info;
    4c3e:	ce 01       	movw	r24, r28
    4c40:	01 96       	adiw	r24, 0x01	; 1
    4c42:	9f 8f       	std	Y+31, r25	; 0x1f
    4c44:	8e 8f       	std	Y+30, r24	; 0x1e
    4c46:	fe 01       	movw	r30, r28
    4c48:	37 96       	adiw	r30, 0x07	; 7
    4c4a:	f9 a3       	std	Y+33, r31	; 0x21
    4c4c:	e8 a3       	std	Y+32, r30	; 0x20
    4c4e:	f6 e0       	ldi	r31, 0x06	; 6
    4c50:	fa a3       	std	Y+34, r31	; 0x22
    4c52:	e8 a1       	ldd	r30, Y+32	; 0x20
    4c54:	f9 a1       	ldd	r31, Y+33	; 0x21
    4c56:	00 80       	ld	r0, Z
    4c58:	88 a1       	ldd	r24, Y+32	; 0x20
    4c5a:	99 a1       	ldd	r25, Y+33	; 0x21
    4c5c:	01 96       	adiw	r24, 0x01	; 1
    4c5e:	99 a3       	std	Y+33, r25	; 0x21
    4c60:	88 a3       	std	Y+32, r24	; 0x20
    4c62:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4c64:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4c66:	00 82       	st	Z, r0
    4c68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c6c:	01 96       	adiw	r24, 0x01	; 1
    4c6e:	9f 8f       	std	Y+31, r25	; 0x1f
    4c70:	8e 8f       	std	Y+30, r24	; 0x1e
    4c72:	9a a1       	ldd	r25, Y+34	; 0x22
    4c74:	91 50       	subi	r25, 0x01	; 1
    4c76:	9a a3       	std	Y+34, r25	; 0x22
    4c78:	ea a1       	ldd	r30, Y+34	; 0x22
    4c7a:	ee 23       	and	r30, r30
    4c7c:	51 f7       	brne	.-44     	; 0x4c52 <parseSER+0x150>
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	99 81       	ldd	r25, Y+1	; 0x01
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	2a 81       	ldd	r18, Y+2	; 0x02
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	3b 81       	ldd	r19, Y+3	; 0x03
    4c8a:	40 e0       	ldi	r20, 0x00	; 0
    4c8c:	4c 81       	ldd	r20, Y+4	; 0x04
    4c8e:	50 e0       	ldi	r21, 0x00	; 0
    4c90:	5d 81       	ldd	r21, Y+5	; 0x05
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	8e 81       	ldd	r24, Y+6	; 0x06
    4c96:	9b a3       	std	Y+35, r25	; 0x23
    4c98:	2c a3       	std	Y+36, r18	; 0x24
    4c9a:	3d a3       	std	Y+37, r19	; 0x25
    4c9c:	4e a3       	std	Y+38, r20	; 0x26
    4c9e:	5f a3       	std	Y+39, r21	; 0x27
    4ca0:	88 a7       	std	Y+40, r24	; 0x28
    4ca2:	ab a0       	ldd	r10, Y+35	; 0x23
    4ca4:	bc a0       	ldd	r11, Y+36	; 0x24
    4ca6:	cd a0       	ldd	r12, Y+37	; 0x25
    4ca8:	de a0       	ldd	r13, Y+38	; 0x26
    4caa:	ef a0       	ldd	r14, Y+39	; 0x27
    4cac:	f8 a4       	ldd	r15, Y+40	; 0x28
    4cae:	09 a5       	ldd	r16, Y+41	; 0x29
    4cb0:	1a a5       	ldd	r17, Y+42	; 0x2a
}
    4cb2:	2a 2d       	mov	r18, r10
    4cb4:	3b 2d       	mov	r19, r11
    4cb6:	4c 2d       	mov	r20, r12
    4cb8:	5d 2d       	mov	r21, r13
    4cba:	6e 2d       	mov	r22, r14
    4cbc:	7f 2d       	mov	r23, r15
    4cbe:	80 2f       	mov	r24, r16
    4cc0:	91 2f       	mov	r25, r17
    4cc2:	aa 96       	adiw	r28, 0x2a	; 42
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	f8 94       	cli
    4cc8:	de bf       	out	0x3e, r29	; 62
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	cd bf       	out	0x3d, r28	; 61
    4cce:	cf 91       	pop	r28
    4cd0:	df 91       	pop	r29
    4cd2:	1f 91       	pop	r17
    4cd4:	0f 91       	pop	r16
    4cd6:	ff 90       	pop	r15
    4cd8:	ef 90       	pop	r14
    4cda:	df 90       	pop	r13
    4cdc:	cf 90       	pop	r12
    4cde:	bf 90       	pop	r11
    4ce0:	af 90       	pop	r10
    4ce2:	08 95       	ret

00004ce4 <RefreshSensors>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sensors Refreshes  ///////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void RefreshSensors(void){
    4ce4:	df 93       	push	r29
    4ce6:	cf 93       	push	r28
    4ce8:	cd b7       	in	r28, 0x3d	; 61
    4cea:	de b7       	in	r29, 0x3e	; 62
	SENSORS_vidUpdateTemp(roomIndex);
    4cec:	80 91 dc 01 	lds	r24, 0x01DC
    4cf0:	90 91 dd 01 	lds	r25, 0x01DD
    4cf4:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <SENSORS_vidUpdateTemp>
	SENSORS_vidUpdateFlame(roomIndex);
    4cf8:	80 91 dc 01 	lds	r24, 0x01DC
    4cfc:	90 91 dd 01 	lds	r25, 0x01DD
    4d00:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <SENSORS_vidUpdateFlame>
	SENSORS_vidUpdateGas(roomIndex);
    4d04:	80 91 dc 01 	lds	r24, 0x01DC
    4d08:	90 91 dd 01 	lds	r25, 0x01DD
    4d0c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <SENSORS_vidUpdateGas>
	SENSORS_vidUpdatePir(roomIndex);
    4d10:	80 91 dc 01 	lds	r24, 0x01DC
    4d14:	90 91 dd 01 	lds	r25, 0x01DD
    4d18:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SENSORS_vidUpdatePir>
}
    4d1c:	cf 91       	pop	r28
    4d1e:	df 91       	pop	r29
    4d20:	08 95       	ret

00004d22 <RefreshSensors_Init>:



void RefreshSensors_Init(void){
    4d22:	df 93       	push	r29
    4d24:	cf 93       	push	r28
    4d26:	00 d0       	rcall	.+0      	; 0x4d28 <RefreshSensors_Init+0x6>
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
	for(int i=0 ; i<16 ; i++){
    4d2c:	1a 82       	std	Y+2, r1	; 0x02
    4d2e:	19 82       	std	Y+1, r1	; 0x01
    4d30:	11 c0       	rjmp	.+34     	; 0x4d54 <RefreshSensors_Init+0x32>
		SENSORS_vidUpdateFlame(i);
    4d32:	89 81       	ldd	r24, Y+1	; 0x01
    4d34:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <SENSORS_vidUpdateFlame>
		SENSORS_vidUpdateGas(i);
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <SENSORS_vidUpdateGas>
		SENSORS_vidUpdatePir(i);
    4d3e:	89 81       	ldd	r24, Y+1	; 0x01
    4d40:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SENSORS_vidUpdatePir>
		SENSORS_vidUpdateTemp(i);
    4d44:	89 81       	ldd	r24, Y+1	; 0x01
    4d46:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <SENSORS_vidUpdateTemp>
}



void RefreshSensors_Init(void){
	for(int i=0 ; i<16 ; i++){
    4d4a:	89 81       	ldd	r24, Y+1	; 0x01
    4d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	9a 83       	std	Y+2, r25	; 0x02
    4d52:	89 83       	std	Y+1, r24	; 0x01
    4d54:	89 81       	ldd	r24, Y+1	; 0x01
    4d56:	9a 81       	ldd	r25, Y+2	; 0x02
    4d58:	80 31       	cpi	r24, 0x10	; 16
    4d5a:	91 05       	cpc	r25, r1
    4d5c:	54 f3       	brlt	.-44     	; 0x4d32 <RefreshSensors_Init+0x10>
		SENSORS_vidUpdateGas(i);
		SENSORS_vidUpdatePir(i);
		SENSORS_vidUpdateTemp(i);

	}
}
    4d5e:	0f 90       	pop	r0
    4d60:	0f 90       	pop	r0
    4d62:	cf 91       	pop	r28
    4d64:	df 91       	pop	r29
    4d66:	08 95       	ret

00004d68 <RefreshResponse>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// Response Refreshes ///////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


void RefreshResponse(void){
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	df 93       	push	r29
    4d72:	cf 93       	push	r28
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	66 97       	sbiw	r28, 0x16	; 22
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61
		u8 channelMask = DataKeeper[roomIndex].channelBits; // replace with your logic per room
    4d84:	20 91 dc 01 	lds	r18, 0x01DC
    4d88:	30 91 dd 01 	lds	r19, 0x01DD
    4d8c:	c9 01       	movw	r24, r18
    4d8e:	88 0f       	add	r24, r24
    4d90:	99 1f       	adc	r25, r25
    4d92:	82 0f       	add	r24, r18
    4d94:	93 1f       	adc	r25, r19
    4d96:	88 0f       	add	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	88 0f       	add	r24, r24
    4d9c:	99 1f       	adc	r25, r25
    4d9e:	82 0f       	add	r24, r18
    4da0:	93 1f       	adc	r25, r19
    4da2:	fc 01       	movw	r30, r24
    4da4:	e6 50       	subi	r30, 0x06	; 6
    4da6:	fe 4f       	sbci	r31, 0xFE	; 254
    4da8:	80 81       	ld	r24, Z
    4daa:	8b 87       	std	Y+11, r24	; 0x0b
	    u8 temp   = DataKeeper[roomIndex].sensors[0];
    4dac:	20 91 dc 01 	lds	r18, 0x01DC
    4db0:	30 91 dd 01 	lds	r19, 0x01DD
    4db4:	c9 01       	movw	r24, r18
    4db6:	88 0f       	add	r24, r24
    4db8:	99 1f       	adc	r25, r25
    4dba:	82 0f       	add	r24, r18
    4dbc:	93 1f       	adc	r25, r19
    4dbe:	88 0f       	add	r24, r24
    4dc0:	99 1f       	adc	r25, r25
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	82 0f       	add	r24, r18
    4dc8:	93 1f       	adc	r25, r19
    4dca:	fc 01       	movw	r30, r24
    4dcc:	e5 50       	subi	r30, 0x05	; 5
    4dce:	fe 4f       	sbci	r31, 0xFE	; 254
    4dd0:	80 81       	ld	r24, Z
    4dd2:	8a 87       	std	Y+10, r24	; 0x0a
	    u8 flame  = DataKeeper[roomIndex].sensors[1];
    4dd4:	20 91 dc 01 	lds	r18, 0x01DC
    4dd8:	30 91 dd 01 	lds	r19, 0x01DD
    4ddc:	c9 01       	movw	r24, r18
    4dde:	88 0f       	add	r24, r24
    4de0:	99 1f       	adc	r25, r25
    4de2:	82 0f       	add	r24, r18
    4de4:	93 1f       	adc	r25, r19
    4de6:	88 0f       	add	r24, r24
    4de8:	99 1f       	adc	r25, r25
    4dea:	88 0f       	add	r24, r24
    4dec:	99 1f       	adc	r25, r25
    4dee:	82 0f       	add	r24, r18
    4df0:	93 1f       	adc	r25, r19
    4df2:	fc 01       	movw	r30, r24
    4df4:	e4 50       	subi	r30, 0x04	; 4
    4df6:	fe 4f       	sbci	r31, 0xFE	; 254
    4df8:	80 81       	ld	r24, Z
    4dfa:	89 87       	std	Y+9, r24	; 0x09
	    u8 gas    = DataKeeper[roomIndex].sensors[2];
    4dfc:	20 91 dc 01 	lds	r18, 0x01DC
    4e00:	30 91 dd 01 	lds	r19, 0x01DD
    4e04:	c9 01       	movw	r24, r18
    4e06:	88 0f       	add	r24, r24
    4e08:	99 1f       	adc	r25, r25
    4e0a:	82 0f       	add	r24, r18
    4e0c:	93 1f       	adc	r25, r19
    4e0e:	88 0f       	add	r24, r24
    4e10:	99 1f       	adc	r25, r25
    4e12:	88 0f       	add	r24, r24
    4e14:	99 1f       	adc	r25, r25
    4e16:	82 0f       	add	r24, r18
    4e18:	93 1f       	adc	r25, r19
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	e3 50       	subi	r30, 0x03	; 3
    4e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e20:	80 81       	ld	r24, Z
    4e22:	88 87       	std	Y+8, r24	; 0x08
	    u8 pir    = DataKeeper[roomIndex].sensors[3];
    4e24:	20 91 dc 01 	lds	r18, 0x01DC
    4e28:	30 91 dd 01 	lds	r19, 0x01DD
    4e2c:	c9 01       	movw	r24, r18
    4e2e:	88 0f       	add	r24, r24
    4e30:	99 1f       	adc	r25, r25
    4e32:	82 0f       	add	r24, r18
    4e34:	93 1f       	adc	r25, r19
    4e36:	88 0f       	add	r24, r24
    4e38:	99 1f       	adc	r25, r25
    4e3a:	88 0f       	add	r24, r24
    4e3c:	99 1f       	adc	r25, r25
    4e3e:	82 0f       	add	r24, r18
    4e40:	93 1f       	adc	r25, r19
    4e42:	fc 01       	movw	r30, r24
    4e44:	e2 50       	subi	r30, 0x02	; 2
    4e46:	fe 4f       	sbci	r31, 0xFE	; 254
    4e48:	80 81       	ld	r24, Z
    4e4a:	8f 83       	std	Y+7, r24	; 0x07

	    int servoA = DataKeeper[roomIndex].servoAngleA;
    4e4c:	20 91 dc 01 	lds	r18, 0x01DC
    4e50:	30 91 dd 01 	lds	r19, 0x01DD
    4e54:	c9 01       	movw	r24, r18
    4e56:	88 0f       	add	r24, r24
    4e58:	99 1f       	adc	r25, r25
    4e5a:	82 0f       	add	r24, r18
    4e5c:	93 1f       	adc	r25, r19
    4e5e:	88 0f       	add	r24, r24
    4e60:	99 1f       	adc	r25, r25
    4e62:	88 0f       	add	r24, r24
    4e64:	99 1f       	adc	r25, r25
    4e66:	82 0f       	add	r24, r18
    4e68:	93 1f       	adc	r25, r19
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	e1 50       	subi	r30, 0x01	; 1
    4e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e70:	80 81       	ld	r24, Z
    4e72:	91 81       	ldd	r25, Z+1	; 0x01
    4e74:	a2 81       	ldd	r26, Z+2	; 0x02
    4e76:	b3 81       	ldd	r27, Z+3	; 0x03
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fixsfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
	    int servoB = DataKeeper[roomIndex].servoAngleB;
    4e88:	20 91 dc 01 	lds	r18, 0x01DC
    4e8c:	30 91 dd 01 	lds	r19, 0x01DD
    4e90:	c9 01       	movw	r24, r18
    4e92:	88 0f       	add	r24, r24
    4e94:	99 1f       	adc	r25, r25
    4e96:	82 0f       	add	r24, r18
    4e98:	93 1f       	adc	r25, r19
    4e9a:	88 0f       	add	r24, r24
    4e9c:	99 1f       	adc	r25, r25
    4e9e:	88 0f       	add	r24, r24
    4ea0:	99 1f       	adc	r25, r25
    4ea2:	82 0f       	add	r24, r18
    4ea4:	93 1f       	adc	r25, r19
    4ea6:	fc 01       	movw	r30, r24
    4ea8:	ed 5f       	subi	r30, 0xFD	; 253
    4eaa:	fd 4f       	sbci	r31, 0xFD	; 253
    4eac:	80 81       	ld	r24, Z
    4eae:	91 81       	ldd	r25, Z+1	; 0x01
    4eb0:	a2 81       	ldd	r26, Z+2	; 0x02
    4eb2:	b3 81       	ldd	r27, Z+3	; 0x03
    4eb4:	bc 01       	movw	r22, r24
    4eb6:	cd 01       	movw	r24, r26
    4eb8:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fixsfsi>
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	cb 01       	movw	r24, r22
    4ec0:	9c 83       	std	Y+4, r25	; 0x04
    4ec2:	8b 83       	std	Y+3, r24	; 0x03

	    char servoASign = (servoA < 0) ? '1' : '0';
    4ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec8:	99 23       	and	r25, r25
    4eca:	1c f4       	brge	.+6      	; 0x4ed2 <RefreshResponse+0x16a>
    4ecc:	81 e3       	ldi	r24, 0x31	; 49
    4ece:	8e 8b       	std	Y+22, r24	; 0x16
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <RefreshResponse+0x16e>
    4ed2:	90 e3       	ldi	r25, 0x30	; 48
    4ed4:	9e 8b       	std	Y+22, r25	; 0x16
    4ed6:	8e 89       	ldd	r24, Y+22	; 0x16
    4ed8:	8a 83       	std	Y+2, r24	; 0x02
	    char servoBSign = (servoB < 0) ? '1' : '0';
    4eda:	8b 81       	ldd	r24, Y+3	; 0x03
    4edc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ede:	99 23       	and	r25, r25
    4ee0:	1c f4       	brge	.+6      	; 0x4ee8 <RefreshResponse+0x180>
    4ee2:	91 e3       	ldi	r25, 0x31	; 49
    4ee4:	9d 8b       	std	Y+21, r25	; 0x15
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <RefreshResponse+0x184>
    4ee8:	80 e3       	ldi	r24, 0x30	; 48
    4eea:	8d 8b       	std	Y+21, r24	; 0x15
    4eec:	9d 89       	ldd	r25, Y+21	; 0x15
    4eee:	99 83       	std	Y+1, r25	; 0x01

	    if(servoA < 0) servoA = -servoA;
    4ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef4:	99 23       	and	r25, r25
    4ef6:	3c f4       	brge	.+14     	; 0x4f06 <RefreshResponse+0x19e>
    4ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    4efa:	9e 81       	ldd	r25, Y+6	; 0x06
    4efc:	90 95       	com	r25
    4efe:	81 95       	neg	r24
    4f00:	9f 4f       	sbci	r25, 0xFF	; 255
    4f02:	9e 83       	std	Y+6, r25	; 0x06
    4f04:	8d 83       	std	Y+5, r24	; 0x05
	    if(servoB < 0) servoB = -servoB;
    4f06:	8b 81       	ldd	r24, Y+3	; 0x03
    4f08:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0a:	99 23       	and	r25, r25
    4f0c:	3c f4       	brge	.+14     	; 0x4f1c <RefreshResponse+0x1b4>
    4f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f10:	9c 81       	ldd	r25, Y+4	; 0x04
    4f12:	90 95       	com	r25
    4f14:	81 95       	neg	r24
    4f16:	9f 4f       	sbci	r25, 0xFF	; 255
    4f18:	9c 83       	std	Y+4, r25	; 0x04
    4f1a:	8b 83       	std	Y+3, r24	; 0x03

	    // Build the string
	    char maskStr[9];
	    byteToBinaryStr(channelMask, maskStr);
    4f1c:	9e 01       	movw	r18, r28
    4f1e:	24 5f       	subi	r18, 0xF4	; 244
    4f20:	3f 4f       	sbci	r19, 0xFF	; 255
    4f22:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f24:	b9 01       	movw	r22, r18
    4f26:	0e 94 3f 24 	call	0x487e	; 0x487e <byteToBinaryStr>

	    sprintf(Response, "RES%s%02d%d%d%d%c%02d%c%02d\r\n",
    4f2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f2c:	28 2f       	mov	r18, r24
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	89 85       	ldd	r24, Y+9	; 0x09
    4f32:	48 2f       	mov	r20, r24
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	88 85       	ldd	r24, Y+8	; 0x08
    4f38:	68 2f       	mov	r22, r24
    4f3a:	70 e0       	ldi	r23, 0x00	; 0
    4f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f3e:	a8 2f       	mov	r26, r24
    4f40:	b0 e0       	ldi	r27, 0x00	; 0
    4f42:	8a 81       	ldd	r24, Y+2	; 0x02
    4f44:	08 2f       	mov	r16, r24
    4f46:	10 e0       	ldi	r17, 0x00	; 0
    4f48:	89 81       	ldd	r24, Y+1	; 0x01
    4f4a:	e8 2e       	mov	r14, r24
    4f4c:	ff 24       	eor	r15, r15
    4f4e:	8d b7       	in	r24, 0x3d	; 61
    4f50:	9e b7       	in	r25, 0x3e	; 62
    4f52:	46 97       	sbiw	r24, 0x16	; 22
    4f54:	0f b6       	in	r0, 0x3f	; 63
    4f56:	f8 94       	cli
    4f58:	9e bf       	out	0x3e, r25	; 62
    4f5a:	0f be       	out	0x3f, r0	; 63
    4f5c:	8d bf       	out	0x3d, r24	; 61
    4f5e:	ed b7       	in	r30, 0x3d	; 61
    4f60:	fe b7       	in	r31, 0x3e	; 62
    4f62:	31 96       	adiw	r30, 0x01	; 1
    4f64:	8a ec       	ldi	r24, 0xCA	; 202
    4f66:	92 e0       	ldi	r25, 0x02	; 2
    4f68:	91 83       	std	Z+1, r25	; 0x01
    4f6a:	80 83       	st	Z, r24
    4f6c:	80 e7       	ldi	r24, 0x70	; 112
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	93 83       	std	Z+3, r25	; 0x03
    4f72:	82 83       	std	Z+2, r24	; 0x02
    4f74:	ce 01       	movw	r24, r28
    4f76:	0c 96       	adiw	r24, 0x0c	; 12
    4f78:	95 83       	std	Z+5, r25	; 0x05
    4f7a:	84 83       	std	Z+4, r24	; 0x04
    4f7c:	37 83       	std	Z+7, r19	; 0x07
    4f7e:	26 83       	std	Z+6, r18	; 0x06
    4f80:	51 87       	std	Z+9, r21	; 0x09
    4f82:	40 87       	std	Z+8, r20	; 0x08
    4f84:	73 87       	std	Z+11, r23	; 0x0b
    4f86:	62 87       	std	Z+10, r22	; 0x0a
    4f88:	b5 87       	std	Z+13, r27	; 0x0d
    4f8a:	a4 87       	std	Z+12, r26	; 0x0c
    4f8c:	17 87       	std	Z+15, r17	; 0x0f
    4f8e:	06 87       	std	Z+14, r16	; 0x0e
    4f90:	8d 81       	ldd	r24, Y+5	; 0x05
    4f92:	9e 81       	ldd	r25, Y+6	; 0x06
    4f94:	91 8b       	std	Z+17, r25	; 0x11
    4f96:	80 8b       	std	Z+16, r24	; 0x10
    4f98:	f3 8a       	std	Z+19, r15	; 0x13
    4f9a:	e2 8a       	std	Z+18, r14	; 0x12
    4f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa0:	95 8b       	std	Z+21, r25	; 0x15
    4fa2:	84 8b       	std	Z+20, r24	; 0x14
    4fa4:	0e 94 82 29 	call	0x5304	; 0x5304 <sprintf>
    4fa8:	8d b7       	in	r24, 0x3d	; 61
    4faa:	9e b7       	in	r25, 0x3e	; 62
    4fac:	46 96       	adiw	r24, 0x16	; 22
    4fae:	0f b6       	in	r0, 0x3f	; 63
    4fb0:	f8 94       	cli
    4fb2:	9e bf       	out	0x3e, r25	; 62
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	8d bf       	out	0x3d, r24	; 61
	            maskStr,          // هنا بدل %08d
	            temp, flame, gas, pir,
	            servoASign, servoA,
	            servoBSign, servoB);

}
    4fb8:	66 96       	adiw	r28, 0x16	; 22
    4fba:	0f b6       	in	r0, 0x3f	; 63
    4fbc:	f8 94       	cli
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	0f be       	out	0x3f, r0	; 63
    4fc2:	cd bf       	out	0x3d, r28	; 61
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	1f 91       	pop	r17
    4fca:	0f 91       	pop	r16
    4fcc:	ff 90       	pop	r15
    4fce:	ef 90       	pop	r14
    4fd0:	08 95       	ret

00004fd2 <Task_ParseUART>:



/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void Task_ParseUART(void){
    4fd2:	1f 93       	push	r17
    4fd4:	df 93       	push	r29
    4fd6:	cf 93       	push	r28
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	67 97       	sbiw	r28, 0x17	; 23
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    static char line[24];
        UART_vidReceiveStringUntilNewline(line, sizeof(line));;
    4fe8:	8e ed       	ldi	r24, 0xDE	; 222
    4fea:	91 e0       	ldi	r25, 0x01	; 1
    4fec:	68 e1       	ldi	r22, 0x18	; 24
    4fee:	0e 94 4e 0b 	call	0x169c	; 0x169c <UART_vidReceiveStringUntilNewline>
            if(strncmp(line, "UPT",3)==0) {
    4ff2:	8e ed       	ldi	r24, 0xDE	; 222
    4ff4:	91 e0       	ldi	r25, 0x01	; 1
    4ff6:	20 e6       	ldi	r18, 0x60	; 96
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	b9 01       	movw	r22, r18
    4ffc:	43 e0       	ldi	r20, 0x03	; 3
    4ffe:	50 e0       	ldi	r21, 0x00	; 0
    5000:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    5004:	00 97       	sbiw	r24, 0x00	; 0
    5006:	71 f4       	brne	.+28     	; 0x5024 <Task_ParseUART+0x52>
                roomIndex = parseUPT(line)-1;
    5008:	8e ed       	ldi	r24, 0xDE	; 222
    500a:	91 e0       	ldi	r25, 0x01	; 1
    500c:	0e 94 8e 24 	call	0x491c	; 0x491c <parseUPT>
    5010:	01 97       	sbiw	r24, 0x01	; 1
    5012:	90 93 dd 01 	sts	0x01DD, r25
    5016:	80 93 dc 01 	sts	0x01DC, r24
                UART_vidSendString(Response);
    501a:	8a ec       	ldi	r24, 0xCA	; 202
    501c:	92 e0       	ldi	r25, 0x02	; 2
    501e:	0e 94 22 0b 	call	0x1644	; 0x1644 <UART_vidSendString>
    5022:	9b c0       	rjmp	.+310    	; 0x515a <Task_ParseUART+0x188>
            } else if(strncmp(line,"SER",3)==0) {
    5024:	8e ed       	ldi	r24, 0xDE	; 222
    5026:	91 e0       	ldi	r25, 0x01	; 1
    5028:	2c e6       	ldi	r18, 0x6C	; 108
    502a:	30 e0       	ldi	r19, 0x00	; 0
    502c:	b9 01       	movw	r22, r18
    502e:	43 e0       	ldi	r20, 0x03	; 3
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    5036:	00 97       	sbiw	r24, 0x00	; 0
    5038:	09 f0       	breq	.+2      	; 0x503c <Task_ParseUART+0x6a>
    503a:	49 c0       	rjmp	.+146    	; 0x50ce <Task_ParseUART+0xfc>
                SER_Info SER = parseSER(line);
    503c:	8e ed       	ldi	r24, 0xDE	; 222
    503e:	91 e0       	ldi	r25, 0x01	; 1
    5040:	0e 94 81 25 	call	0x4b02	; 0x4b02 <parseSER>
    5044:	2c 87       	std	Y+12, r18	; 0x0c
    5046:	3d 87       	std	Y+13, r19	; 0x0d
    5048:	4e 87       	std	Y+14, r20	; 0x0e
    504a:	5f 87       	std	Y+15, r21	; 0x0f
    504c:	68 8b       	std	Y+16, r22	; 0x10
    504e:	79 8b       	std	Y+17, r23	; 0x11
    5050:	ce 01       	movw	r24, r28
    5052:	02 96       	adiw	r24, 0x02	; 2
    5054:	9c 8b       	std	Y+20, r25	; 0x14
    5056:	8b 8b       	std	Y+19, r24	; 0x13
    5058:	fe 01       	movw	r30, r28
    505a:	3c 96       	adiw	r30, 0x0c	; 12
    505c:	fe 8b       	std	Y+22, r31	; 0x16
    505e:	ed 8b       	std	Y+21, r30	; 0x15
    5060:	f6 e0       	ldi	r31, 0x06	; 6
    5062:	ff 8b       	std	Y+23, r31	; 0x17
    5064:	ed 89       	ldd	r30, Y+21	; 0x15
    5066:	fe 89       	ldd	r31, Y+22	; 0x16
    5068:	00 80       	ld	r0, Z
    506a:	8d 89       	ldd	r24, Y+21	; 0x15
    506c:	9e 89       	ldd	r25, Y+22	; 0x16
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	9e 8b       	std	Y+22, r25	; 0x16
    5072:	8d 8b       	std	Y+21, r24	; 0x15
    5074:	eb 89       	ldd	r30, Y+19	; 0x13
    5076:	fc 89       	ldd	r31, Y+20	; 0x14
    5078:	00 82       	st	Z, r0
    507a:	8b 89       	ldd	r24, Y+19	; 0x13
    507c:	9c 89       	ldd	r25, Y+20	; 0x14
    507e:	01 96       	adiw	r24, 0x01	; 1
    5080:	9c 8b       	std	Y+20, r25	; 0x14
    5082:	8b 8b       	std	Y+19, r24	; 0x13
    5084:	9f 89       	ldd	r25, Y+23	; 0x17
    5086:	91 50       	subi	r25, 0x01	; 1
    5088:	9f 8b       	std	Y+23, r25	; 0x17
    508a:	ef 89       	ldd	r30, Y+23	; 0x17
    508c:	ee 23       	and	r30, r30
    508e:	51 f7       	brne	.-44     	; 0x5064 <Task_ParseUART+0x92>
                uint8_t ch = (SER.channel==0)?SERVO_CHANNEL_A_PIN:SERVO_CHANNEL_B_PIN;
    5090:	8c 81       	ldd	r24, Y+4	; 0x04
    5092:	9d 81       	ldd	r25, Y+5	; 0x05
    5094:	00 97       	sbiw	r24, 0x00	; 0
    5096:	19 f4       	brne	.+6      	; 0x509e <Task_ParseUART+0xcc>
    5098:	f0 e4       	ldi	r31, 0x40	; 64
    509a:	fa 8b       	std	Y+18, r31	; 0x12
    509c:	02 c0       	rjmp	.+4      	; 0x50a2 <Task_ParseUART+0xd0>
    509e:	81 e4       	ldi	r24, 0x41	; 65
    50a0:	8a 8b       	std	Y+18, r24	; 0x12
    50a2:	9a 89       	ldd	r25, Y+18	; 0x12
    50a4:	99 83       	std	Y+1, r25	; 0x01
                PCA9685_SetServoAngle(ch, SER.room, SER.value);
    50a6:	8a 81       	ldd	r24, Y+2	; 0x02
    50a8:	9b 81       	ldd	r25, Y+3	; 0x03
    50aa:	18 2f       	mov	r17, r24
    50ac:	8e 81       	ldd	r24, Y+6	; 0x06
    50ae:	9f 81       	ldd	r25, Y+7	; 0x07
    50b0:	aa 27       	eor	r26, r26
    50b2:	97 fd       	sbrc	r25, 7
    50b4:	a0 95       	com	r26
    50b6:	ba 2f       	mov	r27, r26
    50b8:	bc 01       	movw	r22, r24
    50ba:	cd 01       	movw	r24, r26
    50bc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__floatsisf>
    50c0:	9b 01       	movw	r18, r22
    50c2:	ac 01       	movw	r20, r24
    50c4:	89 81       	ldd	r24, Y+1	; 0x01
    50c6:	61 2f       	mov	r22, r17
    50c8:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <PCA9685_SetServoAngle>
    50cc:	46 c0       	rjmp	.+140    	; 0x515a <Task_ParseUART+0x188>
            } else if(strncmp(line,"TOG",3)==0) {
    50ce:	8e ed       	ldi	r24, 0xDE	; 222
    50d0:	91 e0       	ldi	r25, 0x01	; 1
    50d2:	28 e6       	ldi	r18, 0x68	; 104
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	b9 01       	movw	r22, r18
    50d8:	43 e0       	ldi	r20, 0x03	; 3
    50da:	50 e0       	ldi	r21, 0x00	; 0
    50dc:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    50e0:	00 97       	sbiw	r24, 0x00	; 0
    50e2:	a9 f4       	brne	.+42     	; 0x510e <Task_ParseUART+0x13c>
                TOG_Info TOG = parseTOG(line);
    50e4:	8e ed       	ldi	r24, 0xDE	; 222
    50e6:	91 e0       	ldi	r25, 0x01	; 1
    50e8:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <parseTOG>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	88 87       	std	Y+8, r24	; 0x08
    50f2:	99 87       	std	Y+9, r25	; 0x09
    50f4:	aa 87       	std	Y+10, r26	; 0x0a
    50f6:	bb 87       	std	Y+11, r27	; 0x0b
                vidChannelToggle(TOG.room, TOG.channel);
    50f8:	88 85       	ldd	r24, Y+8	; 0x08
    50fa:	99 85       	ldd	r25, Y+9	; 0x09
    50fc:	28 2f       	mov	r18, r24
    50fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5100:	9b 85       	ldd	r25, Y+11	; 0x0b
    5102:	98 2f       	mov	r25, r24
    5104:	82 2f       	mov	r24, r18
    5106:	69 2f       	mov	r22, r25
    5108:	0e 94 68 23 	call	0x46d0	; 0x46d0 <vidChannelToggle>
    510c:	26 c0       	rjmp	.+76     	; 0x515a <Task_ParseUART+0x188>
            } else if(strncmp(line,"SEN",3)==0) {
    510e:	8e ed       	ldi	r24, 0xDE	; 222
    5110:	91 e0       	ldi	r25, 0x01	; 1
    5112:	24 e6       	ldi	r18, 0x64	; 100
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	b9 01       	movw	r22, r18
    5118:	43 e0       	ldi	r20, 0x03	; 3
    511a:	50 e0       	ldi	r21, 0x00	; 0
    511c:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    5120:	00 97       	sbiw	r24, 0x00	; 0
    5122:	61 f4       	brne	.+24     	; 0x513c <Task_ParseUART+0x16a>
            	roomIndex = parseSEN(line)-1;
    5124:	8e ed       	ldi	r24, 0xDE	; 222
    5126:	91 e0       	ldi	r25, 0x01	; 1
    5128:	0e 94 d5 24 	call	0x49aa	; 0x49aa <parseSEN>
    512c:	01 97       	sbiw	r24, 0x01	; 1
    512e:	90 93 dd 01 	sts	0x01DD, r25
    5132:	80 93 dc 01 	sts	0x01DC, r24
            	RefreshSensors();
    5136:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <RefreshSensors>
    513a:	0f c0       	rjmp	.+30     	; 0x515a <Task_ParseUART+0x188>
            } else if(strncmp(line,"BUZ",3)==0) {
    513c:	8e ed       	ldi	r24, 0xDE	; 222
    513e:	91 e0       	ldi	r25, 0x01	; 1
    5140:	2e e8       	ldi	r18, 0x8E	; 142
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	b9 01       	movw	r22, r18
    5146:	43 e0       	ldi	r20, 0x03	; 3
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	0e 94 5d 29 	call	0x52ba	; 0x52ba <strncmp>
    514e:	00 97       	sbiw	r24, 0x00	; 0
    5150:	21 f4       	brne	.+8      	; 0x515a <Task_ParseUART+0x188>
            	PIN_vidSetValue(PD5 , HIGH);
    5152:	85 e0       	ldi	r24, 0x05	; 5
    5154:	61 e0       	ldi	r22, 0x01	; 1
    5156:	0e 94 fd 19 	call	0x33fa	; 0x33fa <PIN_vidSetValue>
            }
}
    515a:	67 96       	adiw	r28, 0x17	; 23
    515c:	0f b6       	in	r0, 0x3f	; 63
    515e:	f8 94       	cli
    5160:	de bf       	out	0x3e, r29	; 62
    5162:	0f be       	out	0x3f, r0	; 63
    5164:	cd bf       	out	0x3d, r28	; 61
    5166:	cf 91       	pop	r28
    5168:	df 91       	pop	r29
    516a:	1f 91       	pop	r17
    516c:	08 95       	ret

0000516e <main>:





int main(void) {
    516e:	df 93       	push	r29
    5170:	cf 93       	push	r28
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
	GIE_vidEnable();
    5176:	0e 94 96 1c 	call	0x392c	; 0x392c <GIE_vidEnable>
	vidChannelInit();
    517a:	0e 94 8f 21 	call	0x431e	; 0x431e <vidChannelInit>
	ADC_vidInit();
    517e:	0e 94 a6 1c 	call	0x394c	; 0x394c <ADC_vidInit>
	SENSORS_vidInit();
    5182:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <SENSORS_vidInit>

	UART_vidInit();
    5186:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <UART_vidInit>
	I2C_Init(I2C_FREQ);
    518a:	60 ea       	ldi	r22, 0xA0	; 160
    518c:	76 e8       	ldi	r23, 0x86	; 134
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	0e 94 11 1c 	call	0x3822	; 0x3822 <I2C_Init>

	PCA9685_Init(SERVO_CHANNEL_A_PIN);
    5196:	80 e4       	ldi	r24, 0x40	; 64
    5198:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <PCA9685_Init>
	PCA9685_Init(SERVO_CHANNEL_B_PIN);
    519c:	81 e4       	ldi	r24, 0x41	; 65
    519e:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <PCA9685_Init>

	PCA9685_SetPWMFreq(SERVO_CHANNEL_A_PIN, PWM_FREQ);
    51a2:	80 e4       	ldi	r24, 0x40	; 64
    51a4:	40 e0       	ldi	r20, 0x00	; 0
    51a6:	50 e0       	ldi	r21, 0x00	; 0
    51a8:	68 e4       	ldi	r22, 0x48	; 72
    51aa:	72 e4       	ldi	r23, 0x42	; 66
    51ac:	0e 94 09 20 	call	0x4012	; 0x4012 <PCA9685_SetPWMFreq>
	PCA9685_SetPWMFreq(SERVO_CHANNEL_B_PIN, PWM_FREQ);
    51b0:	81 e4       	ldi	r24, 0x41	; 65
    51b2:	40 e0       	ldi	r20, 0x00	; 0
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	68 e4       	ldi	r22, 0x48	; 72
    51b8:	72 e4       	ldi	r23, 0x42	; 66
    51ba:	0e 94 09 20 	call	0x4012	; 0x4012 <PCA9685_SetPWMFreq>

	RefreshSensors_Init();
    51be:	0e 94 91 26 	call	0x4d22	; 0x4d22 <RefreshSensors_Init>
	while(1){
		Task_ParseUART();
    51c2:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <Task_ParseUART>
		RefreshResponse();
    51c6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <RefreshResponse>
    51ca:	fb cf       	rjmp	.-10     	; 0x51c2 <main+0x54>

000051cc <__udivmodsi4>:
    51cc:	a1 e2       	ldi	r26, 0x21	; 33
    51ce:	1a 2e       	mov	r1, r26
    51d0:	aa 1b       	sub	r26, r26
    51d2:	bb 1b       	sub	r27, r27
    51d4:	fd 01       	movw	r30, r26
    51d6:	0d c0       	rjmp	.+26     	; 0x51f2 <__udivmodsi4_ep>

000051d8 <__udivmodsi4_loop>:
    51d8:	aa 1f       	adc	r26, r26
    51da:	bb 1f       	adc	r27, r27
    51dc:	ee 1f       	adc	r30, r30
    51de:	ff 1f       	adc	r31, r31
    51e0:	a2 17       	cp	r26, r18
    51e2:	b3 07       	cpc	r27, r19
    51e4:	e4 07       	cpc	r30, r20
    51e6:	f5 07       	cpc	r31, r21
    51e8:	20 f0       	brcs	.+8      	; 0x51f2 <__udivmodsi4_ep>
    51ea:	a2 1b       	sub	r26, r18
    51ec:	b3 0b       	sbc	r27, r19
    51ee:	e4 0b       	sbc	r30, r20
    51f0:	f5 0b       	sbc	r31, r21

000051f2 <__udivmodsi4_ep>:
    51f2:	66 1f       	adc	r22, r22
    51f4:	77 1f       	adc	r23, r23
    51f6:	88 1f       	adc	r24, r24
    51f8:	99 1f       	adc	r25, r25
    51fa:	1a 94       	dec	r1
    51fc:	69 f7       	brne	.-38     	; 0x51d8 <__udivmodsi4_loop>
    51fe:	60 95       	com	r22
    5200:	70 95       	com	r23
    5202:	80 95       	com	r24
    5204:	90 95       	com	r25
    5206:	9b 01       	movw	r18, r22
    5208:	ac 01       	movw	r20, r24
    520a:	bd 01       	movw	r22, r26
    520c:	cf 01       	movw	r24, r30
    520e:	08 95       	ret

00005210 <__prologue_saves__>:
    5210:	2f 92       	push	r2
    5212:	3f 92       	push	r3
    5214:	4f 92       	push	r4
    5216:	5f 92       	push	r5
    5218:	6f 92       	push	r6
    521a:	7f 92       	push	r7
    521c:	8f 92       	push	r8
    521e:	9f 92       	push	r9
    5220:	af 92       	push	r10
    5222:	bf 92       	push	r11
    5224:	cf 92       	push	r12
    5226:	df 92       	push	r13
    5228:	ef 92       	push	r14
    522a:	ff 92       	push	r15
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	cd b7       	in	r28, 0x3d	; 61
    5236:	de b7       	in	r29, 0x3e	; 62
    5238:	ca 1b       	sub	r28, r26
    523a:	db 0b       	sbc	r29, r27
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	f8 94       	cli
    5240:	de bf       	out	0x3e, r29	; 62
    5242:	0f be       	out	0x3f, r0	; 63
    5244:	cd bf       	out	0x3d, r28	; 61
    5246:	09 94       	ijmp

00005248 <__epilogue_restores__>:
    5248:	2a 88       	ldd	r2, Y+18	; 0x12
    524a:	39 88       	ldd	r3, Y+17	; 0x11
    524c:	48 88       	ldd	r4, Y+16	; 0x10
    524e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5250:	6e 84       	ldd	r6, Y+14	; 0x0e
    5252:	7d 84       	ldd	r7, Y+13	; 0x0d
    5254:	8c 84       	ldd	r8, Y+12	; 0x0c
    5256:	9b 84       	ldd	r9, Y+11	; 0x0b
    5258:	aa 84       	ldd	r10, Y+10	; 0x0a
    525a:	b9 84       	ldd	r11, Y+9	; 0x09
    525c:	c8 84       	ldd	r12, Y+8	; 0x08
    525e:	df 80       	ldd	r13, Y+7	; 0x07
    5260:	ee 80       	ldd	r14, Y+6	; 0x06
    5262:	fd 80       	ldd	r15, Y+5	; 0x05
    5264:	0c 81       	ldd	r16, Y+4	; 0x04
    5266:	1b 81       	ldd	r17, Y+3	; 0x03
    5268:	aa 81       	ldd	r26, Y+2	; 0x02
    526a:	b9 81       	ldd	r27, Y+1	; 0x01
    526c:	ce 0f       	add	r28, r30
    526e:	d1 1d       	adc	r29, r1
    5270:	0f b6       	in	r0, 0x3f	; 63
    5272:	f8 94       	cli
    5274:	de bf       	out	0x3e, r29	; 62
    5276:	0f be       	out	0x3f, r0	; 63
    5278:	cd bf       	out	0x3d, r28	; 61
    527a:	ed 01       	movw	r28, r26
    527c:	08 95       	ret

0000527e <atoi>:
    527e:	fc 01       	movw	r30, r24
    5280:	88 27       	eor	r24, r24
    5282:	99 27       	eor	r25, r25
    5284:	e8 94       	clt
    5286:	21 91       	ld	r18, Z+
    5288:	20 32       	cpi	r18, 0x20	; 32
    528a:	e9 f3       	breq	.-6      	; 0x5286 <atoi+0x8>
    528c:	29 30       	cpi	r18, 0x09	; 9
    528e:	10 f0       	brcs	.+4      	; 0x5294 <atoi+0x16>
    5290:	2e 30       	cpi	r18, 0x0E	; 14
    5292:	c8 f3       	brcs	.-14     	; 0x5286 <atoi+0x8>
    5294:	2b 32       	cpi	r18, 0x2B	; 43
    5296:	41 f0       	breq	.+16     	; 0x52a8 <atoi+0x2a>
    5298:	2d 32       	cpi	r18, 0x2D	; 45
    529a:	39 f4       	brne	.+14     	; 0x52aa <atoi+0x2c>
    529c:	68 94       	set
    529e:	04 c0       	rjmp	.+8      	; 0x52a8 <atoi+0x2a>
    52a0:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__mulhi_const_10>
    52a4:	82 0f       	add	r24, r18
    52a6:	91 1d       	adc	r25, r1
    52a8:	21 91       	ld	r18, Z+
    52aa:	20 53       	subi	r18, 0x30	; 48
    52ac:	2a 30       	cpi	r18, 0x0A	; 10
    52ae:	c0 f3       	brcs	.-16     	; 0x52a0 <atoi+0x22>
    52b0:	1e f4       	brtc	.+6      	; 0x52b8 <atoi+0x3a>
    52b2:	90 95       	com	r25
    52b4:	81 95       	neg	r24
    52b6:	9f 4f       	sbci	r25, 0xFF	; 255
    52b8:	08 95       	ret

000052ba <strncmp>:
    52ba:	fb 01       	movw	r30, r22
    52bc:	dc 01       	movw	r26, r24
    52be:	41 50       	subi	r20, 0x01	; 1
    52c0:	50 40       	sbci	r21, 0x00	; 0
    52c2:	30 f0       	brcs	.+12     	; 0x52d0 <strncmp+0x16>
    52c4:	8d 91       	ld	r24, X+
    52c6:	01 90       	ld	r0, Z+
    52c8:	80 19       	sub	r24, r0
    52ca:	19 f4       	brne	.+6      	; 0x52d2 <strncmp+0x18>
    52cc:	00 20       	and	r0, r0
    52ce:	b9 f7       	brne	.-18     	; 0x52be <strncmp+0x4>
    52d0:	88 1b       	sub	r24, r24
    52d2:	99 0b       	sbc	r25, r25
    52d4:	08 95       	ret

000052d6 <strncpy>:
    52d6:	fb 01       	movw	r30, r22
    52d8:	dc 01       	movw	r26, r24
    52da:	41 50       	subi	r20, 0x01	; 1
    52dc:	50 40       	sbci	r21, 0x00	; 0
    52de:	48 f0       	brcs	.+18     	; 0x52f2 <strncpy+0x1c>
    52e0:	01 90       	ld	r0, Z+
    52e2:	0d 92       	st	X+, r0
    52e4:	00 20       	and	r0, r0
    52e6:	c9 f7       	brne	.-14     	; 0x52da <strncpy+0x4>
    52e8:	01 c0       	rjmp	.+2      	; 0x52ec <strncpy+0x16>
    52ea:	1d 92       	st	X+, r1
    52ec:	41 50       	subi	r20, 0x01	; 1
    52ee:	50 40       	sbci	r21, 0x00	; 0
    52f0:	e0 f7       	brcc	.-8      	; 0x52ea <strncpy+0x14>
    52f2:	08 95       	ret

000052f4 <__mulhi_const_10>:
    52f4:	7a e0       	ldi	r23, 0x0A	; 10
    52f6:	97 9f       	mul	r25, r23
    52f8:	90 2d       	mov	r25, r0
    52fa:	87 9f       	mul	r24, r23
    52fc:	80 2d       	mov	r24, r0
    52fe:	91 0d       	add	r25, r1
    5300:	11 24       	eor	r1, r1
    5302:	08 95       	ret

00005304 <sprintf>:
    5304:	ae e0       	ldi	r26, 0x0E	; 14
    5306:	b0 e0       	ldi	r27, 0x00	; 0
    5308:	e8 e8       	ldi	r30, 0x88	; 136
    530a:	f9 e2       	ldi	r31, 0x29	; 41
    530c:	0c 94 16 29 	jmp	0x522c	; 0x522c <__prologue_saves__+0x1c>
    5310:	0d 89       	ldd	r16, Y+21	; 0x15
    5312:	1e 89       	ldd	r17, Y+22	; 0x16
    5314:	86 e0       	ldi	r24, 0x06	; 6
    5316:	8c 83       	std	Y+4, r24	; 0x04
    5318:	1a 83       	std	Y+2, r17	; 0x02
    531a:	09 83       	std	Y+1, r16	; 0x01
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	9f e7       	ldi	r25, 0x7F	; 127
    5320:	9e 83       	std	Y+6, r25	; 0x06
    5322:	8d 83       	std	Y+5, r24	; 0x05
    5324:	9e 01       	movw	r18, r28
    5326:	27 5e       	subi	r18, 0xE7	; 231
    5328:	3f 4f       	sbci	r19, 0xFF	; 255
    532a:	ce 01       	movw	r24, r28
    532c:	01 96       	adiw	r24, 0x01	; 1
    532e:	6f 89       	ldd	r22, Y+23	; 0x17
    5330:	78 8d       	ldd	r23, Y+24	; 0x18
    5332:	a9 01       	movw	r20, r18
    5334:	0e 94 a6 29 	call	0x534c	; 0x534c <vfprintf>
    5338:	2f 81       	ldd	r18, Y+7	; 0x07
    533a:	38 85       	ldd	r19, Y+8	; 0x08
    533c:	02 0f       	add	r16, r18
    533e:	13 1f       	adc	r17, r19
    5340:	f8 01       	movw	r30, r16
    5342:	10 82       	st	Z, r1
    5344:	2e 96       	adiw	r28, 0x0e	; 14
    5346:	e4 e0       	ldi	r30, 0x04	; 4
    5348:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__epilogue_restores__+0x1c>

0000534c <vfprintf>:
    534c:	ab e0       	ldi	r26, 0x0B	; 11
    534e:	b0 e0       	ldi	r27, 0x00	; 0
    5350:	ec ea       	ldi	r30, 0xAC	; 172
    5352:	f9 e2       	ldi	r31, 0x29	; 41
    5354:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__prologue_saves__>
    5358:	3c 01       	movw	r6, r24
    535a:	2b 01       	movw	r4, r22
    535c:	5a 01       	movw	r10, r20
    535e:	fc 01       	movw	r30, r24
    5360:	17 82       	std	Z+7, r1	; 0x07
    5362:	16 82       	std	Z+6, r1	; 0x06
    5364:	83 81       	ldd	r24, Z+3	; 0x03
    5366:	81 fd       	sbrc	r24, 1
    5368:	03 c0       	rjmp	.+6      	; 0x5370 <vfprintf+0x24>
    536a:	6f ef       	ldi	r22, 0xFF	; 255
    536c:	7f ef       	ldi	r23, 0xFF	; 255
    536e:	c6 c1       	rjmp	.+908    	; 0x56fc <vfprintf+0x3b0>
    5370:	9a e0       	ldi	r25, 0x0A	; 10
    5372:	89 2e       	mov	r8, r25
    5374:	1e 01       	movw	r2, r28
    5376:	08 94       	sec
    5378:	21 1c       	adc	r2, r1
    537a:	31 1c       	adc	r3, r1
    537c:	f3 01       	movw	r30, r6
    537e:	23 81       	ldd	r18, Z+3	; 0x03
    5380:	f2 01       	movw	r30, r4
    5382:	23 fd       	sbrc	r18, 3
    5384:	85 91       	lpm	r24, Z+
    5386:	23 ff       	sbrs	r18, 3
    5388:	81 91       	ld	r24, Z+
    538a:	2f 01       	movw	r4, r30
    538c:	88 23       	and	r24, r24
    538e:	09 f4       	brne	.+2      	; 0x5392 <vfprintf+0x46>
    5390:	b2 c1       	rjmp	.+868    	; 0x56f6 <vfprintf+0x3aa>
    5392:	85 32       	cpi	r24, 0x25	; 37
    5394:	39 f4       	brne	.+14     	; 0x53a4 <vfprintf+0x58>
    5396:	23 fd       	sbrc	r18, 3
    5398:	85 91       	lpm	r24, Z+
    539a:	23 ff       	sbrs	r18, 3
    539c:	81 91       	ld	r24, Z+
    539e:	2f 01       	movw	r4, r30
    53a0:	85 32       	cpi	r24, 0x25	; 37
    53a2:	29 f4       	brne	.+10     	; 0x53ae <vfprintf+0x62>
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	b3 01       	movw	r22, r6
    53a8:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    53ac:	e7 cf       	rjmp	.-50     	; 0x537c <vfprintf+0x30>
    53ae:	98 2f       	mov	r25, r24
    53b0:	ff 24       	eor	r15, r15
    53b2:	ee 24       	eor	r14, r14
    53b4:	99 24       	eor	r9, r9
    53b6:	ff e1       	ldi	r31, 0x1F	; 31
    53b8:	ff 15       	cp	r31, r15
    53ba:	d0 f0       	brcs	.+52     	; 0x53f0 <vfprintf+0xa4>
    53bc:	9b 32       	cpi	r25, 0x2B	; 43
    53be:	69 f0       	breq	.+26     	; 0x53da <vfprintf+0x8e>
    53c0:	9c 32       	cpi	r25, 0x2C	; 44
    53c2:	28 f4       	brcc	.+10     	; 0x53ce <vfprintf+0x82>
    53c4:	90 32       	cpi	r25, 0x20	; 32
    53c6:	59 f0       	breq	.+22     	; 0x53de <vfprintf+0x92>
    53c8:	93 32       	cpi	r25, 0x23	; 35
    53ca:	91 f4       	brne	.+36     	; 0x53f0 <vfprintf+0xa4>
    53cc:	0e c0       	rjmp	.+28     	; 0x53ea <vfprintf+0x9e>
    53ce:	9d 32       	cpi	r25, 0x2D	; 45
    53d0:	49 f0       	breq	.+18     	; 0x53e4 <vfprintf+0x98>
    53d2:	90 33       	cpi	r25, 0x30	; 48
    53d4:	69 f4       	brne	.+26     	; 0x53f0 <vfprintf+0xa4>
    53d6:	41 e0       	ldi	r20, 0x01	; 1
    53d8:	24 c0       	rjmp	.+72     	; 0x5422 <vfprintf+0xd6>
    53da:	52 e0       	ldi	r21, 0x02	; 2
    53dc:	f5 2a       	or	r15, r21
    53de:	84 e0       	ldi	r24, 0x04	; 4
    53e0:	f8 2a       	or	r15, r24
    53e2:	28 c0       	rjmp	.+80     	; 0x5434 <vfprintf+0xe8>
    53e4:	98 e0       	ldi	r25, 0x08	; 8
    53e6:	f9 2a       	or	r15, r25
    53e8:	25 c0       	rjmp	.+74     	; 0x5434 <vfprintf+0xe8>
    53ea:	e0 e1       	ldi	r30, 0x10	; 16
    53ec:	fe 2a       	or	r15, r30
    53ee:	22 c0       	rjmp	.+68     	; 0x5434 <vfprintf+0xe8>
    53f0:	f7 fc       	sbrc	r15, 7
    53f2:	29 c0       	rjmp	.+82     	; 0x5446 <vfprintf+0xfa>
    53f4:	89 2f       	mov	r24, r25
    53f6:	80 53       	subi	r24, 0x30	; 48
    53f8:	8a 30       	cpi	r24, 0x0A	; 10
    53fa:	70 f4       	brcc	.+28     	; 0x5418 <vfprintf+0xcc>
    53fc:	f6 fe       	sbrs	r15, 6
    53fe:	05 c0       	rjmp	.+10     	; 0x540a <vfprintf+0xbe>
    5400:	98 9c       	mul	r9, r8
    5402:	90 2c       	mov	r9, r0
    5404:	11 24       	eor	r1, r1
    5406:	98 0e       	add	r9, r24
    5408:	15 c0       	rjmp	.+42     	; 0x5434 <vfprintf+0xe8>
    540a:	e8 9c       	mul	r14, r8
    540c:	e0 2c       	mov	r14, r0
    540e:	11 24       	eor	r1, r1
    5410:	e8 0e       	add	r14, r24
    5412:	f0 e2       	ldi	r31, 0x20	; 32
    5414:	ff 2a       	or	r15, r31
    5416:	0e c0       	rjmp	.+28     	; 0x5434 <vfprintf+0xe8>
    5418:	9e 32       	cpi	r25, 0x2E	; 46
    541a:	29 f4       	brne	.+10     	; 0x5426 <vfprintf+0xda>
    541c:	f6 fc       	sbrc	r15, 6
    541e:	6b c1       	rjmp	.+726    	; 0x56f6 <vfprintf+0x3aa>
    5420:	40 e4       	ldi	r20, 0x40	; 64
    5422:	f4 2a       	or	r15, r20
    5424:	07 c0       	rjmp	.+14     	; 0x5434 <vfprintf+0xe8>
    5426:	9c 36       	cpi	r25, 0x6C	; 108
    5428:	19 f4       	brne	.+6      	; 0x5430 <vfprintf+0xe4>
    542a:	50 e8       	ldi	r21, 0x80	; 128
    542c:	f5 2a       	or	r15, r21
    542e:	02 c0       	rjmp	.+4      	; 0x5434 <vfprintf+0xe8>
    5430:	98 36       	cpi	r25, 0x68	; 104
    5432:	49 f4       	brne	.+18     	; 0x5446 <vfprintf+0xfa>
    5434:	f2 01       	movw	r30, r4
    5436:	23 fd       	sbrc	r18, 3
    5438:	95 91       	lpm	r25, Z+
    543a:	23 ff       	sbrs	r18, 3
    543c:	91 91       	ld	r25, Z+
    543e:	2f 01       	movw	r4, r30
    5440:	99 23       	and	r25, r25
    5442:	09 f0       	breq	.+2      	; 0x5446 <vfprintf+0xfa>
    5444:	b8 cf       	rjmp	.-144    	; 0x53b6 <vfprintf+0x6a>
    5446:	89 2f       	mov	r24, r25
    5448:	85 54       	subi	r24, 0x45	; 69
    544a:	83 30       	cpi	r24, 0x03	; 3
    544c:	18 f0       	brcs	.+6      	; 0x5454 <vfprintf+0x108>
    544e:	80 52       	subi	r24, 0x20	; 32
    5450:	83 30       	cpi	r24, 0x03	; 3
    5452:	38 f4       	brcc	.+14     	; 0x5462 <vfprintf+0x116>
    5454:	44 e0       	ldi	r20, 0x04	; 4
    5456:	50 e0       	ldi	r21, 0x00	; 0
    5458:	a4 0e       	add	r10, r20
    545a:	b5 1e       	adc	r11, r21
    545c:	5f e3       	ldi	r21, 0x3F	; 63
    545e:	59 83       	std	Y+1, r21	; 0x01
    5460:	0f c0       	rjmp	.+30     	; 0x5480 <vfprintf+0x134>
    5462:	93 36       	cpi	r25, 0x63	; 99
    5464:	31 f0       	breq	.+12     	; 0x5472 <vfprintf+0x126>
    5466:	93 37       	cpi	r25, 0x73	; 115
    5468:	79 f0       	breq	.+30     	; 0x5488 <vfprintf+0x13c>
    546a:	93 35       	cpi	r25, 0x53	; 83
    546c:	09 f0       	breq	.+2      	; 0x5470 <vfprintf+0x124>
    546e:	56 c0       	rjmp	.+172    	; 0x551c <vfprintf+0x1d0>
    5470:	20 c0       	rjmp	.+64     	; 0x54b2 <vfprintf+0x166>
    5472:	f5 01       	movw	r30, r10
    5474:	80 81       	ld	r24, Z
    5476:	89 83       	std	Y+1, r24	; 0x01
    5478:	42 e0       	ldi	r20, 0x02	; 2
    547a:	50 e0       	ldi	r21, 0x00	; 0
    547c:	a4 0e       	add	r10, r20
    547e:	b5 1e       	adc	r11, r21
    5480:	61 01       	movw	r12, r2
    5482:	01 e0       	ldi	r16, 0x01	; 1
    5484:	10 e0       	ldi	r17, 0x00	; 0
    5486:	12 c0       	rjmp	.+36     	; 0x54ac <vfprintf+0x160>
    5488:	f5 01       	movw	r30, r10
    548a:	c0 80       	ld	r12, Z
    548c:	d1 80       	ldd	r13, Z+1	; 0x01
    548e:	f6 fc       	sbrc	r15, 6
    5490:	03 c0       	rjmp	.+6      	; 0x5498 <vfprintf+0x14c>
    5492:	6f ef       	ldi	r22, 0xFF	; 255
    5494:	7f ef       	ldi	r23, 0xFF	; 255
    5496:	02 c0       	rjmp	.+4      	; 0x549c <vfprintf+0x150>
    5498:	69 2d       	mov	r22, r9
    549a:	70 e0       	ldi	r23, 0x00	; 0
    549c:	42 e0       	ldi	r20, 0x02	; 2
    549e:	50 e0       	ldi	r21, 0x00	; 0
    54a0:	a4 0e       	add	r10, r20
    54a2:	b5 1e       	adc	r11, r21
    54a4:	c6 01       	movw	r24, r12
    54a6:	0e 94 8e 2b 	call	0x571c	; 0x571c <strnlen>
    54aa:	8c 01       	movw	r16, r24
    54ac:	5f e7       	ldi	r21, 0x7F	; 127
    54ae:	f5 22       	and	r15, r21
    54b0:	14 c0       	rjmp	.+40     	; 0x54da <vfprintf+0x18e>
    54b2:	f5 01       	movw	r30, r10
    54b4:	c0 80       	ld	r12, Z
    54b6:	d1 80       	ldd	r13, Z+1	; 0x01
    54b8:	f6 fc       	sbrc	r15, 6
    54ba:	03 c0       	rjmp	.+6      	; 0x54c2 <vfprintf+0x176>
    54bc:	6f ef       	ldi	r22, 0xFF	; 255
    54be:	7f ef       	ldi	r23, 0xFF	; 255
    54c0:	02 c0       	rjmp	.+4      	; 0x54c6 <vfprintf+0x17a>
    54c2:	69 2d       	mov	r22, r9
    54c4:	70 e0       	ldi	r23, 0x00	; 0
    54c6:	42 e0       	ldi	r20, 0x02	; 2
    54c8:	50 e0       	ldi	r21, 0x00	; 0
    54ca:	a4 0e       	add	r10, r20
    54cc:	b5 1e       	adc	r11, r21
    54ce:	c6 01       	movw	r24, r12
    54d0:	0e 94 83 2b 	call	0x5706	; 0x5706 <strnlen_P>
    54d4:	8c 01       	movw	r16, r24
    54d6:	50 e8       	ldi	r21, 0x80	; 128
    54d8:	f5 2a       	or	r15, r21
    54da:	f3 fe       	sbrs	r15, 3
    54dc:	07 c0       	rjmp	.+14     	; 0x54ec <vfprintf+0x1a0>
    54de:	1a c0       	rjmp	.+52     	; 0x5514 <vfprintf+0x1c8>
    54e0:	80 e2       	ldi	r24, 0x20	; 32
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	b3 01       	movw	r22, r6
    54e6:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    54ea:	ea 94       	dec	r14
    54ec:	8e 2d       	mov	r24, r14
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	08 17       	cp	r16, r24
    54f2:	19 07       	cpc	r17, r25
    54f4:	a8 f3       	brcs	.-22     	; 0x54e0 <vfprintf+0x194>
    54f6:	0e c0       	rjmp	.+28     	; 0x5514 <vfprintf+0x1c8>
    54f8:	f6 01       	movw	r30, r12
    54fa:	f7 fc       	sbrc	r15, 7
    54fc:	85 91       	lpm	r24, Z+
    54fe:	f7 fe       	sbrs	r15, 7
    5500:	81 91       	ld	r24, Z+
    5502:	6f 01       	movw	r12, r30
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	b3 01       	movw	r22, r6
    5508:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    550c:	e1 10       	cpse	r14, r1
    550e:	ea 94       	dec	r14
    5510:	01 50       	subi	r16, 0x01	; 1
    5512:	10 40       	sbci	r17, 0x00	; 0
    5514:	01 15       	cp	r16, r1
    5516:	11 05       	cpc	r17, r1
    5518:	79 f7       	brne	.-34     	; 0x54f8 <vfprintf+0x1ac>
    551a:	ea c0       	rjmp	.+468    	; 0x56f0 <vfprintf+0x3a4>
    551c:	94 36       	cpi	r25, 0x64	; 100
    551e:	11 f0       	breq	.+4      	; 0x5524 <vfprintf+0x1d8>
    5520:	99 36       	cpi	r25, 0x69	; 105
    5522:	69 f5       	brne	.+90     	; 0x557e <vfprintf+0x232>
    5524:	f7 fe       	sbrs	r15, 7
    5526:	08 c0       	rjmp	.+16     	; 0x5538 <vfprintf+0x1ec>
    5528:	f5 01       	movw	r30, r10
    552a:	20 81       	ld	r18, Z
    552c:	31 81       	ldd	r19, Z+1	; 0x01
    552e:	42 81       	ldd	r20, Z+2	; 0x02
    5530:	53 81       	ldd	r21, Z+3	; 0x03
    5532:	84 e0       	ldi	r24, 0x04	; 4
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	0a c0       	rjmp	.+20     	; 0x554c <vfprintf+0x200>
    5538:	f5 01       	movw	r30, r10
    553a:	80 81       	ld	r24, Z
    553c:	91 81       	ldd	r25, Z+1	; 0x01
    553e:	9c 01       	movw	r18, r24
    5540:	44 27       	eor	r20, r20
    5542:	37 fd       	sbrc	r19, 7
    5544:	40 95       	com	r20
    5546:	54 2f       	mov	r21, r20
    5548:	82 e0       	ldi	r24, 0x02	; 2
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	a8 0e       	add	r10, r24
    554e:	b9 1e       	adc	r11, r25
    5550:	9f e6       	ldi	r25, 0x6F	; 111
    5552:	f9 22       	and	r15, r25
    5554:	57 ff       	sbrs	r21, 7
    5556:	09 c0       	rjmp	.+18     	; 0x556a <vfprintf+0x21e>
    5558:	50 95       	com	r21
    555a:	40 95       	com	r20
    555c:	30 95       	com	r19
    555e:	21 95       	neg	r18
    5560:	3f 4f       	sbci	r19, 0xFF	; 255
    5562:	4f 4f       	sbci	r20, 0xFF	; 255
    5564:	5f 4f       	sbci	r21, 0xFF	; 255
    5566:	e0 e8       	ldi	r30, 0x80	; 128
    5568:	fe 2a       	or	r15, r30
    556a:	ca 01       	movw	r24, r20
    556c:	b9 01       	movw	r22, r18
    556e:	a1 01       	movw	r20, r2
    5570:	2a e0       	ldi	r18, 0x0A	; 10
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	0e 94 c5 2b 	call	0x578a	; 0x578a <__ultoa_invert>
    5578:	d8 2e       	mov	r13, r24
    557a:	d2 18       	sub	r13, r2
    557c:	40 c0       	rjmp	.+128    	; 0x55fe <vfprintf+0x2b2>
    557e:	95 37       	cpi	r25, 0x75	; 117
    5580:	29 f4       	brne	.+10     	; 0x558c <vfprintf+0x240>
    5582:	1f 2d       	mov	r17, r15
    5584:	1f 7e       	andi	r17, 0xEF	; 239
    5586:	2a e0       	ldi	r18, 0x0A	; 10
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	1d c0       	rjmp	.+58     	; 0x55c6 <vfprintf+0x27a>
    558c:	1f 2d       	mov	r17, r15
    558e:	19 7f       	andi	r17, 0xF9	; 249
    5590:	9f 36       	cpi	r25, 0x6F	; 111
    5592:	61 f0       	breq	.+24     	; 0x55ac <vfprintf+0x260>
    5594:	90 37       	cpi	r25, 0x70	; 112
    5596:	20 f4       	brcc	.+8      	; 0x55a0 <vfprintf+0x254>
    5598:	98 35       	cpi	r25, 0x58	; 88
    559a:	09 f0       	breq	.+2      	; 0x559e <vfprintf+0x252>
    559c:	ac c0       	rjmp	.+344    	; 0x56f6 <vfprintf+0x3aa>
    559e:	0f c0       	rjmp	.+30     	; 0x55be <vfprintf+0x272>
    55a0:	90 37       	cpi	r25, 0x70	; 112
    55a2:	39 f0       	breq	.+14     	; 0x55b2 <vfprintf+0x266>
    55a4:	98 37       	cpi	r25, 0x78	; 120
    55a6:	09 f0       	breq	.+2      	; 0x55aa <vfprintf+0x25e>
    55a8:	a6 c0       	rjmp	.+332    	; 0x56f6 <vfprintf+0x3aa>
    55aa:	04 c0       	rjmp	.+8      	; 0x55b4 <vfprintf+0x268>
    55ac:	28 e0       	ldi	r18, 0x08	; 8
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	0a c0       	rjmp	.+20     	; 0x55c6 <vfprintf+0x27a>
    55b2:	10 61       	ori	r17, 0x10	; 16
    55b4:	14 fd       	sbrc	r17, 4
    55b6:	14 60       	ori	r17, 0x04	; 4
    55b8:	20 e1       	ldi	r18, 0x10	; 16
    55ba:	30 e0       	ldi	r19, 0x00	; 0
    55bc:	04 c0       	rjmp	.+8      	; 0x55c6 <vfprintf+0x27a>
    55be:	14 fd       	sbrc	r17, 4
    55c0:	16 60       	ori	r17, 0x06	; 6
    55c2:	20 e1       	ldi	r18, 0x10	; 16
    55c4:	32 e0       	ldi	r19, 0x02	; 2
    55c6:	17 ff       	sbrs	r17, 7
    55c8:	08 c0       	rjmp	.+16     	; 0x55da <vfprintf+0x28e>
    55ca:	f5 01       	movw	r30, r10
    55cc:	60 81       	ld	r22, Z
    55ce:	71 81       	ldd	r23, Z+1	; 0x01
    55d0:	82 81       	ldd	r24, Z+2	; 0x02
    55d2:	93 81       	ldd	r25, Z+3	; 0x03
    55d4:	44 e0       	ldi	r20, 0x04	; 4
    55d6:	50 e0       	ldi	r21, 0x00	; 0
    55d8:	08 c0       	rjmp	.+16     	; 0x55ea <vfprintf+0x29e>
    55da:	f5 01       	movw	r30, r10
    55dc:	80 81       	ld	r24, Z
    55de:	91 81       	ldd	r25, Z+1	; 0x01
    55e0:	bc 01       	movw	r22, r24
    55e2:	80 e0       	ldi	r24, 0x00	; 0
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	42 e0       	ldi	r20, 0x02	; 2
    55e8:	50 e0       	ldi	r21, 0x00	; 0
    55ea:	a4 0e       	add	r10, r20
    55ec:	b5 1e       	adc	r11, r21
    55ee:	a1 01       	movw	r20, r2
    55f0:	0e 94 c5 2b 	call	0x578a	; 0x578a <__ultoa_invert>
    55f4:	d8 2e       	mov	r13, r24
    55f6:	d2 18       	sub	r13, r2
    55f8:	8f e7       	ldi	r24, 0x7F	; 127
    55fa:	f8 2e       	mov	r15, r24
    55fc:	f1 22       	and	r15, r17
    55fe:	f6 fe       	sbrs	r15, 6
    5600:	0b c0       	rjmp	.+22     	; 0x5618 <vfprintf+0x2cc>
    5602:	5e ef       	ldi	r21, 0xFE	; 254
    5604:	f5 22       	and	r15, r21
    5606:	d9 14       	cp	r13, r9
    5608:	38 f4       	brcc	.+14     	; 0x5618 <vfprintf+0x2cc>
    560a:	f4 fe       	sbrs	r15, 4
    560c:	07 c0       	rjmp	.+14     	; 0x561c <vfprintf+0x2d0>
    560e:	f2 fc       	sbrc	r15, 2
    5610:	05 c0       	rjmp	.+10     	; 0x561c <vfprintf+0x2d0>
    5612:	8f ee       	ldi	r24, 0xEF	; 239
    5614:	f8 22       	and	r15, r24
    5616:	02 c0       	rjmp	.+4      	; 0x561c <vfprintf+0x2d0>
    5618:	1d 2d       	mov	r17, r13
    561a:	01 c0       	rjmp	.+2      	; 0x561e <vfprintf+0x2d2>
    561c:	19 2d       	mov	r17, r9
    561e:	f4 fe       	sbrs	r15, 4
    5620:	0d c0       	rjmp	.+26     	; 0x563c <vfprintf+0x2f0>
    5622:	fe 01       	movw	r30, r28
    5624:	ed 0d       	add	r30, r13
    5626:	f1 1d       	adc	r31, r1
    5628:	80 81       	ld	r24, Z
    562a:	80 33       	cpi	r24, 0x30	; 48
    562c:	19 f4       	brne	.+6      	; 0x5634 <vfprintf+0x2e8>
    562e:	99 ee       	ldi	r25, 0xE9	; 233
    5630:	f9 22       	and	r15, r25
    5632:	08 c0       	rjmp	.+16     	; 0x5644 <vfprintf+0x2f8>
    5634:	1f 5f       	subi	r17, 0xFF	; 255
    5636:	f2 fe       	sbrs	r15, 2
    5638:	05 c0       	rjmp	.+10     	; 0x5644 <vfprintf+0x2f8>
    563a:	03 c0       	rjmp	.+6      	; 0x5642 <vfprintf+0x2f6>
    563c:	8f 2d       	mov	r24, r15
    563e:	86 78       	andi	r24, 0x86	; 134
    5640:	09 f0       	breq	.+2      	; 0x5644 <vfprintf+0x2f8>
    5642:	1f 5f       	subi	r17, 0xFF	; 255
    5644:	0f 2d       	mov	r16, r15
    5646:	f3 fc       	sbrc	r15, 3
    5648:	14 c0       	rjmp	.+40     	; 0x5672 <vfprintf+0x326>
    564a:	f0 fe       	sbrs	r15, 0
    564c:	0f c0       	rjmp	.+30     	; 0x566c <vfprintf+0x320>
    564e:	1e 15       	cp	r17, r14
    5650:	10 f0       	brcs	.+4      	; 0x5656 <vfprintf+0x30a>
    5652:	9d 2c       	mov	r9, r13
    5654:	0b c0       	rjmp	.+22     	; 0x566c <vfprintf+0x320>
    5656:	9d 2c       	mov	r9, r13
    5658:	9e 0c       	add	r9, r14
    565a:	91 1a       	sub	r9, r17
    565c:	1e 2d       	mov	r17, r14
    565e:	06 c0       	rjmp	.+12     	; 0x566c <vfprintf+0x320>
    5660:	80 e2       	ldi	r24, 0x20	; 32
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	b3 01       	movw	r22, r6
    5666:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    566a:	1f 5f       	subi	r17, 0xFF	; 255
    566c:	1e 15       	cp	r17, r14
    566e:	c0 f3       	brcs	.-16     	; 0x5660 <vfprintf+0x314>
    5670:	04 c0       	rjmp	.+8      	; 0x567a <vfprintf+0x32e>
    5672:	1e 15       	cp	r17, r14
    5674:	10 f4       	brcc	.+4      	; 0x567a <vfprintf+0x32e>
    5676:	e1 1a       	sub	r14, r17
    5678:	01 c0       	rjmp	.+2      	; 0x567c <vfprintf+0x330>
    567a:	ee 24       	eor	r14, r14
    567c:	04 ff       	sbrs	r16, 4
    567e:	0f c0       	rjmp	.+30     	; 0x569e <vfprintf+0x352>
    5680:	80 e3       	ldi	r24, 0x30	; 48
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	b3 01       	movw	r22, r6
    5686:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    568a:	02 ff       	sbrs	r16, 2
    568c:	1d c0       	rjmp	.+58     	; 0x56c8 <vfprintf+0x37c>
    568e:	01 fd       	sbrc	r16, 1
    5690:	03 c0       	rjmp	.+6      	; 0x5698 <vfprintf+0x34c>
    5692:	88 e7       	ldi	r24, 0x78	; 120
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	0e c0       	rjmp	.+28     	; 0x56b4 <vfprintf+0x368>
    5698:	88 e5       	ldi	r24, 0x58	; 88
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0b c0       	rjmp	.+22     	; 0x56b4 <vfprintf+0x368>
    569e:	80 2f       	mov	r24, r16
    56a0:	86 78       	andi	r24, 0x86	; 134
    56a2:	91 f0       	breq	.+36     	; 0x56c8 <vfprintf+0x37c>
    56a4:	01 ff       	sbrs	r16, 1
    56a6:	02 c0       	rjmp	.+4      	; 0x56ac <vfprintf+0x360>
    56a8:	8b e2       	ldi	r24, 0x2B	; 43
    56aa:	01 c0       	rjmp	.+2      	; 0x56ae <vfprintf+0x362>
    56ac:	80 e2       	ldi	r24, 0x20	; 32
    56ae:	f7 fc       	sbrc	r15, 7
    56b0:	8d e2       	ldi	r24, 0x2D	; 45
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	b3 01       	movw	r22, r6
    56b6:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    56ba:	06 c0       	rjmp	.+12     	; 0x56c8 <vfprintf+0x37c>
    56bc:	80 e3       	ldi	r24, 0x30	; 48
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	b3 01       	movw	r22, r6
    56c2:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    56c6:	9a 94       	dec	r9
    56c8:	d9 14       	cp	r13, r9
    56ca:	c0 f3       	brcs	.-16     	; 0x56bc <vfprintf+0x370>
    56cc:	da 94       	dec	r13
    56ce:	f1 01       	movw	r30, r2
    56d0:	ed 0d       	add	r30, r13
    56d2:	f1 1d       	adc	r31, r1
    56d4:	80 81       	ld	r24, Z
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	b3 01       	movw	r22, r6
    56da:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    56de:	dd 20       	and	r13, r13
    56e0:	a9 f7       	brne	.-22     	; 0x56cc <vfprintf+0x380>
    56e2:	06 c0       	rjmp	.+12     	; 0x56f0 <vfprintf+0x3a4>
    56e4:	80 e2       	ldi	r24, 0x20	; 32
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	b3 01       	movw	r22, r6
    56ea:	0e 94 99 2b 	call	0x5732	; 0x5732 <fputc>
    56ee:	ea 94       	dec	r14
    56f0:	ee 20       	and	r14, r14
    56f2:	c1 f7       	brne	.-16     	; 0x56e4 <vfprintf+0x398>
    56f4:	43 ce       	rjmp	.-890    	; 0x537c <vfprintf+0x30>
    56f6:	f3 01       	movw	r30, r6
    56f8:	66 81       	ldd	r22, Z+6	; 0x06
    56fa:	77 81       	ldd	r23, Z+7	; 0x07
    56fc:	cb 01       	movw	r24, r22
    56fe:	2b 96       	adiw	r28, 0x0b	; 11
    5700:	e2 e1       	ldi	r30, 0x12	; 18
    5702:	0c 94 24 29 	jmp	0x5248	; 0x5248 <__epilogue_restores__>

00005706 <strnlen_P>:
    5706:	fc 01       	movw	r30, r24
    5708:	05 90       	lpm	r0, Z+
    570a:	61 50       	subi	r22, 0x01	; 1
    570c:	70 40       	sbci	r23, 0x00	; 0
    570e:	01 10       	cpse	r0, r1
    5710:	d8 f7       	brcc	.-10     	; 0x5708 <strnlen_P+0x2>
    5712:	80 95       	com	r24
    5714:	90 95       	com	r25
    5716:	8e 0f       	add	r24, r30
    5718:	9f 1f       	adc	r25, r31
    571a:	08 95       	ret

0000571c <strnlen>:
    571c:	fc 01       	movw	r30, r24
    571e:	61 50       	subi	r22, 0x01	; 1
    5720:	70 40       	sbci	r23, 0x00	; 0
    5722:	01 90       	ld	r0, Z+
    5724:	01 10       	cpse	r0, r1
    5726:	d8 f7       	brcc	.-10     	; 0x571e <strnlen+0x2>
    5728:	80 95       	com	r24
    572a:	90 95       	com	r25
    572c:	8e 0f       	add	r24, r30
    572e:	9f 1f       	adc	r25, r31
    5730:	08 95       	ret

00005732 <fputc>:
    5732:	0f 93       	push	r16
    5734:	1f 93       	push	r17
    5736:	cf 93       	push	r28
    5738:	df 93       	push	r29
    573a:	8c 01       	movw	r16, r24
    573c:	eb 01       	movw	r28, r22
    573e:	8b 81       	ldd	r24, Y+3	; 0x03
    5740:	81 ff       	sbrs	r24, 1
    5742:	1b c0       	rjmp	.+54     	; 0x577a <fputc+0x48>
    5744:	82 ff       	sbrs	r24, 2
    5746:	0d c0       	rjmp	.+26     	; 0x5762 <fputc+0x30>
    5748:	2e 81       	ldd	r18, Y+6	; 0x06
    574a:	3f 81       	ldd	r19, Y+7	; 0x07
    574c:	8c 81       	ldd	r24, Y+4	; 0x04
    574e:	9d 81       	ldd	r25, Y+5	; 0x05
    5750:	28 17       	cp	r18, r24
    5752:	39 07       	cpc	r19, r25
    5754:	64 f4       	brge	.+24     	; 0x576e <fputc+0x3c>
    5756:	e8 81       	ld	r30, Y
    5758:	f9 81       	ldd	r31, Y+1	; 0x01
    575a:	01 93       	st	Z+, r16
    575c:	f9 83       	std	Y+1, r31	; 0x01
    575e:	e8 83       	st	Y, r30
    5760:	06 c0       	rjmp	.+12     	; 0x576e <fputc+0x3c>
    5762:	e8 85       	ldd	r30, Y+8	; 0x08
    5764:	f9 85       	ldd	r31, Y+9	; 0x09
    5766:	80 2f       	mov	r24, r16
    5768:	09 95       	icall
    576a:	89 2b       	or	r24, r25
    576c:	31 f4       	brne	.+12     	; 0x577a <fputc+0x48>
    576e:	8e 81       	ldd	r24, Y+6	; 0x06
    5770:	9f 81       	ldd	r25, Y+7	; 0x07
    5772:	01 96       	adiw	r24, 0x01	; 1
    5774:	9f 83       	std	Y+7, r25	; 0x07
    5776:	8e 83       	std	Y+6, r24	; 0x06
    5778:	02 c0       	rjmp	.+4      	; 0x577e <fputc+0x4c>
    577a:	0f ef       	ldi	r16, 0xFF	; 255
    577c:	1f ef       	ldi	r17, 0xFF	; 255
    577e:	c8 01       	movw	r24, r16
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	1f 91       	pop	r17
    5786:	0f 91       	pop	r16
    5788:	08 95       	ret

0000578a <__ultoa_invert>:
    578a:	fa 01       	movw	r30, r20
    578c:	aa 27       	eor	r26, r26
    578e:	28 30       	cpi	r18, 0x08	; 8
    5790:	51 f1       	breq	.+84     	; 0x57e6 <__ultoa_invert+0x5c>
    5792:	20 31       	cpi	r18, 0x10	; 16
    5794:	81 f1       	breq	.+96     	; 0x57f6 <__ultoa_invert+0x6c>
    5796:	e8 94       	clt
    5798:	6f 93       	push	r22
    579a:	6e 7f       	andi	r22, 0xFE	; 254
    579c:	6e 5f       	subi	r22, 0xFE	; 254
    579e:	7f 4f       	sbci	r23, 0xFF	; 255
    57a0:	8f 4f       	sbci	r24, 0xFF	; 255
    57a2:	9f 4f       	sbci	r25, 0xFF	; 255
    57a4:	af 4f       	sbci	r26, 0xFF	; 255
    57a6:	b1 e0       	ldi	r27, 0x01	; 1
    57a8:	3e d0       	rcall	.+124    	; 0x5826 <__ultoa_invert+0x9c>
    57aa:	b4 e0       	ldi	r27, 0x04	; 4
    57ac:	3c d0       	rcall	.+120    	; 0x5826 <__ultoa_invert+0x9c>
    57ae:	67 0f       	add	r22, r23
    57b0:	78 1f       	adc	r23, r24
    57b2:	89 1f       	adc	r24, r25
    57b4:	9a 1f       	adc	r25, r26
    57b6:	a1 1d       	adc	r26, r1
    57b8:	68 0f       	add	r22, r24
    57ba:	79 1f       	adc	r23, r25
    57bc:	8a 1f       	adc	r24, r26
    57be:	91 1d       	adc	r25, r1
    57c0:	a1 1d       	adc	r26, r1
    57c2:	6a 0f       	add	r22, r26
    57c4:	71 1d       	adc	r23, r1
    57c6:	81 1d       	adc	r24, r1
    57c8:	91 1d       	adc	r25, r1
    57ca:	a1 1d       	adc	r26, r1
    57cc:	20 d0       	rcall	.+64     	; 0x580e <__ultoa_invert+0x84>
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <__ultoa_invert+0x48>
    57d0:	68 94       	set
    57d2:	3f 91       	pop	r19
    57d4:	2a e0       	ldi	r18, 0x0A	; 10
    57d6:	26 9f       	mul	r18, r22
    57d8:	11 24       	eor	r1, r1
    57da:	30 19       	sub	r19, r0
    57dc:	30 5d       	subi	r19, 0xD0	; 208
    57de:	31 93       	st	Z+, r19
    57e0:	de f6       	brtc	.-74     	; 0x5798 <__ultoa_invert+0xe>
    57e2:	cf 01       	movw	r24, r30
    57e4:	08 95       	ret
    57e6:	46 2f       	mov	r20, r22
    57e8:	47 70       	andi	r20, 0x07	; 7
    57ea:	40 5d       	subi	r20, 0xD0	; 208
    57ec:	41 93       	st	Z+, r20
    57ee:	b3 e0       	ldi	r27, 0x03	; 3
    57f0:	0f d0       	rcall	.+30     	; 0x5810 <__ultoa_invert+0x86>
    57f2:	c9 f7       	brne	.-14     	; 0x57e6 <__ultoa_invert+0x5c>
    57f4:	f6 cf       	rjmp	.-20     	; 0x57e2 <__ultoa_invert+0x58>
    57f6:	46 2f       	mov	r20, r22
    57f8:	4f 70       	andi	r20, 0x0F	; 15
    57fa:	40 5d       	subi	r20, 0xD0	; 208
    57fc:	4a 33       	cpi	r20, 0x3A	; 58
    57fe:	18 f0       	brcs	.+6      	; 0x5806 <__ultoa_invert+0x7c>
    5800:	49 5d       	subi	r20, 0xD9	; 217
    5802:	31 fd       	sbrc	r19, 1
    5804:	40 52       	subi	r20, 0x20	; 32
    5806:	41 93       	st	Z+, r20
    5808:	02 d0       	rcall	.+4      	; 0x580e <__ultoa_invert+0x84>
    580a:	a9 f7       	brne	.-22     	; 0x57f6 <__ultoa_invert+0x6c>
    580c:	ea cf       	rjmp	.-44     	; 0x57e2 <__ultoa_invert+0x58>
    580e:	b4 e0       	ldi	r27, 0x04	; 4
    5810:	a6 95       	lsr	r26
    5812:	97 95       	ror	r25
    5814:	87 95       	ror	r24
    5816:	77 95       	ror	r23
    5818:	67 95       	ror	r22
    581a:	ba 95       	dec	r27
    581c:	c9 f7       	brne	.-14     	; 0x5810 <__ultoa_invert+0x86>
    581e:	00 97       	sbiw	r24, 0x00	; 0
    5820:	61 05       	cpc	r22, r1
    5822:	71 05       	cpc	r23, r1
    5824:	08 95       	ret
    5826:	9b 01       	movw	r18, r22
    5828:	ac 01       	movw	r20, r24
    582a:	0a 2e       	mov	r0, r26
    582c:	06 94       	lsr	r0
    582e:	57 95       	ror	r21
    5830:	47 95       	ror	r20
    5832:	37 95       	ror	r19
    5834:	27 95       	ror	r18
    5836:	ba 95       	dec	r27
    5838:	c9 f7       	brne	.-14     	; 0x582c <__ultoa_invert+0xa2>
    583a:	62 0f       	add	r22, r18
    583c:	73 1f       	adc	r23, r19
    583e:	84 1f       	adc	r24, r20
    5840:	95 1f       	adc	r25, r21
    5842:	a0 1d       	adc	r26, r0
    5844:	08 95       	ret

00005846 <_exit>:
    5846:	f8 94       	cli

00005848 <__stop_program>:
    5848:	ff cf       	rjmp	.-2      	; 0x5848 <__stop_program>
